{"version":3,"sources":["../../../../src/build/webpack/loaders/next-middleware-loader.ts"],"sourcesContent":["import type {\n  ProxyConfig,\n  ProxyMatcher,\n} from '../../analysis/get-page-static-info'\nimport { getModuleBuildInfo } from './get-module-build-info'\nimport {\n  MIDDLEWARE_LOCATION_REGEXP,\n  PROXY_LOCATION_REGEXP,\n} from '../../../lib/constants'\nimport { loadEntrypoint } from '../../load-entrypoint'\n\nexport type MiddlewareLoaderOptions = {\n  absolutePagePath: string\n  page: string\n  rootDir: string\n  matchers?: string\n  preferredRegion: string | string[] | undefined\n  middlewareConfig: string\n}\n\n// matchers can have special characters that break the loader params\n// parsing so we base64 encode/decode the string\nexport function encodeMatchers(matchers: ProxyMatcher[]) {\n  return Buffer.from(JSON.stringify(matchers)).toString('base64')\n}\n\nexport function decodeMatchers(encodedMatchers: string) {\n  return JSON.parse(\n    Buffer.from(encodedMatchers, 'base64').toString()\n  ) as ProxyMatcher[]\n}\n\nexport default async function middlewareLoader(this: any) {\n  const {\n    absolutePagePath,\n    page,\n    rootDir,\n    matchers: encodedMatchers,\n    preferredRegion,\n    middlewareConfig: middlewareConfigBase64,\n  }: MiddlewareLoaderOptions = this.getOptions()\n  const matchers = encodedMatchers ? decodeMatchers(encodedMatchers) : undefined\n  const pagePath = this.utils.contextify(\n    this.context || this.rootContext,\n    absolutePagePath\n  )\n\n  const middlewareConfig: ProxyConfig = JSON.parse(\n    Buffer.from(middlewareConfigBase64, 'base64').toString()\n  )\n  const buildInfo = getModuleBuildInfo(this._module)\n  buildInfo.nextEdgeMiddleware = {\n    matchers,\n    page:\n      page.replace(\n        new RegExp(\n          `/(${MIDDLEWARE_LOCATION_REGEXP}|${PROXY_LOCATION_REGEXP})$`\n        ),\n        ''\n      ) || '/',\n  }\n  buildInfo.rootDir = rootDir\n  buildInfo.route = {\n    page,\n    absolutePagePath,\n    preferredRegion,\n    middlewareConfig,\n  }\n\n  return await loadEntrypoint('middleware', {\n    VAR_USERLAND: pagePath,\n    VAR_DEFINITION_PAGE: page,\n  })\n}\n"],"names":["decodeMatchers","middlewareLoader","encodeMatchers","matchers","Buffer","from","JSON","stringify","toString","encodedMatchers","parse","absolutePagePath","page","rootDir","preferredRegion","middlewareConfig","middlewareConfigBase64","getOptions","undefined","pagePath","utils","contextify","context","rootContext","buildInfo","getModuleBuildInfo","_module","nextEdgeMiddleware","replace","RegExp","MIDDLEWARE_LOCATION_REGEXP","PROXY_LOCATION_REGEXP","route","loadEntrypoint","VAR_USERLAND","VAR_DEFINITION_PAGE"],"mappings":";;;;;;;;;;;;;;;;IA0BgBA,cAAc;eAAdA;;IAMhB,OAyCC;eAzC6BC;;IAVdC,cAAc;eAAdA;;;oCAlBmB;2BAI5B;gCACwB;AAaxB,SAASA,eAAeC,QAAwB;IACrD,OAAOC,OAAOC,IAAI,CAACC,KAAKC,SAAS,CAACJ,WAAWK,QAAQ,CAAC;AACxD;AAEO,SAASR,eAAeS,eAAuB;IACpD,OAAOH,KAAKI,KAAK,CACfN,OAAOC,IAAI,CAACI,iBAAiB,UAAUD,QAAQ;AAEnD;AAEe,eAAeP;IAC5B,MAAM,EACJU,gBAAgB,EAChBC,IAAI,EACJC,OAAO,EACPV,UAAUM,eAAe,EACzBK,eAAe,EACfC,kBAAkBC,sBAAsB,EACzC,GAA4B,IAAI,CAACC,UAAU;IAC5C,MAAMd,WAAWM,kBAAkBT,eAAeS,mBAAmBS;IACrE,MAAMC,WAAW,IAAI,CAACC,KAAK,CAACC,UAAU,CACpC,IAAI,CAACC,OAAO,IAAI,IAAI,CAACC,WAAW,EAChCZ;IAGF,MAAMI,mBAAgCT,KAAKI,KAAK,CAC9CN,OAAOC,IAAI,CAACW,wBAAwB,UAAUR,QAAQ;IAExD,MAAMgB,YAAYC,IAAAA,sCAAkB,EAAC,IAAI,CAACC,OAAO;IACjDF,UAAUG,kBAAkB,GAAG;QAC7BxB;QACAS,MACEA,KAAKgB,OAAO,CACV,IAAIC,OACF,CAAC,EAAE,EAAEC,qCAA0B,CAAC,CAAC,EAAEC,gCAAqB,CAAC,EAAE,CAAC,GAE9D,OACG;IACT;IACAP,UAAUX,OAAO,GAAGA;IACpBW,UAAUQ,KAAK,GAAG;QAChBpB;QACAD;QACAG;QACAC;IACF;IAEA,OAAO,MAAMkB,IAAAA,8BAAc,EAAC,cAAc;QACxCC,cAAcf;QACdgB,qBAAqBvB;IACvB;AACF","ignoreList":[0]}
{"version":3,"sources":["../../../src/build/output/index.ts"],"sourcesContent":["import createStore from 'next/dist/compiled/unistore'\nimport formatWebpackMessages from '../../shared/lib/format-webpack-messages'\nimport { store as consoleStore } from './store'\nimport type { OutputState } from './store'\nimport type { webpack } from 'next/dist/compiled/webpack/webpack'\nimport { COMPILER_NAMES } from '../../shared/lib/constants'\nimport type { CompilerNameValues } from '../../shared/lib/constants'\n\ntype CompilerDiagnostics = {\n  totalModulesCount: number\n  errors: string[] | null\n  warnings: string[] | null\n}\n\ntype WebpackStatus =\n  | { loading: true }\n  | ({ loading: false } & CompilerDiagnostics)\n\ntype BuildStatusStore = {\n  client: WebpackStatus\n  server: WebpackStatus\n  edgeServer: WebpackStatus\n  trigger: string | undefined\n  url: string | undefined\n}\n\nconst buildStore = createStore<BuildStatusStore>({\n  // @ts-expect-error initial value\n  client: {},\n  // @ts-expect-error initial value\n  server: {},\n  // @ts-expect-error initial value\n  edgeServer: {},\n})\nlet buildWasDone = false\nlet clientWasLoading = true\nlet serverWasLoading = true\nlet edgeServerWasLoading = false\n\nbuildStore.subscribe((state) => {\n  const { client, server, edgeServer, trigger, url } = state\n\n  const { appUrl } = consoleStore.getState()\n\n  if (client.loading || server.loading || edgeServer?.loading) {\n    consoleStore.setState(\n      {\n        bootstrap: false,\n        appUrl: appUrl!,\n        // If it takes more than 3 seconds to compile, mark it as loading status\n        loading: true,\n        trigger,\n        url,\n      } as OutputState,\n      true\n    )\n    clientWasLoading = (!buildWasDone && clientWasLoading) || client.loading\n    serverWasLoading = (!buildWasDone && serverWasLoading) || server.loading\n    edgeServerWasLoading =\n      (!buildWasDone && edgeServerWasLoading) || edgeServer.loading\n    buildWasDone = false\n    return\n  }\n\n  buildWasDone = true\n\n  let partialState: Partial<OutputState> = {\n    bootstrap: false,\n    appUrl: appUrl!,\n    loading: false,\n    typeChecking: false,\n    totalModulesCount:\n      (clientWasLoading ? client.totalModulesCount : 0) +\n      (serverWasLoading ? server.totalModulesCount : 0) +\n      (edgeServerWasLoading ? edgeServer?.totalModulesCount || 0 : 0),\n    hasEdgeServer: !!edgeServer,\n  }\n  if (client.errors && clientWasLoading) {\n    // Show only client errors\n    consoleStore.setState(\n      {\n        ...partialState,\n        errors: client.errors,\n        warnings: null,\n      } as OutputState,\n      true\n    )\n  } else if (server.errors && serverWasLoading) {\n    consoleStore.setState(\n      {\n        ...partialState,\n        errors: server.errors,\n        warnings: null,\n      } as OutputState,\n      true\n    )\n  } else if (edgeServer.errors && edgeServerWasLoading) {\n    consoleStore.setState(\n      {\n        ...partialState,\n        errors: edgeServer.errors,\n        warnings: null,\n      } as OutputState,\n      true\n    )\n  } else {\n    // Show warnings from all of them\n    const warnings = [\n      ...(client.warnings || []),\n      ...(server.warnings || []),\n      ...(edgeServer.warnings || []),\n    ]\n\n    consoleStore.setState(\n      {\n        ...partialState,\n        errors: null,\n        warnings: warnings.length === 0 ? null : warnings,\n      } as OutputState,\n      true\n    )\n  }\n})\n\nexport function watchCompilers(\n  client: webpack.Compiler,\n  server: webpack.Compiler,\n  edgeServer: webpack.Compiler\n) {\n  buildStore.setState({\n    client: { loading: true },\n    server: { loading: true },\n    edgeServer: { loading: true },\n    trigger: 'initial',\n    url: undefined,\n  })\n\n  function tapCompiler(\n    key: CompilerNameValues,\n    compiler: webpack.Compiler,\n    onEvent: (status: WebpackStatus) => void\n  ) {\n    compiler.hooks.invalid.tap(`NextJsInvalid-${key}`, () => {\n      onEvent({ loading: true })\n    })\n\n    compiler.hooks.done.tap(`NextJsDone-${key}`, (stats: webpack.Stats) => {\n      const { errors, warnings } = formatWebpackMessages(\n        stats.toJson({\n          preset: 'errors-warnings',\n          moduleTrace: true,\n        })\n      )\n\n      const hasErrors = !!errors?.length\n      const hasWarnings = !!warnings?.length\n\n      onEvent({\n        loading: false,\n        totalModulesCount: stats.compilation.modules.size,\n        errors: hasErrors ? errors : null,\n        warnings: hasWarnings ? warnings : null,\n      })\n    })\n  }\n\n  tapCompiler(COMPILER_NAMES.client, client, (status) => {\n    if (\n      !status.loading &&\n      !buildStore.getState().server.loading &&\n      !buildStore.getState().edgeServer.loading &&\n      status.totalModulesCount > 0\n    ) {\n      buildStore.setState({\n        client: status,\n        trigger: undefined,\n        url: undefined,\n      })\n    } else {\n      buildStore.setState({\n        client: status,\n      })\n    }\n  })\n  tapCompiler(COMPILER_NAMES.server, server, (status) => {\n    if (\n      !status.loading &&\n      !buildStore.getState().client.loading &&\n      !buildStore.getState().edgeServer.loading &&\n      status.totalModulesCount > 0\n    ) {\n      buildStore.setState({\n        server: status,\n        trigger: undefined,\n        url: undefined,\n      })\n    } else {\n      buildStore.setState({\n        server: status,\n      })\n    }\n  })\n  tapCompiler(COMPILER_NAMES.edgeServer, edgeServer, (status) => {\n    if (\n      !status.loading &&\n      !buildStore.getState().client.loading &&\n      !buildStore.getState().server.loading &&\n      status.totalModulesCount > 0\n    ) {\n      buildStore.setState({\n        edgeServer: status,\n        trigger: undefined,\n        url: undefined,\n      })\n    } else {\n      buildStore.setState({\n        edgeServer: status,\n      })\n    }\n  })\n}\n\nexport function reportTrigger(trigger: string, url?: string) {\n  buildStore.setState({\n    trigger,\n    url,\n  })\n}\n"],"names":["reportTrigger","watchCompilers","buildStore","createStore","client","server","edgeServer","buildWasDone","clientWasLoading","serverWasLoading","edgeServerWasLoading","subscribe","state","trigger","url","appUrl","consoleStore","getState","loading","setState","bootstrap","partialState","typeChecking","totalModulesCount","hasEdgeServer","errors","warnings","length","undefined","tapCompiler","key","compiler","onEvent","hooks","invalid","tap","done","stats","formatWebpackMessages","toJson","preset","moduleTrace","hasErrors","hasWarnings","compilation","modules","size","COMPILER_NAMES","status"],"mappings":"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","ignoreList":[0]}
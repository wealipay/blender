{"version":3,"sources":["../../../../src/server/mcp/tools/get-server-action-by-id.ts"],"sourcesContent":["import type { McpServer } from 'next/dist/compiled/@modelcontextprotocol/sdk/server/mcp'\nimport { z } from 'next/dist/compiled/zod'\nimport { promises as fs } from 'fs'\nimport { join } from 'path'\nimport { mcpTelemetryTracker } from '../mcp-telemetry-tracker'\n\nconst INLINE_ACTION_PREFIX = '$$RSC_SERVER_ACTION_'\n\ninterface ActionEntry {\n  workers?: Record<string, any>\n  layer?: Record<string, string>\n  filename: string\n  exportedName: string\n}\n\ninterface ServerReferenceManifest {\n  node: Record<string, ActionEntry>\n  edge: Record<string, ActionEntry>\n  encryptionKey: string\n}\n\nexport function registerGetActionByIdTool(server: McpServer, distDir: string) {\n  server.registerTool(\n    'get_server_action_by_id',\n    {\n      description:\n        'Locates a Server Action by its ID in the server-reference-manifest.json. Returns the filename and export name for the action.',\n      inputSchema: {\n        actionId: z.string(),\n      },\n    },\n    async (request) => {\n      // Track telemetry\n      mcpTelemetryTracker.recordToolCall('mcp/get_server_action_by_id')\n\n      try {\n        const { actionId } = request\n\n        if (!actionId) {\n          return {\n            content: [\n              {\n                type: 'text',\n                text: 'Error: actionId parameter is required',\n              },\n            ],\n          }\n        }\n\n        const manifestPath = join(\n          distDir,\n          'server',\n          'server-reference-manifest.json'\n        )\n\n        let manifestContent: string\n        try {\n          manifestContent = await fs.readFile(manifestPath, 'utf-8')\n        } catch (error) {\n          return {\n            content: [\n              {\n                type: 'text',\n                text: `Error: Could not read server-reference-manifest.json at ${manifestPath}.`,\n              },\n            ],\n          }\n        }\n\n        const manifest: ServerReferenceManifest = JSON.parse(manifestContent)\n\n        // Search in node entries\n        if (manifest.node && manifest.node[actionId]) {\n          const entry = manifest.node[actionId]\n          const isInlineAction =\n            entry.exportedName.startsWith(INLINE_ACTION_PREFIX)\n          return {\n            content: [\n              {\n                type: 'text',\n                text: JSON.stringify(\n                  {\n                    actionId,\n                    runtime: 'node',\n                    filename: entry.filename,\n                    functionName: isInlineAction\n                      ? 'inline server action'\n                      : entry.exportedName,\n                    layer: entry.layer,\n                    workers: entry.workers,\n                  },\n                  null,\n                  2\n                ),\n              },\n            ],\n          }\n        }\n\n        // Search in edge entries\n        if (manifest.edge && manifest.edge[actionId]) {\n          const entry = manifest.edge[actionId]\n          const isInlineAction =\n            entry.exportedName.startsWith(INLINE_ACTION_PREFIX)\n          return {\n            content: [\n              {\n                type: 'text',\n                text: JSON.stringify(\n                  {\n                    actionId,\n                    runtime: 'edge',\n                    filename: entry.filename,\n                    functionName: isInlineAction\n                      ? 'inline server action'\n                      : entry.exportedName,\n                    layer: entry.layer,\n                    workers: entry.workers,\n                  },\n                  null,\n                  2\n                ),\n              },\n            ],\n          }\n        }\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Error: Action ID \"${actionId}\" not found in server-reference-manifest.json`,\n            },\n          ],\n        }\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Error: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        }\n      }\n    }\n  )\n}\n"],"names":["registerGetActionByIdTool","INLINE_ACTION_PREFIX","server","distDir","registerTool","description","inputSchema","actionId","z","string","request","mcpTelemetryTracker","recordToolCall","content","type","text","manifestPath","join","manifestContent","fs","readFile","error","manifest","JSON","parse","node","entry","isInlineAction","exportedName","startsWith","stringify","runtime","filename","functionName","layer","workers","edge","Error","message","String"],"mappings":";;;;+BAqBgBA;;;eAAAA;;;qBApBE;oBACa;sBACV;qCACe;AAEpC,MAAMC,uBAAuB;AAetB,SAASD,0BAA0BE,MAAiB,EAAEC,OAAe;IAC1ED,OAAOE,YAAY,CACjB,2BACA;QACEC,aACE;QACFC,aAAa;YACXC,UAAUC,MAAC,CAACC,MAAM;QACpB;IACF,GACA,OAAOC;QACL,kBAAkB;QAClBC,wCAAmB,CAACC,cAAc,CAAC;QAEnC,IAAI;YACF,MAAM,EAAEL,QAAQ,EAAE,GAAGG;YAErB,IAAI,CAACH,UAAU;gBACb,OAAO;oBACLM,SAAS;wBACP;4BACEC,MAAM;4BACNC,MAAM;wBACR;qBACD;gBACH;YACF;YAEA,MAAMC,eAAeC,IAAAA,UAAI,EACvBd,SACA,UACA;YAGF,IAAIe;YACJ,IAAI;gBACFA,kBAAkB,MAAMC,YAAE,CAACC,QAAQ,CAACJ,cAAc;YACpD,EAAE,OAAOK,OAAO;gBACd,OAAO;oBACLR,SAAS;wBACP;4BACEC,MAAM;4BACNC,MAAM,CAAC,wDAAwD,EAAEC,aAAa,CAAC,CAAC;wBAClF;qBACD;gBACH;YACF;YAEA,MAAMM,WAAoCC,KAAKC,KAAK,CAACN;YAErD,yBAAyB;YACzB,IAAII,SAASG,IAAI,IAAIH,SAASG,IAAI,CAAClB,SAAS,EAAE;gBAC5C,MAAMmB,QAAQJ,SAASG,IAAI,CAAClB,SAAS;gBACrC,MAAMoB,iBACJD,MAAME,YAAY,CAACC,UAAU,CAAC5B;gBAChC,OAAO;oBACLY,SAAS;wBACP;4BACEC,MAAM;4BACNC,MAAMQ,KAAKO,SAAS,CAClB;gCACEvB;gCACAwB,SAAS;gCACTC,UAAUN,MAAMM,QAAQ;gCACxBC,cAAcN,iBACV,yBACAD,MAAME,YAAY;gCACtBM,OAAOR,MAAMQ,KAAK;gCAClBC,SAAST,MAAMS,OAAO;4BACxB,GACA,MACA;wBAEJ;qBACD;gBACH;YACF;YAEA,yBAAyB;YACzB,IAAIb,SAASc,IAAI,IAAId,SAASc,IAAI,CAAC7B,SAAS,EAAE;gBAC5C,MAAMmB,QAAQJ,SAASc,IAAI,CAAC7B,SAAS;gBACrC,MAAMoB,iBACJD,MAAME,YAAY,CAACC,UAAU,CAAC5B;gBAChC,OAAO;oBACLY,SAAS;wBACP;4BACEC,MAAM;4BACNC,MAAMQ,KAAKO,SAAS,CAClB;gCACEvB;gCACAwB,SAAS;gCACTC,UAAUN,MAAMM,QAAQ;gCACxBC,cAAcN,iBACV,yBACAD,MAAME,YAAY;gCACtBM,OAAOR,MAAMQ,KAAK;gCAClBC,SAAST,MAAMS,OAAO;4BACxB,GACA,MACA;wBAEJ;qBACD;gBACH;YACF;YAEA,OAAO;gBACLtB,SAAS;oBACP;wBACEC,MAAM;wBACNC,MAAM,CAAC,kBAAkB,EAAER,SAAS,6CAA6C,CAAC;oBACpF;iBACD;YACH;QACF,EAAE,OAAOc,OAAO;YACd,OAAO;gBACLR,SAAS;oBACP;wBACEC,MAAM;wBACNC,MAAM,CAAC,OAAO,EAAEM,iBAAiBgB,QAAQhB,MAAMiB,OAAO,GAAGC,OAAOlB,QAAQ;oBAC1E;iBACD;YACH;QACF;IACF;AAEJ","ignoreList":[0]}
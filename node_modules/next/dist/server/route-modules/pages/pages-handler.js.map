{"version":3,"sources":["../../../../src/server/route-modules/pages/pages-handler.ts"],"sourcesContent":["import type { IncomingMessage, ServerResponse } from 'node:http'\nimport type { ParsedUrlQuery } from 'node:querystring'\nimport { RouteKind } from '../../route-kind'\nimport { BaseServerSpan } from '../../lib/trace/constants'\nimport { getTracer, SpanKind, type Span } from '../../lib/trace/tracer'\nimport { formatUrl } from '../../../shared/lib/router/utils/format-url'\nimport { addRequestMeta, getRequestMeta } from '../../request-meta'\nimport { interopDefault } from '../../app-render/interop-default'\nimport { getRevalidateReason } from '../../instrumentation/utils'\nimport { normalizeDataPath } from '../../../shared/lib/page-path/normalize-data-path'\nimport {\n  CachedRouteKind,\n  type CachedPageValue,\n  type CachedRedirectValue,\n  type ResponseCacheEntry,\n  type ResponseGenerator,\n} from '../../response-cache'\n\nimport {\n  getCacheControlHeader,\n  type CacheControl,\n} from '../../lib/cache-control'\nimport { normalizeRepeatedSlashes } from '../../../shared/lib/utils'\nimport { getRedirectStatus } from '../../../lib/redirect-status'\nimport {\n  CACHE_ONE_YEAR,\n  HTML_CONTENT_TYPE_HEADER,\n  JSON_CONTENT_TYPE_HEADER,\n} from '../../../lib/constants'\nimport path from 'path'\nimport { sendRenderResult } from '../../send-payload'\nimport RenderResult from '../../render-result'\nimport { toResponseCacheEntry } from '../../response-cache/utils'\nimport { NoFallbackError } from '../../../shared/lib/no-fallback-error.external'\nimport { RedirectStatusCode } from '../../../client/components/redirect-status-code'\nimport { isBot } from '../../../shared/lib/router/utils/is-bot'\nimport { addPathPrefix } from '../../../shared/lib/router/utils/add-path-prefix'\nimport { removeTrailingSlash } from '../../../shared/lib/router/utils/remove-trailing-slash'\nimport type { PagesRouteModule } from './module.compiled'\nimport type {\n  GetServerSideProps,\n  GetStaticPaths,\n  GetStaticProps,\n} from '../../../types'\n\nexport const getHandler = ({\n  srcPage: originalSrcPage,\n  config,\n  userland,\n  routeModule,\n  isFallbackError,\n  getStaticPaths,\n  getStaticProps,\n  getServerSideProps,\n}: {\n  srcPage: string\n  config: Record<string, any> | undefined\n  userland: any\n  isFallbackError?: boolean\n  routeModule: PagesRouteModule\n  getStaticProps?: GetStaticProps\n  getStaticPaths?: GetStaticPaths\n  getServerSideProps?: GetServerSideProps\n}) => {\n  return async function handler(\n    req: IncomingMessage,\n    res: ServerResponse,\n    ctx: {\n      waitUntil: (prom: Promise<void>) => void\n    }\n  ): Promise<void> {\n    if (routeModule.isDev) {\n      addRequestMeta(\n        req,\n        'devRequestTimingInternalsEnd',\n        process.hrtime.bigint()\n      )\n    }\n    let srcPage = originalSrcPage\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n      srcPage = srcPage.replace(/\\/index$/, '') || '/'\n    } else if (srcPage === '/index') {\n      // we always normalize /index specifically\n      srcPage = '/'\n    }\n    const multiZoneDraftMode = process.env\n      .__NEXT_MULTI_ZONE_DRAFT_MODE as any as boolean\n\n    const prepareResult = await routeModule.prepare(req, res, {\n      srcPage,\n      multiZoneDraftMode,\n    })\n\n    if (!prepareResult) {\n      res.statusCode = 400\n      res.end('Bad Request')\n      ctx.waitUntil?.(Promise.resolve())\n      return\n    }\n\n    const isMinimalMode = Boolean(\n      process.env.MINIMAL_MODE || getRequestMeta(req, 'minimalMode')\n    )\n\n    const render404 = async () => {\n      // TODO: should route-module itself handle rendering the 404\n      if (routerServerContext?.render404) {\n        await routerServerContext.render404(req, res, parsedUrl, false)\n      } else {\n        res.end('This page could not be found')\n      }\n    }\n\n    const {\n      buildId,\n      query,\n      params,\n      parsedUrl,\n      originalQuery,\n      originalPathname,\n      buildManifest,\n      fallbackBuildManifest,\n      nextFontManifest,\n      serverFilesManifest,\n      reactLoadableManifest,\n      prerenderManifest,\n      isDraftMode,\n      isOnDemandRevalidate,\n      revalidateOnlyGenerated,\n      locale,\n      locales,\n      defaultLocale,\n      routerServerContext,\n      nextConfig,\n      resolvedPathname,\n      encodedResolvedPathname,\n    } = prepareResult\n\n    const isExperimentalCompile =\n      serverFilesManifest?.config?.experimental?.isExperimentalCompile\n\n    const hasServerProps = Boolean(getServerSideProps)\n    const hasStaticProps = Boolean(getStaticProps)\n    const hasStaticPaths = Boolean(getStaticPaths)\n    const hasGetInitialProps = Boolean(\n      (userland.default || userland).getInitialProps\n    )\n    let cacheKey: null | string = null\n    let isIsrFallback = false\n    let isNextDataRequest =\n      prepareResult.isNextDataRequest && (hasStaticProps || hasServerProps)\n\n    const is404Page = srcPage === '/404'\n    const is500Page = srcPage === '/500'\n    const isErrorPage = srcPage === '/_error'\n\n    if (!routeModule.isDev && !isDraftMode && hasStaticProps) {\n      cacheKey = `${locale ? `/${locale}` : ''}${\n        (srcPage === '/' || resolvedPathname === '/') && locale\n          ? ''\n          : resolvedPathname\n      }`\n\n      if (is404Page || is500Page || isErrorPage) {\n        cacheKey = `${locale ? `/${locale}` : ''}${srcPage}`\n      }\n\n      // ensure /index and / is normalized to one key\n      cacheKey = cacheKey === '/index' ? '/' : cacheKey\n    }\n\n    if (hasStaticPaths && !isDraftMode) {\n      const decodedPathname = removeTrailingSlash(\n        locale\n          ? addPathPrefix(resolvedPathname, `/${locale}`)\n          : resolvedPathname\n      )\n      const isPrerendered =\n        Boolean(prerenderManifest.routes[decodedPathname]) ||\n        prerenderManifest.notFoundRoutes.includes(decodedPathname)\n\n      const prerenderInfo = prerenderManifest.dynamicRoutes[srcPage]\n\n      if (prerenderInfo) {\n        if (prerenderInfo.fallback === false && !isPrerendered) {\n          if (nextConfig.experimental.adapterPath) {\n            return await render404()\n          }\n          throw new NoFallbackError()\n        }\n\n        if (\n          typeof prerenderInfo.fallback === 'string' &&\n          !isPrerendered &&\n          !isNextDataRequest\n        ) {\n          isIsrFallback = true\n        }\n      }\n    }\n\n    // When serving a bot request, we want to serve a blocking render and not\n    // the prerendered page. This ensures that the correct content is served\n    // to the bot in the head.\n    if (\n      (isIsrFallback && isBot(req.headers['user-agent'] || '')) ||\n      isMinimalMode\n    ) {\n      isIsrFallback = false\n    }\n\n    const tracer = getTracer()\n    const activeSpan = tracer.getActiveScopeSpan()\n\n    try {\n      const method = req.method || 'GET'\n\n      const resolvedUrl = formatUrl({\n        pathname: nextConfig.trailingSlash\n          ? `${encodedResolvedPathname}${!encodedResolvedPathname.endsWith('/') && parsedUrl.pathname?.endsWith('/') ? '/' : ''}`\n          : removeTrailingSlash(encodedResolvedPathname || '/'),\n        // make sure to only add query values from original URL\n        query: hasStaticProps ? {} : originalQuery,\n      })\n\n      const handleResponse = async (span?: Span) => {\n        const responseGenerator: ResponseGenerator = async ({\n          previousCacheEntry,\n        }) => {\n          const doRender = async () => {\n            try {\n              return await routeModule\n                .render(req, res, {\n                  query:\n                    hasStaticProps && !isExperimentalCompile\n                      ? ({\n                          ...params,\n                        } as ParsedUrlQuery)\n                      : {\n                          ...query,\n                          ...params,\n                        },\n                  params,\n                  page: srcPage,\n                  renderContext: {\n                    isDraftMode,\n                    isFallback: isIsrFallback,\n                    developmentNotFoundSourcePage: getRequestMeta(\n                      req,\n                      'developmentNotFoundSourcePage'\n                    ),\n                  },\n                  sharedContext: {\n                    buildId,\n                    customServer:\n                      Boolean(routerServerContext?.isCustomServer) || undefined,\n                    deploymentId: process.env.NEXT_DEPLOYMENT_ID,\n                  },\n                  renderOpts: {\n                    params,\n                    routeModule,\n                    page: srcPage,\n                    pageConfig: config || {},\n                    Component: interopDefault(userland),\n                    ComponentMod: userland,\n                    getStaticProps,\n                    getStaticPaths,\n                    getServerSideProps,\n                    supportsDynamicResponse: !hasStaticProps,\n                    buildManifest: isFallbackError\n                      ? fallbackBuildManifest\n                      : buildManifest,\n                    nextFontManifest,\n                    reactLoadableManifest,\n\n                    assetPrefix: nextConfig.assetPrefix,\n                    previewProps: prerenderManifest.preview,\n                    images: nextConfig.images as any,\n                    nextConfigOutput: nextConfig.output,\n                    optimizeCss: Boolean(nextConfig.experimental.optimizeCss),\n                    nextScriptWorkers: Boolean(\n                      nextConfig.experimental.nextScriptWorkers\n                    ),\n                    domainLocales: nextConfig.i18n?.domains,\n                    crossOrigin: nextConfig.crossOrigin,\n\n                    multiZoneDraftMode,\n                    basePath: nextConfig.basePath,\n                    disableOptimizedLoading:\n                      nextConfig.experimental.disableOptimizedLoading,\n                    largePageDataBytes:\n                      nextConfig.experimental.largePageDataBytes,\n\n                    isExperimentalCompile,\n\n                    experimental: {\n                      clientTraceMetadata:\n                        nextConfig.experimental.clientTraceMetadata ||\n                        ([] as any),\n                    },\n\n                    locale,\n                    locales,\n                    defaultLocale,\n                    setIsrStatus: routerServerContext?.setIsrStatus,\n\n                    isNextDataRequest:\n                      isNextDataRequest && (hasServerProps || hasStaticProps),\n\n                    resolvedUrl,\n                    // For getServerSideProps and getInitialProps we need to ensure we use the original URL\n                    // and not the resolved URL to prevent a hydration mismatch on\n                    // asPath\n                    resolvedAsPath:\n                      hasServerProps || hasGetInitialProps\n                        ? formatUrl({\n                            // we use the original URL pathname less the _next/data prefix if\n                            // present\n                            pathname: isNextDataRequest\n                              ? normalizeDataPath(originalPathname)\n                              : originalPathname,\n                            query: originalQuery,\n                          })\n                        : resolvedUrl,\n\n                    isOnDemandRevalidate,\n\n                    ErrorDebug: getRequestMeta(req, 'PagesErrorDebug'),\n                    err: getRequestMeta(req, 'invokeError'),\n                    dev: routeModule.isDev,\n\n                    // needed for experimental.optimizeCss feature\n                    distDir: path.join(\n                      /* turbopackIgnore: true */\n                      process.cwd(),\n                      routeModule.relativeProjectDir,\n                      routeModule.distDir\n                    ),\n                  },\n                })\n                .then((renderResult): ResponseCacheEntry => {\n                  const { metadata } = renderResult\n\n                  let cacheControl: CacheControl | undefined =\n                    metadata.cacheControl\n\n                  if ('isNotFound' in metadata && metadata.isNotFound) {\n                    return {\n                      value: null,\n                      cacheControl,\n                    } satisfies ResponseCacheEntry\n                  }\n\n                  // Handle `isRedirect`.\n                  if (metadata.isRedirect) {\n                    return {\n                      value: {\n                        kind: CachedRouteKind.REDIRECT,\n                        props: metadata.pageData ?? metadata.flightData,\n                      } satisfies CachedRedirectValue,\n                      cacheControl,\n                    } satisfies ResponseCacheEntry\n                  }\n\n                  return {\n                    value: {\n                      kind: CachedRouteKind.PAGES,\n                      html: renderResult,\n                      pageData: renderResult.metadata.pageData,\n                      headers: renderResult.metadata.headers,\n                      status: renderResult.metadata.statusCode,\n                    },\n                    cacheControl,\n                  }\n                })\n                .finally(() => {\n                  if (!span) return\n\n                  span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false,\n                  })\n\n                  const rootSpanAttributes = tracer.getRootSpanAttributes()\n                  // We were unable to get attributes, probably OTEL is not enabled\n                  if (!rootSpanAttributes) {\n                    return\n                  }\n\n                  if (\n                    rootSpanAttributes.get('next.span_type') !==\n                    BaseServerSpan.handleRequest\n                  ) {\n                    console.warn(\n                      `Unexpected root span type '${rootSpanAttributes.get(\n                        'next.span_type'\n                      )}'. Please report this Next.js issue https://github.com/vercel/next.js`\n                    )\n                    return\n                  }\n\n                  const route = rootSpanAttributes.get('next.route')\n                  if (route) {\n                    const name = `${method} ${route}`\n\n                    span.setAttributes({\n                      'next.route': route,\n                      'http.route': route,\n                      'next.span_name': name,\n                    })\n                    span.updateName(name)\n                  } else {\n                    span.updateName(`${method} ${srcPage}`)\n                  }\n                })\n            } catch (err: unknown) {\n              // if this is a background revalidate we need to report\n              // the request error here as it won't be bubbled\n              if (previousCacheEntry?.isStale) {\n                await routeModule.onRequestError(\n                  req,\n                  err,\n                  {\n                    routerKind: 'Pages Router',\n                    routePath: srcPage,\n                    routeType: 'render',\n                    revalidateReason: getRevalidateReason({\n                      isStaticGeneration: hasStaticProps,\n                      isOnDemandRevalidate,\n                    }),\n                  },\n                  routerServerContext\n                )\n              }\n              throw err\n            }\n          }\n\n          // if we've already generated this page we no longer\n          // serve the fallback\n          if (previousCacheEntry) {\n            isIsrFallback = false\n          }\n\n          if (isIsrFallback) {\n            const fallbackResponse = await routeModule\n              .getResponseCache(req)\n              .get(\n                routeModule.isDev\n                  ? null\n                  : locale\n                    ? `/${locale}${srcPage}`\n                    : srcPage,\n                async ({\n                  previousCacheEntry: previousFallbackCacheEntry = null,\n                }) => {\n                  if (!routeModule.isDev) {\n                    return toResponseCacheEntry(previousFallbackCacheEntry)\n                  }\n                  return doRender()\n                },\n                {\n                  routeKind: RouteKind.PAGES,\n                  isFallback: true,\n                  isRoutePPREnabled: false,\n                  isOnDemandRevalidate: false,\n                  incrementalCache: await routeModule.getIncrementalCache(\n                    req,\n                    nextConfig,\n                    prerenderManifest,\n                    isMinimalMode\n                  ),\n                  waitUntil: ctx.waitUntil,\n                }\n              )\n            if (fallbackResponse) {\n              // Remove the cache control from the response to prevent it from being\n              // used in the surrounding cache.\n              delete fallbackResponse.cacheControl\n              fallbackResponse.isMiss = true\n              return fallbackResponse\n            }\n          }\n\n          if (\n            !isMinimalMode &&\n            isOnDemandRevalidate &&\n            revalidateOnlyGenerated &&\n            !previousCacheEntry\n          ) {\n            res.statusCode = 404\n            // on-demand revalidate always sets this header\n            res.setHeader('x-nextjs-cache', 'REVALIDATED')\n            res.end('This page could not be found')\n            return null\n          }\n\n          if (\n            isIsrFallback &&\n            previousCacheEntry?.value?.kind === CachedRouteKind.PAGES\n          ) {\n            return {\n              value: {\n                kind: CachedRouteKind.PAGES,\n                html: new RenderResult(\n                  Buffer.from(previousCacheEntry.value.html),\n                  {\n                    contentType: HTML_CONTENT_TYPE_HEADER,\n                    metadata: {\n                      statusCode: previousCacheEntry.value.status,\n                      headers: previousCacheEntry.value.headers,\n                    },\n                  }\n                ),\n                pageData: {},\n                status: previousCacheEntry.value.status,\n                headers: previousCacheEntry.value.headers,\n              } satisfies CachedPageValue,\n              cacheControl: { revalidate: 0, expire: undefined },\n            } satisfies ResponseCacheEntry\n          }\n          return doRender()\n        }\n\n        const result = await routeModule.handleResponse({\n          cacheKey,\n          req,\n          nextConfig,\n          routeKind: RouteKind.PAGES,\n          isOnDemandRevalidate,\n          revalidateOnlyGenerated,\n          waitUntil: ctx.waitUntil,\n          responseGenerator: responseGenerator,\n          prerenderManifest,\n          isMinimalMode,\n        })\n\n        // if we got a cache hit this wasn't an ISR fallback\n        // but it wasn't generated during build so isn't in the\n        // prerender-manifest\n        if (isIsrFallback && !result?.isMiss) {\n          isIsrFallback = false\n        }\n\n        // response is finished is no cache entry\n        if (!result) {\n          return\n        }\n\n        if (hasStaticProps && !isMinimalMode) {\n          res.setHeader(\n            'x-nextjs-cache',\n            isOnDemandRevalidate\n              ? 'REVALIDATED'\n              : result.isMiss\n                ? 'MISS'\n                : result.isStale\n                  ? 'STALE'\n                  : 'HIT'\n          )\n        }\n\n        let cacheControl: CacheControl | undefined\n\n        if (!hasStaticProps || isIsrFallback) {\n          if (!res.getHeader('Cache-Control')) {\n            cacheControl = { revalidate: 0, expire: undefined }\n          }\n        } else if (is404Page) {\n          const notFoundRevalidate = getRequestMeta(req, 'notFoundRevalidate')\n\n          cacheControl = {\n            revalidate:\n              typeof notFoundRevalidate === 'undefined'\n                ? 0\n                : notFoundRevalidate,\n            expire: undefined,\n          }\n        } else if (is500Page) {\n          cacheControl = { revalidate: 0, expire: undefined }\n        } else if (result.cacheControl) {\n          // If the cache entry has a cache control with a revalidate value that's\n          // a number, use it.\n          if (typeof result.cacheControl.revalidate === 'number') {\n            if (result.cacheControl.revalidate < 1) {\n              throw new Error(\n                `Invalid revalidate configuration provided: ${result.cacheControl.revalidate} < 1`\n              )\n            }\n            cacheControl = {\n              revalidate: result.cacheControl.revalidate,\n              expire: result.cacheControl?.expire ?? nextConfig.expireTime,\n            }\n          } else {\n            // revalidate: false\n            cacheControl = {\n              revalidate: CACHE_ONE_YEAR,\n              expire: undefined,\n            }\n          }\n        }\n\n        // If cache control is already set on the response we don't\n        // override it to allow users to customize it via next.config\n        if (cacheControl && !res.getHeader('Cache-Control')) {\n          res.setHeader('Cache-Control', getCacheControlHeader(cacheControl))\n        }\n\n        // notFound: true case\n        if (!result.value) {\n          // add revalidate metadata before rendering 404 page\n          // so that we can use this as source of truth for the\n          // cache-control header instead of what the 404 page returns\n          // for the revalidate value\n          addRequestMeta(\n            req,\n            'notFoundRevalidate',\n            result.cacheControl?.revalidate\n          )\n\n          res.statusCode = 404\n\n          if (isNextDataRequest) {\n            res.end('{\"notFound\":true}')\n            return\n          }\n          return await render404()\n        }\n\n        if (result.value.kind === CachedRouteKind.REDIRECT) {\n          if (isNextDataRequest) {\n            res.setHeader('content-type', JSON_CONTENT_TYPE_HEADER)\n            res.end(JSON.stringify(result.value.props))\n            return\n          } else {\n            const handleRedirect = (pageData: any) => {\n              const redirect = {\n                destination: pageData.pageProps.__N_REDIRECT,\n                statusCode: pageData.pageProps.__N_REDIRECT_STATUS,\n                basePath: pageData.pageProps.__N_REDIRECT_BASE_PATH,\n              }\n              const statusCode = getRedirectStatus(redirect)\n              const { basePath } = nextConfig\n\n              if (\n                basePath &&\n                redirect.basePath !== false &&\n                redirect.destination.startsWith('/')\n              ) {\n                redirect.destination = `${basePath}${redirect.destination}`\n              }\n\n              if (redirect.destination.startsWith('/')) {\n                redirect.destination = normalizeRepeatedSlashes(\n                  redirect.destination\n                )\n              }\n\n              res.statusCode = statusCode\n              res.setHeader('Location', redirect.destination)\n              if (statusCode === RedirectStatusCode.PermanentRedirect) {\n                res.setHeader('Refresh', `0;url=${redirect.destination}`)\n              }\n              res.end(redirect.destination)\n            }\n            await handleRedirect(result.value.props)\n            return null\n          }\n        }\n\n        if (result.value.kind !== CachedRouteKind.PAGES) {\n          throw new Error(\n            `Invariant: received non-pages cache entry in pages handler`\n          )\n        }\n\n        // In dev, we should not cache pages for any reason.\n        if (routeModule.isDev) {\n          res.setHeader('Cache-Control', 'no-store, must-revalidate')\n        }\n\n        // Draft mode should never be cached\n        if (isDraftMode) {\n          res.setHeader(\n            'Cache-Control',\n            'private, no-cache, no-store, max-age=0, must-revalidate'\n          )\n        }\n\n        // when invoking _error before pages/500 we don't actually\n        // send the _error response\n        if (\n          getRequestMeta(req, 'customErrorRender') ||\n          (isErrorPage && isMinimalMode && res.statusCode === 500)\n        ) {\n          return null\n        }\n\n        await sendRenderResult({\n          req,\n          res,\n          // If we are rendering the error page it's not a data request\n          // anymore\n          result:\n            isNextDataRequest && !isErrorPage && !is500Page\n              ? new RenderResult(\n                  Buffer.from(JSON.stringify(result.value.pageData)),\n                  {\n                    contentType: JSON_CONTENT_TYPE_HEADER,\n                    metadata: result.value.html.metadata,\n                  }\n                )\n              : result.value.html,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          cacheControl: routeModule.isDev ? undefined : cacheControl,\n        })\n      }\n\n      // TODO: activeSpan code path is for when wrapped by\n      // next-server can be removed when this is no longer used\n      if (activeSpan) {\n        await handleResponse()\n      } else {\n        await tracer.withPropagatedContext(req.headers, () =>\n          tracer.trace(\n            BaseServerSpan.handleRequest,\n            {\n              spanName: `${method} ${srcPage}`,\n              kind: SpanKind.SERVER,\n              attributes: {\n                'http.method': method,\n                'http.target': req.url,\n              },\n            },\n            handleResponse\n          )\n        )\n      }\n    } catch (err) {\n      if (!(err instanceof NoFallbackError)) {\n        await routeModule.onRequestError(\n          req,\n          err,\n          {\n            routerKind: 'Pages Router',\n            routePath: srcPage,\n            routeType: 'render',\n            revalidateReason: getRevalidateReason({\n              isStaticGeneration: hasStaticProps,\n              isOnDemandRevalidate,\n            }),\n          },\n          routerServerContext\n        )\n      }\n\n      // rethrow so that we can handle serving error page\n      throw err\n    }\n  }\n}\n"],"names":["getHandler","srcPage","originalSrcPage","config","userland","routeModule","isFallbackError","getStaticPaths","getStaticProps","getServerSideProps","handler","req","res","ctx","serverFilesManifest","isDev","addRequestMeta","process","hrtime","bigint","env","TURBOPACK","replace","multiZoneDraftMode","__NEXT_MULTI_ZONE_DRAFT_MODE","prepareResult","prepare","statusCode","end","waitUntil","Promise","resolve","isMinimalMode","Boolean","MINIMAL_MODE","getRequestMeta","render404","routerServerContext","parsedUrl","buildId","query","params","originalQuery","originalPathname","buildManifest","fallbackBuildManifest","nextFontManifest","reactLoadableManifest","prerenderManifest","isDraftMode","isOnDemandRevalidate","revalidateOnlyGenerated","locale","locales","defaultLocale","nextConfig","resolvedPathname","encodedResolvedPathname","isExperimentalCompile","experimental","hasServerProps","hasStaticProps","hasStaticPaths","hasGetInitialProps","default","getInitialProps","cacheKey","isIsrFallback","isNextDataRequest","is404Page","is500Page","isErrorPage","decodedPathname","removeTrailingSlash","addPathPrefix","isPrerendered","routes","notFoundRoutes","includes","prerenderInfo","dynamicRoutes","fallback","adapterPath","NoFallbackError","isBot","headers","tracer","getTracer","activeSpan","getActiveScopeSpan","method","resolvedUrl","formatUrl","pathname","trailingSlash","endsWith","handleResponse","span","responseGenerator","previousCacheEntry","doRender","render","page","renderContext","isFallback","developmentNotFoundSourcePage","sharedContext","customServer","isCustomServer","undefined","deploymentId","NEXT_DEPLOYMENT_ID","renderOpts","pageConfig","Component","interopDefault","ComponentMod","supportsDynamicResponse","assetPrefix","previewProps","preview","images","nextConfigOutput","output","optimizeCss","nextScriptWorkers","domainLocales","i18n","domains","crossOrigin","basePath","disableOptimizedLoading","largePageDataBytes","clientTraceMetadata","setIsrStatus","resolvedAsPath","normalizeDataPath","ErrorDebug","err","dev","distDir","path","join","cwd","relativeProjectDir","then","renderResult","metadata","cacheControl","isNotFound","value","isRedirect","kind","CachedRouteKind","REDIRECT","props","pageData","flightData","PAGES","html","status","finally","setAttributes","rootSpanAttributes","getRootSpanAttributes","get","BaseServerSpan","handleRequest","console","warn","route","name","updateName","isStale","onRequestError","routerKind","routePath","routeType","revalidateReason","getRevalidateReason","isStaticGeneration","fallbackResponse","getResponseCache","previousFallbackCacheEntry","toResponseCacheEntry","routeKind","RouteKind","isRoutePPREnabled","incrementalCache","getIncrementalCache","isMiss","setHeader","RenderResult","Buffer","from","contentType","HTML_CONTENT_TYPE_HEADER","revalidate","expire","result","getHeader","notFoundRevalidate","Error","expireTime","CACHE_ONE_YEAR","getCacheControlHeader","JSON_CONTENT_TYPE_HEADER","JSON","stringify","handleRedirect","redirect","destination","pageProps","__N_REDIRECT","__N_REDIRECT_STATUS","__N_REDIRECT_BASE_PATH","getRedirectStatus","startsWith","normalizeRepeatedSlashes","RedirectStatusCode","PermanentRedirect","sendRenderResult","generateEtags","poweredByHeader","withPropagatedContext","trace","spanName","SpanKind","SERVER","attributes","url"],"mappings":"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","ignoreList":[0]}
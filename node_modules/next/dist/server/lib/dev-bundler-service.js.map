{"version":3,"sources":["../../../src/server/lib/dev-bundler-service.ts"],"sourcesContent":["import type { IncomingMessage } from 'http'\nimport type { DevBundler } from './router-utils/setup-dev-bundler'\nimport type { WorkerRequestHandler } from './types'\n\nimport { LRUCache } from './lru-cache'\nimport { createRequestResponseMocks } from './mock-request'\nimport { HMR_MESSAGE_SENT_TO_BROWSER } from '../dev/hot-reloader-types'\nimport type { ReactDebugChannelForBrowser } from '../dev/debug-channel'\nimport type { ServerCacheStatus } from '../../next-devtools/dev-overlay/cache-indicator'\n\n/**\n * The DevBundlerService provides an interface to perform tasks with the\n * bundler while in development.\n */\nexport class DevBundlerService {\n  public appIsrManifestInner: InstanceType<typeof LRUCache<boolean>>\n\n  constructor(\n    private readonly bundler: DevBundler,\n    private readonly handler: WorkerRequestHandler\n  ) {\n    this.appIsrManifestInner = new LRUCache(\n      8_000,\n\n      function length() {\n        return 16\n      }\n    )\n  }\n\n  public ensurePage: typeof this.bundler.hotReloader.ensurePage = async (\n    definition\n  ) => {\n    // TODO: remove after ensure is pulled out of server\n    return await this.bundler.hotReloader.ensurePage(definition)\n  }\n\n  public logErrorWithOriginalStack =\n    this.bundler.logErrorWithOriginalStack.bind(this.bundler)\n\n  public async getFallbackErrorComponents(url?: string) {\n    await this.bundler.hotReloader.buildFallbackError()\n    // Build the error page to ensure the fallback is built too.\n    // TODO: See if this can be moved into hotReloader or removed.\n    await this.bundler.hotReloader.ensurePage({\n      page: '/_error',\n      clientOnly: false,\n      definition: undefined,\n      url,\n    })\n  }\n\n  public async getCompilationError(page: string) {\n    const errors = await this.bundler.hotReloader.getCompilationErrors(page)\n    if (!errors) return\n\n    // Return the very first error we found.\n    return errors[0]\n  }\n\n  public async revalidate({\n    urlPath,\n    revalidateHeaders,\n    opts: revalidateOpts,\n  }: {\n    urlPath: string\n    revalidateHeaders: IncomingMessage['headers']\n    opts: any\n  }) {\n    const mocked = createRequestResponseMocks({\n      url: urlPath,\n      headers: revalidateHeaders,\n    })\n\n    await this.handler(mocked.req, mocked.res)\n    await mocked.res.hasStreamed\n\n    if (\n      mocked.res.getHeader('x-nextjs-cache') !== 'REVALIDATED' &&\n      mocked.res.statusCode !== 200 &&\n      !(mocked.res.statusCode === 404 && revalidateOpts.unstable_onlyGenerated)\n    ) {\n      throw new Error(`Invalid response ${mocked.res.statusCode}`)\n    }\n\n    return {}\n  }\n\n  public get appIsrManifest() {\n    const serializableManifest: Record<string, boolean> = {}\n\n    for (const [key, value] of this.appIsrManifestInner) {\n      serializableManifest[key] = value\n    }\n\n    return serializableManifest\n  }\n\n  public setCacheStatus(\n    status: ServerCacheStatus,\n    htmlRequestId: string,\n    requestId: string\n  ): void {\n    this.bundler.hotReloader.setCacheStatus(status, htmlRequestId, requestId)\n  }\n\n  public setIsrStatus(key: string, value: boolean | undefined) {\n    if (value === undefined) {\n      this.appIsrManifestInner.remove(key)\n    } else {\n      this.appIsrManifestInner.set(key, value)\n    }\n\n    // Only send the ISR manifest to legacy clients, i.e. Pages Router clients,\n    // or App Router clients that have Cache Components disabled. The ISR\n    // manifest is only used to inform the static indicator, which currently\n    // does not provide useful information if Cache Components is enabled due to\n    // its binary nature (i.e. it does not support showing info for partially\n    // static pages).\n    this.bundler?.hotReloader?.sendToLegacyClients({\n      type: HMR_MESSAGE_SENT_TO_BROWSER.ISR_MANIFEST,\n      data: this.appIsrManifest,\n    })\n  }\n\n  public setReactDebugChannel(\n    debugChannel: ReactDebugChannelForBrowser,\n    htmlRequestId: string,\n    requestId: string\n  ): void {\n    this.bundler.hotReloader.setReactDebugChannel(\n      debugChannel,\n      htmlRequestId,\n      requestId\n    )\n  }\n\n  public close() {\n    this.bundler.hotReloader.close()\n  }\n}\n"],"names":["DevBundlerService","constructor","bundler","handler","ensurePage","definition","hotReloader","logErrorWithOriginalStack","bind","appIsrManifestInner","LRUCache","length","getFallbackErrorComponents","url","buildFallbackError","page","clientOnly","undefined","getCompilationError","errors","getCompilationErrors","revalidate","urlPath","revalidateHeaders","opts","revalidateOpts","mocked","createRequestResponseMocks","headers","req","res","hasStreamed","getHeader","statusCode","unstable_onlyGenerated","Error","appIsrManifest","serializableManifest","key","value","setCacheStatus","status","htmlRequestId","requestId","setIsrStatus","remove","set","sendToLegacyClients","type","HMR_MESSAGE_SENT_TO_BROWSER","ISR_MANIFEST","data","setReactDebugChannel","debugChannel","close"],"mappings":"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","ignoreList":[0]}
{"version":3,"sources":["../../../../src/server/lib/router-utils/setup-dev-bundler.ts"],"sourcesContent":["import type { NextConfigComplete } from '../../config-shared'\nimport type { FilesystemDynamicRoute } from './filesystem'\nimport type { UnwrapPromise } from '../../../lib/coalesced-function'\nimport type { ProxyMatcher } from '../../../build/analysis/get-page-static-info'\nimport type { RoutesManifest } from '../../../build'\nimport type { MiddlewareRouteMatch } from '../../../shared/lib/router/utils/middleware-route-matcher'\nimport type { PropagateToWorkersField } from './types'\nimport type { NextJsHotReloaderInterface } from '../../dev/hot-reloader-types'\n\nimport { createDefineEnv } from '../../../build/swc'\nimport fs from 'fs'\nimport url from 'url'\nimport path from 'path'\nimport qs from 'querystring'\nimport Watchpack from 'next/dist/compiled/watchpack'\nimport findUp from 'next/dist/compiled/find-up'\nimport { buildCustomRoute } from './filesystem'\nimport * as Log from '../../../build/output/log'\nimport { setGlobal } from '../../../trace/shared'\nimport type { Telemetry } from '../../../telemetry/storage'\nimport type { IncomingMessage, ServerResponse } from 'http'\nimport { createValidFileMatcher } from '../find-page-file'\nimport {\n  EVENT_BUILD_FEATURE_USAGE,\n  eventCliSession,\n} from '../../../telemetry/events'\nimport { getSortedRoutes } from '../../../shared/lib/router/utils'\nimport { sortByPageExts } from '../../../build/sort-by-page-exts'\nimport { verifyTypeScriptSetup } from '../../../lib/verify-typescript-setup'\nimport { verifyPartytownSetup } from '../../../lib/verify-partytown-setup'\nimport { getNamedRouteRegex } from '../../../shared/lib/router/utils/route-regex'\nimport { normalizeAppPath } from '../../../shared/lib/router/utils/app-paths'\nimport { buildDataRoute } from './build-data-route'\nimport { getRouteMatcher } from '../../../shared/lib/router/utils/route-matcher'\nimport { normalizePathSep } from '../../../shared/lib/page-path/normalize-path-sep'\nimport { createClientRouterFilter } from '../../../lib/create-client-router-filter'\nimport { absolutePathToPage } from '../../../shared/lib/page-path/absolute-path-to-page'\nimport { generateInterceptionRoutesRewrites } from '../../../lib/generate-interception-routes-rewrites'\n\nimport {\n  CLIENT_STATIC_FILES_PATH,\n  DEV_CLIENT_PAGES_MANIFEST,\n  DEV_CLIENT_MIDDLEWARE_MANIFEST,\n  PHASE_DEVELOPMENT_SERVER,\n  TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST,\n  ROUTES_MANIFEST,\n  PRERENDER_MANIFEST,\n} from '../../../shared/lib/constants'\n\nimport { getMiddlewareRouteMatcher } from '../../../shared/lib/router/utils/middleware-route-matcher'\n\nimport {\n  isMiddlewareFile,\n  NestedMiddlewareError,\n  isInstrumentationHookFile,\n  getPossibleMiddlewareFilenames,\n  getPossibleInstrumentationHookFilenames,\n} from '../../../build/utils'\nimport { devPageFiles } from '../../../build/webpack/plugins/next-types-plugin/shared'\nimport type { LazyRenderServerInstance } from '../router-server'\nimport { HMR_MESSAGE_SENT_TO_BROWSER } from '../../dev/hot-reloader-types'\nimport { PAGE_TYPES } from '../../../lib/page-types'\nimport { generateEncryptionKeyBase64 } from '../../app-render/encryption-utils-server'\nimport {\n  isMetadataRouteFile,\n  isStaticMetadataFile,\n} from '../../../lib/metadata/is-metadata-route'\nimport { normalizeMetadataPageToRoute } from '../../../lib/metadata/get-metadata-route'\nimport { JsConfigPathsPlugin } from '../../../build/webpack/plugins/jsconfig-paths-plugin'\nimport { store as consoleStore } from '../../../build/output/store'\nimport {\n  isFileSystemCacheEnabledForDev,\n  ModuleBuildError,\n} from '../../../shared/lib/turbopack/utils'\nimport { getDefineEnv } from '../../../build/define-env'\nimport { TurbopackInternalError } from '../../../shared/lib/turbopack/internal-error'\nimport { normalizePath } from '../../../lib/normalize-path'\nimport {\n  JSON_CONTENT_TYPE_HEADER,\n  MIDDLEWARE_FILENAME,\n  PROXY_FILENAME,\n} from '../../../lib/constants'\nimport {\n  createRouteTypesManifest,\n  writeRouteTypesManifest,\n  writeValidatorFile,\n} from './route-types-utils'\nimport { isParallelRouteSegment } from '../../../shared/lib/segment'\nimport { ensureLeadingSlash } from '../../../shared/lib/page-path/ensure-leading-slash'\nimport { Lockfile } from '../../../build/lockfile'\nimport { deobfuscateText } from '../../../shared/lib/magic-identifier'\n\nexport type SetupOpts = {\n  renderServer: LazyRenderServerInstance\n  dir: string\n  turbo?: boolean\n  appDir?: string\n  pagesDir?: string\n  telemetry: Telemetry\n  isCustomServer?: boolean\n  fsChecker: UnwrapPromise<\n    ReturnType<typeof import('./filesystem').setupFsCheck>\n  >\n  nextConfig: NextConfigComplete\n  port: number\n  onDevServerCleanup: ((listener: () => Promise<void>) => void) | undefined\n  resetFetch: () => void\n}\n\nexport interface DevRoutesManifest {\n  version: number\n  caseSensitive: RoutesManifest['caseSensitive']\n  basePath: RoutesManifest['basePath']\n  rewrites: RoutesManifest['rewrites']\n  redirects: RoutesManifest['redirects']\n  headers: RoutesManifest['headers']\n  i18n: RoutesManifest['i18n']\n  skipProxyUrlNormalize: RoutesManifest['skipProxyUrlNormalize']\n}\n\nexport type ServerFields = {\n  actualMiddlewareFile?: string | undefined\n  actualInstrumentationHookFile?: string | undefined\n  appPathRoutes?: Record<string, string | string[]>\n  middleware?:\n    | {\n        page: string\n        match: MiddlewareRouteMatch\n        matchers?: ProxyMatcher[]\n      }\n    | undefined\n  hasAppNotFound?: boolean\n  interceptionRoutes?: ReturnType<\n    typeof import('./filesystem').buildCustomRoute\n  >[]\n  setIsrStatus?: (key: string, value: boolean | undefined) => void\n  resetFetch?: () => void\n}\n\nasync function verifyTypeScript(opts: SetupOpts) {\n  const verifyResult = await verifyTypeScriptSetup({\n    dir: opts.dir,\n    distDir: opts.nextConfig.distDir,\n    intentDirs: [opts.pagesDir, opts.appDir].filter(Boolean) as string[],\n    typeCheckPreflight: false,\n    tsconfigPath: opts.nextConfig.typescript.tsconfigPath,\n    disableStaticImages: opts.nextConfig.images.disableStaticImages,\n    hasAppDir: !!opts.appDir,\n    hasPagesDir: !!opts.pagesDir,\n    isolatedDevBuild: opts.nextConfig.experimental.isolatedDevBuild,\n  })\n\n  if (verifyResult.version) {\n    return true\n  }\n  return false\n}\n\nexport async function propagateServerField(\n  opts: SetupOpts,\n  field: PropagateToWorkersField,\n  args: any\n) {\n  await opts.renderServer?.instance?.propagateServerField(opts.dir, field, args)\n}\n\nasync function startWatcher(\n  opts: SetupOpts & {\n    isSrcDir: boolean\n  }\n) {\n  const { nextConfig, appDir, pagesDir, dir, resetFetch } = opts\n  const { useFileSystemPublicRoutes } = nextConfig\n\n  const distDir = path.join(opts.dir, opts.nextConfig.distDir)\n\n  setGlobal('distDir', distDir)\n  setGlobal('phase', PHASE_DEVELOPMENT_SERVER)\n\n  let lockfile\n  if (opts.nextConfig.experimental.lockDistDir) {\n    fs.mkdirSync(distDir, { recursive: true })\n    lockfile = await Lockfile.acquireWithRetriesOrExit(\n      path.join(distDir, 'lock'),\n      'next dev'\n    )\n  }\n\n  const validFileMatcher = createValidFileMatcher(\n    nextConfig.pageExtensions,\n    appDir\n  )\n\n  const serverFields: ServerFields = {}\n\n  // Update logging state once based on next.config.js when initializing\n  consoleStore.setState({\n    logging: nextConfig.logging !== false,\n  })\n\n  const hotReloader: NextJsHotReloaderInterface = opts.turbo\n    ? await (async () => {\n        const createHotReloaderTurbopack = (\n          require('../../dev/hot-reloader-turbopack') as typeof import('../../dev/hot-reloader-turbopack')\n        ).createHotReloaderTurbopack\n        return await createHotReloaderTurbopack(\n          opts,\n          serverFields,\n          distDir,\n          resetFetch,\n          lockfile\n        )\n      })()\n    : await (async () => {\n        const HotReloaderWebpack = (\n          require('../../dev/hot-reloader-webpack') as typeof import('../../dev/hot-reloader-webpack')\n        ).default\n        return new HotReloaderWebpack(opts.dir, {\n          isSrcDir: opts.isSrcDir,\n          appDir,\n          pagesDir,\n          distDir,\n          config: opts.nextConfig,\n          buildId: 'development',\n          encryptionKey: await generateEncryptionKeyBase64({\n            isBuild: false,\n            distDir,\n          }),\n          telemetry: opts.telemetry,\n          rewrites: opts.fsChecker.rewrites,\n          previewProps: opts.fsChecker.prerenderManifest.preview,\n          resetFetch,\n          lockfile,\n          onDevServerCleanup: opts.onDevServerCleanup,\n        })\n      })()\n\n  await hotReloader.start()\n\n  // have to write this after starting hot-reloader since that\n  // cleans the dist dir\n  const distTypesDir = path.join(distDir, 'types')\n  await writeRouteTypesManifest(\n    {\n      appRoutes: {},\n      pageRoutes: {},\n      layoutRoutes: {},\n      appRouteHandlerRoutes: {},\n      redirectRoutes: {},\n      rewriteRoutes: {},\n      appPagePaths: new Set(),\n      pagesRouterPagePaths: new Set(),\n      layoutPaths: new Set(),\n      appRouteHandlers: new Set(),\n      pageApiRoutes: new Set(),\n      filePathToRoute: new Map(),\n    },\n    path.join(distTypesDir, 'routes.d.ts'),\n    opts.nextConfig\n  )\n\n  const routesManifestPath = path.join(distDir, ROUTES_MANIFEST)\n  const routesManifest: DevRoutesManifest = {\n    version: 3,\n    caseSensitive: !!nextConfig.experimental.caseSensitiveRoutes,\n    basePath: nextConfig.basePath,\n    rewrites: opts.fsChecker.rewrites,\n    redirects: opts.fsChecker.redirects,\n    headers: opts.fsChecker.headers,\n    i18n: nextConfig.i18n || undefined,\n    skipProxyUrlNormalize: nextConfig.skipProxyUrlNormalize,\n  }\n  await fs.promises.writeFile(\n    routesManifestPath,\n    JSON.stringify(routesManifest)\n  )\n\n  const prerenderManifestPath = path.join(distDir, PRERENDER_MANIFEST)\n  await fs.promises.writeFile(\n    prerenderManifestPath,\n    JSON.stringify(opts.fsChecker.prerenderManifest, null, 2)\n  )\n\n  if (opts.nextConfig.experimental.nextScriptWorkers) {\n    await verifyPartytownSetup(\n      opts.dir,\n      path.join(distDir, CLIENT_STATIC_FILES_PATH)\n    )\n  }\n\n  opts.fsChecker.ensureCallback(async function ensure(item) {\n    if (item.type === 'appFile' || item.type === 'pageFile') {\n      await hotReloader.ensurePage({\n        clientOnly: false,\n        page: item.itemPath,\n        isApp: item.type === 'appFile',\n        definition: undefined,\n      })\n    }\n  })\n\n  let resolved = false\n  let prevSortedRoutes: string[] = []\n\n  await new Promise<void>(async (resolve, reject) => {\n    if (pagesDir) {\n      // Watchpack doesn't emit an event for an empty directory\n      fs.readdir(pagesDir, (_, files) => {\n        if (files?.length) {\n          return\n        }\n\n        if (!resolved) {\n          resolve()\n          resolved = true\n        }\n      })\n    }\n\n    const pages = pagesDir ? [pagesDir] : []\n    const app = appDir ? [appDir] : []\n    const directories = [...pages, ...app]\n\n    const rootDir = pagesDir || appDir\n    const files = [\n      ...getPossibleMiddlewareFilenames(\n        path.join(rootDir!, '..'),\n        nextConfig.pageExtensions\n      ),\n      ...getPossibleInstrumentationHookFilenames(\n        path.join(rootDir!, '..'),\n        nextConfig.pageExtensions\n      ),\n    ]\n    let nestedMiddleware: string[] = []\n\n    const envFiles = [\n      '.env.development.local',\n      '.env.local',\n      '.env.development',\n      '.env',\n    ].map((file) => path.join(dir, file))\n\n    files.push(...envFiles)\n\n    // tsconfig/jsconfig paths hot-reloading\n    const tsconfigPaths = [\n      path.join(dir, 'tsconfig.json'),\n      path.join(dir, 'jsconfig.json'),\n    ] as const\n    files.push(...tsconfigPaths)\n\n    const wp = new Watchpack({\n      // Watchpack default is 200ms which adds 200ms of dead time on bootup.\n      aggregateTimeout: 5, // Matches webpack-config.ts.\n      ignored: (pathname: string) => {\n        return (\n          !files.some((file) => file.startsWith(pathname)) &&\n          !directories.some(\n            (d) => pathname.startsWith(d) || d.startsWith(pathname)\n          )\n        )\n      },\n    })\n    const fileWatchTimes = new Map()\n    let enabledTypeScript = await verifyTypeScript(opts)\n    let previousClientRouterFilters: any\n    let previousConflictingPagePaths: Set<string> = new Set()\n\n    const routeTypesFilePath = path.join(distDir, 'types', 'routes.d.ts')\n    const validatorFilePath = path.join(distDir, 'types', 'validator.ts')\n\n    wp.on('aggregated', async () => {\n      let writeEnvDefinitions = false\n      let typescriptStatusFromLastAggregation = enabledTypeScript\n      let middlewareMatchers: ProxyMatcher[] | undefined\n      const routedPages: string[] = []\n      const knownFiles = wp.getTimeInfoEntries()\n      const appPaths: Record<string, string[]> = {}\n      const pageNameSet = new Set<string>()\n      const conflictingAppPagePaths = new Set<string>()\n      const appPageFilePaths = new Map<string, string>()\n      const pagesPageFilePaths = new Map<string, string>()\n      const appRouteHandlers: Array<{ route: string; filePath: string }> = []\n      const pageApiRoutes: Array<{ route: string; filePath: string }> = []\n\n      const pageRoutes: Array<{ route: string; filePath: string }> = []\n      const appRoutes: Array<{ route: string; filePath: string }> = []\n      const layoutRoutes: Array<{ route: string; filePath: string }> = []\n      const slots: Array<{ name: string; parent: string }> = []\n\n      let envChange = false\n      let tsconfigChange = false\n      let conflictingPageChange = 0\n      let hasRootAppNotFound = false\n\n      const { appFiles, pageFiles, staticMetadataFiles } = opts.fsChecker\n\n      appFiles.clear()\n      pageFiles.clear()\n      staticMetadataFiles.clear()\n      devPageFiles.clear()\n\n      const sortedKnownFiles: string[] = [...knownFiles.keys()].sort(\n        sortByPageExts(nextConfig.pageExtensions)\n      )\n\n      let proxyFilePath: string | undefined\n      let middlewareFilePath: string | undefined\n\n      for (const fileName of sortedKnownFiles) {\n        if (\n          !files.includes(fileName) &&\n          !directories.some((d) => fileName.startsWith(d))\n        ) {\n          continue\n        }\n\n        const { name: fileBaseName, dir: fileDir } = path.parse(fileName)\n\n        const isAtConventionLevel =\n          fileDir === dir || fileDir === path.join(dir, 'src')\n\n        if (isAtConventionLevel && fileBaseName === MIDDLEWARE_FILENAME) {\n          middlewareFilePath = fileName\n        }\n        if (isAtConventionLevel && fileBaseName === PROXY_FILENAME) {\n          proxyFilePath = fileName\n        }\n\n        if (middlewareFilePath) {\n          if (proxyFilePath) {\n            const cwd = process.cwd()\n\n            throw new Error(\n              `Both ${MIDDLEWARE_FILENAME} file \"./${path.relative(cwd, middlewareFilePath)}\" and ${PROXY_FILENAME} file \"./${path.relative(cwd, proxyFilePath)}\" are detected. Please use \"./${path.relative(cwd, proxyFilePath)}\" only. Learn more: https://nextjs.org/docs/messages/middleware-to-proxy`\n            )\n          }\n          Log.warnOnce(\n            `The \"${MIDDLEWARE_FILENAME}\" file convention is deprecated. Please use \"${PROXY_FILENAME}\" instead. Learn more: https://nextjs.org/docs/messages/middleware-to-proxy`\n          )\n        }\n\n        const meta = knownFiles.get(fileName)\n\n        const watchTime = fileWatchTimes.get(fileName)\n        // If the file is showing up for the first time or the meta.timestamp is changed since last time\n        const watchTimeChange =\n          watchTime === undefined ||\n          (watchTime && watchTime !== meta?.timestamp)\n        fileWatchTimes.set(fileName, meta?.timestamp)\n\n        if (envFiles.includes(fileName)) {\n          if (watchTimeChange) {\n            envChange = true\n          }\n          continue\n        }\n\n        if (tsconfigPaths.includes(fileName)) {\n          if (fileName.endsWith('tsconfig.json')) {\n            enabledTypeScript = true\n          }\n          if (watchTimeChange) {\n            tsconfigChange = true\n          }\n          continue\n        }\n\n        if (\n          meta?.accuracy === undefined ||\n          !validFileMatcher.isPageFile(fileName)\n        ) {\n          continue\n        }\n\n        const isAppPath = Boolean(\n          appDir &&\n            normalizePathSep(fileName).startsWith(\n              normalizePathSep(appDir) + '/'\n            )\n        )\n        const isPagePath = Boolean(\n          pagesDir &&\n            normalizePathSep(fileName).startsWith(\n              normalizePathSep(pagesDir) + '/'\n            )\n        )\n\n        const rootFile = absolutePathToPage(fileName, {\n          dir: dir,\n          extensions: nextConfig.pageExtensions,\n          keepIndex: false,\n          pagesType: PAGE_TYPES.ROOT,\n        })\n\n        if (isMiddlewareFile(rootFile)) {\n          const getStaticInfoIncludingLayouts = (\n            require('../../../build/get-static-info-including-layouts') as typeof import('../../../build/get-static-info-including-layouts')\n          ).getStaticInfoIncludingLayouts\n          const staticInfo = await getStaticInfoIncludingLayouts({\n            pageFilePath: fileName,\n            config: nextConfig,\n            appDir: appDir,\n            page: rootFile,\n            isDev: true,\n            isInsideAppDir: isAppPath,\n            pageExtensions: nextConfig.pageExtensions,\n          })\n          if (nextConfig.output === 'export') {\n            Log.error(\n              'Middleware cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export'\n            )\n            continue\n          }\n          serverFields.actualMiddlewareFile = rootFile\n\n          await propagateServerField(\n            opts,\n            'actualMiddlewareFile',\n            serverFields.actualMiddlewareFile\n          )\n          middlewareMatchers = staticInfo.middleware?.matchers || [\n            { regexp: '^/.*$', originalSource: '/:path*' },\n          ]\n          continue\n        }\n        if (isInstrumentationHookFile(rootFile)) {\n          serverFields.actualInstrumentationHookFile = rootFile\n          await propagateServerField(\n            opts,\n            'actualInstrumentationHookFile',\n            serverFields.actualInstrumentationHookFile\n          )\n          continue\n        }\n\n        if (fileName.endsWith('.ts') || fileName.endsWith('.tsx')) {\n          enabledTypeScript = true\n        }\n\n        if (!(isAppPath || isPagePath)) {\n          continue\n        }\n\n        // Collect all current filenames for the TS plugin to use\n        devPageFiles.add(fileName)\n\n        let pageName = absolutePathToPage(fileName, {\n          dir: isAppPath ? appDir! : pagesDir!,\n          extensions: nextConfig.pageExtensions,\n          keepIndex: isAppPath,\n          pagesType: isAppPath ? PAGE_TYPES.APP : PAGE_TYPES.PAGES,\n        })\n\n        if (\n          isAppPath &&\n          appDir &&\n          isMetadataRouteFile(\n            fileName.replace(appDir, ''),\n            nextConfig.pageExtensions,\n            true\n          )\n        ) {\n          const getPageStaticInfo = (\n            require('../../../build/analysis/get-page-static-info') as typeof import('../../../build/analysis/get-page-static-info')\n          ).getPageStaticInfo\n          const staticInfo = await getPageStaticInfo({\n            pageFilePath: fileName,\n            nextConfig: {},\n            page: pageName,\n            isDev: true,\n            pageType: PAGE_TYPES.APP,\n          })\n\n          pageName = normalizeMetadataPageToRoute(\n            pageName,\n            !!(staticInfo.generateSitemaps || staticInfo.generateImageMetadata)\n          )\n        }\n\n        if (\n          !isAppPath &&\n          pageName.startsWith('/api/') &&\n          nextConfig.output === 'export'\n        ) {\n          Log.error(\n            'API Routes cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export'\n          )\n          continue\n        }\n\n        if (isAppPath) {\n          const isRootNotFound = validFileMatcher.isRootNotFound(fileName)\n          hasRootAppNotFound = true\n\n          if (isRootNotFound) {\n            continue\n          }\n\n          // Ignore files/directories starting with `_` in the app directory\n          if (normalizePathSep(pageName).includes('/_')) {\n            continue\n          }\n\n          // Record parallel route slots for layout typing\n          // May run multiple times (e.g. if a parallel route\n          // has both a layout and a page, and children) but that's fine\n          const segments = normalizePathSep(pageName).split('/')\n          for (let i = segments.length - 1; i >= 0; i--) {\n            const segment = segments[i]\n            if (isParallelRouteSegment(segment)) {\n              const parentPath = normalizeAppPath(\n                segments.slice(0, i).join('/')\n              )\n\n              const slotName = segment.slice(1)\n              // check if the slot already exists\n              if (\n                slots.some(\n                  (s) => s.name === slotName && s.parent === parentPath\n                )\n              )\n                continue\n\n              slots.push({\n                name: slotName,\n                parent: parentPath,\n              })\n              break\n            }\n          }\n\n          // Record layouts\n          if (validFileMatcher.isAppLayoutPage(fileName)) {\n            layoutRoutes.push({\n              route: ensureLeadingSlash(\n                normalizeAppPath(normalizePathSep(pageName)).replace(\n                  /\\/layout$/,\n                  ''\n                )\n              ),\n              filePath: fileName,\n            })\n          }\n\n          if (!validFileMatcher.isAppRouterPage(fileName)) {\n            continue\n          }\n\n          const originalPageName = pageName\n          pageName = normalizeAppPath(pageName).replace(/%5F/g, '_')\n          if (!appPaths[pageName]) {\n            appPaths[pageName] = []\n          }\n          appPaths[pageName].push(\n            opts.turbo\n              ? // Turbopack outputs the correct path which is normalized with the `_`.\n                originalPageName.replace(/%5F/g, '_')\n              : originalPageName\n          )\n\n          if (useFileSystemPublicRoutes) {\n            // Static metadata files will be served from filesystem.\n            if (appDir && isStaticMetadataFile(fileName.replace(appDir, ''))) {\n              staticMetadataFiles.set(pageName, fileName)\n            } else {\n              appFiles.add(pageName)\n            }\n          }\n\n          if (validFileMatcher.isAppRouterRoute(fileName)) {\n            appRouteHandlers.push({\n              route: normalizePathSep(pageName),\n              filePath: fileName,\n            })\n          } else {\n            appRoutes.push({\n              route: normalizePathSep(pageName),\n              filePath: fileName,\n            })\n          }\n\n          if (routedPages.includes(pageName)) {\n            continue\n          }\n        } else {\n          if (useFileSystemPublicRoutes) {\n            pageFiles.add(pageName)\n            // always add to nextDataRoutes for now but in future only add\n            // entries that actually use getStaticProps/getServerSideProps\n            opts.fsChecker.nextDataRoutes.add(pageName)\n          }\n\n          if (pageName.startsWith('/api/')) {\n            pageApiRoutes.push({\n              route: normalizePathSep(pageName),\n              filePath: fileName,\n            })\n          } else {\n            pageRoutes.push({\n              route: normalizePathSep(pageName),\n              filePath: fileName,\n            })\n          }\n        }\n\n        // Record pages\n        if (isAppPath) {\n          appPageFilePaths.set(pageName, fileName)\n        } else {\n          pagesPageFilePaths.set(pageName, fileName)\n        }\n\n        if (appDir && pageNameSet.has(pageName)) {\n          conflictingAppPagePaths.add(pageName)\n        } else {\n          pageNameSet.add(pageName)\n        }\n\n        /**\n         * If there is a middleware that is not declared in the root we will\n         * warn without adding it so it doesn't make its way into the system.\n         */\n        if (/[\\\\\\\\/]_middleware$/.test(pageName)) {\n          nestedMiddleware.push(pageName)\n          continue\n        }\n\n        routedPages.push(pageName)\n      }\n\n      const numConflicting = conflictingAppPagePaths.size\n      conflictingPageChange = numConflicting - previousConflictingPagePaths.size\n\n      if (conflictingPageChange !== 0) {\n        if (numConflicting > 0) {\n          let errorMessage = `Conflicting app and page file${\n            numConflicting === 1 ? ' was' : 's were'\n          } found, please remove the conflicting files to continue:\\n`\n\n          for (const p of conflictingAppPagePaths) {\n            const appPath = path.relative(dir, appPageFilePaths.get(p)!)\n            const pagesPath = path.relative(dir, pagesPageFilePaths.get(p)!)\n            errorMessage += `  \"${pagesPath}\" - \"${appPath}\"\\n`\n          }\n          hotReloader.setHmrServerError(new Error(errorMessage))\n        } else if (numConflicting === 0) {\n          hotReloader.clearHmrServerError()\n          await propagateServerField(opts, 'reloadMatchers', undefined)\n        }\n      }\n\n      previousConflictingPagePaths = conflictingAppPagePaths\n\n      let clientRouterFilters: any\n      if (nextConfig.experimental.clientRouterFilter) {\n        clientRouterFilters = createClientRouterFilter(\n          Object.keys(appPaths),\n          nextConfig.experimental.clientRouterFilterRedirects\n            ? ((nextConfig as any)._originalRedirects || []).filter(\n                (r: any) => !r.internal\n              )\n            : [],\n          nextConfig.experimental.clientRouterFilterAllowedRate\n        )\n\n        if (\n          !previousClientRouterFilters ||\n          JSON.stringify(previousClientRouterFilters) !==\n            JSON.stringify(clientRouterFilters)\n        ) {\n          envChange = true\n          previousClientRouterFilters = clientRouterFilters\n        }\n      }\n\n      if (envChange || tsconfigChange) {\n        if (envChange) {\n          writeEnvDefinitions = true\n\n          await propagateServerField(opts, 'loadEnvConfig', [\n            { dev: true, forceReload: true },\n          ])\n        }\n\n        if (hotReloader.turbopackProject) {\n          const hasRewrites =\n            opts.fsChecker.rewrites.afterFiles.length > 0 ||\n            opts.fsChecker.rewrites.beforeFiles.length > 0 ||\n            opts.fsChecker.rewrites.fallback.length > 0\n\n          const rootPath =\n            opts.nextConfig.turbopack?.root ||\n            opts.nextConfig.outputFileTracingRoot ||\n            opts.dir\n          await hotReloader.turbopackProject.update({\n            defineEnv: createDefineEnv({\n              isTurbopack: true,\n              clientRouterFilters,\n              config: nextConfig,\n              dev: true,\n              distDir,\n              fetchCacheKeyPrefix:\n                opts.nextConfig.experimental.fetchCacheKeyPrefix,\n              hasRewrites,\n              // TODO: Implement\n              middlewareMatchers: undefined,\n              projectPath: opts.dir,\n              rewrites: opts.fsChecker.rewrites,\n            }),\n            rootPath,\n            projectPath: normalizePath(path.relative(rootPath, dir)),\n          })\n        } else {\n          let tsconfigResult:\n            | UnwrapPromise<\n                ReturnType<\n                  typeof import('../../../build/load-jsconfig').default\n                >\n              >\n            | undefined\n          // This is not relevant for Turbopack because tsconfig/jsconfig is handled internally.\n          if (tsconfigChange) {\n            try {\n              const loadJsConfig = (\n                require('../../../build/load-jsconfig') as typeof import('../../../build/load-jsconfig')\n              ).default\n              tsconfigResult = await loadJsConfig(dir, nextConfig)\n            } catch (_) {\n              /* do we want to log if there are syntax errors in tsconfig while editing? */\n            }\n          }\n\n          hotReloader.activeWebpackConfigs?.forEach((config, idx) => {\n            const isClient = idx === 0\n            const isNodeServer = idx === 1\n            const isEdgeServer = idx === 2\n            const hasRewrites =\n              opts.fsChecker.rewrites.afterFiles.length > 0 ||\n              opts.fsChecker.rewrites.beforeFiles.length > 0 ||\n              opts.fsChecker.rewrites.fallback.length > 0\n\n            if (tsconfigChange) {\n              config.resolve?.plugins?.forEach((plugin: any) => {\n                // look for the JsConfigPathsPlugin and update with\n                // the latest paths/baseUrl config\n                if (plugin instanceof JsConfigPathsPlugin && tsconfigResult) {\n                  const { resolvedBaseUrl, jsConfig } = tsconfigResult\n                  const currentResolvedBaseUrl = plugin.resolvedBaseUrl\n                  const resolvedUrlIndex = config.resolve?.modules?.findIndex(\n                    (item) => item === currentResolvedBaseUrl?.baseUrl\n                  )\n\n                  if (resolvedBaseUrl) {\n                    if (\n                      resolvedBaseUrl.baseUrl !==\n                      currentResolvedBaseUrl?.baseUrl\n                    ) {\n                      // remove old baseUrl and add new one\n                      if (resolvedUrlIndex && resolvedUrlIndex > -1) {\n                        config.resolve?.modules?.splice(resolvedUrlIndex, 1)\n                      }\n\n                      // If the resolvedBaseUrl is implicit we only remove the previous value.\n                      // Only add the baseUrl if it's explicitly set in tsconfig/jsconfig\n                      if (!resolvedBaseUrl.isImplicit) {\n                        config.resolve?.modules?.push(resolvedBaseUrl.baseUrl)\n                      }\n                    }\n                  }\n\n                  if (jsConfig?.compilerOptions?.paths && resolvedBaseUrl) {\n                    Object.keys(plugin.paths).forEach((key) => {\n                      delete plugin.paths[key]\n                    })\n                    Object.assign(plugin.paths, jsConfig.compilerOptions.paths)\n                    plugin.resolvedBaseUrl = resolvedBaseUrl\n                  }\n                }\n              })\n            }\n\n            if (envChange) {\n              config.plugins?.forEach((plugin: any) => {\n                // we look for the DefinePlugin definitions so we can\n                // update them on the active compilers\n                if (\n                  plugin &&\n                  typeof plugin.definitions === 'object' &&\n                  plugin.definitions.__NEXT_DEFINE_ENV\n                ) {\n                  const newDefine = getDefineEnv({\n                    isTurbopack: false,\n                    clientRouterFilters,\n                    config: nextConfig,\n                    dev: true,\n                    distDir,\n                    fetchCacheKeyPrefix:\n                      opts.nextConfig.experimental.fetchCacheKeyPrefix,\n                    hasRewrites,\n                    isClient,\n                    isEdgeServer,\n                    isNodeServer,\n                    middlewareMatchers: undefined,\n                    projectPath: opts.dir,\n                    rewrites: opts.fsChecker.rewrites,\n                  })\n\n                  Object.keys(plugin.definitions).forEach((key) => {\n                    if (!(key in newDefine)) {\n                      delete plugin.definitions[key]\n                    }\n                  })\n                  Object.assign(plugin.definitions, newDefine)\n                }\n              })\n            }\n          })\n        }\n        await hotReloader.invalidate({\n          reloadAfterInvalidation: envChange,\n        })\n      }\n\n      if (nestedMiddleware.length > 0) {\n        Log.error(\n          new NestedMiddlewareError(\n            nestedMiddleware,\n            dir,\n            (pagesDir || appDir)!\n          ).message\n        )\n        nestedMiddleware = []\n      }\n\n      // Make sure to sort parallel routes to make the result deterministic.\n      serverFields.appPathRoutes = Object.fromEntries(\n        Object.entries(appPaths).map(([k, v]) => [k, v.sort()])\n      )\n      await propagateServerField(\n        opts,\n        'appPathRoutes',\n        serverFields.appPathRoutes\n      )\n\n      // TODO: pass this to fsChecker/next-dev-server?\n      serverFields.middleware = middlewareMatchers\n        ? {\n            match: null as any,\n            page: '/',\n            matchers: middlewareMatchers,\n          }\n        : undefined\n\n      await propagateServerField(opts, 'middleware', serverFields.middleware)\n      serverFields.hasAppNotFound = hasRootAppNotFound\n\n      opts.fsChecker.middlewareMatcher = serverFields.middleware?.matchers\n        ? getMiddlewareRouteMatcher(serverFields.middleware?.matchers)\n        : undefined\n\n      const interceptionRoutes = generateInterceptionRoutesRewrites(\n        Object.keys(appPaths),\n        opts.nextConfig.basePath\n      ).map((item) =>\n        buildCustomRoute(\n          'before_files_rewrite',\n          item,\n          opts.nextConfig.basePath,\n          opts.nextConfig.experimental.caseSensitiveRoutes\n        )\n      )\n\n      opts.fsChecker.rewrites.beforeFiles.push(...interceptionRoutes)\n\n      const exportPathMap =\n        (typeof nextConfig.exportPathMap === 'function' &&\n          (await nextConfig.exportPathMap?.(\n            {},\n            {\n              dev: true,\n              dir: opts.dir,\n              outDir: null,\n              distDir: distDir,\n              buildId: 'development',\n            }\n          ))) ||\n        {}\n\n      const exportPathMapEntries = Object.entries(exportPathMap || {})\n\n      if (exportPathMapEntries.length > 0) {\n        opts.fsChecker.exportPathMapRoutes = exportPathMapEntries.map(\n          ([key, value]) =>\n            buildCustomRoute(\n              'before_files_rewrite',\n              {\n                source: key,\n                destination: `${value.page}${\n                  value.query ? '?' : ''\n                }${qs.stringify(value.query)}`,\n              },\n              opts.nextConfig.basePath,\n              opts.nextConfig.experimental.caseSensitiveRoutes\n            )\n        )\n      }\n\n      try {\n        // we serve a separate manifest with all pages for the client in\n        // dev mode so that we can match a page after a rewrite on the client\n        // before it has been built and is populated in the _buildManifest\n        const sortedRoutes = getSortedRoutes(routedPages)\n\n        opts.fsChecker.dynamicRoutes = sortedRoutes.map(\n          (page): FilesystemDynamicRoute => {\n            const regex = getNamedRouteRegex(page, {\n              prefixRouteKeys: true,\n            })\n            return {\n              regex: regex.re.toString(),\n              namedRegex: regex.namedRegex,\n              routeKeys: regex.routeKeys,\n              match: getRouteMatcher(regex),\n              page,\n            }\n          }\n        )\n\n        const dataRoutes: typeof opts.fsChecker.dynamicRoutes = []\n\n        for (const page of sortedRoutes) {\n          const route = buildDataRoute(page, 'development')\n          const routeRegex = getNamedRouteRegex(route.page, {\n            prefixRouteKeys: true,\n          })\n          dataRoutes.push({\n            ...route,\n            regex: routeRegex.re.toString(),\n            namedRegex: routeRegex.namedRegex,\n            routeKeys: routeRegex.routeKeys,\n            match: getRouteMatcher({\n              // TODO: fix this in the manifest itself, must also be fixed in\n              // upstream builder that relies on this\n              re: opts.nextConfig.i18n\n                ? new RegExp(\n                    route.dataRouteRegex.replace(\n                      `/development/`,\n                      `/development/(?<nextLocale>[^/]+?)/`\n                    )\n                  )\n                : new RegExp(route.dataRouteRegex),\n              groups: routeRegex.groups,\n            }),\n          })\n        }\n        opts.fsChecker.dynamicRoutes.unshift(...dataRoutes)\n\n        // For Turbopack ADDED_PAGE and REMOVED_PAGE are implemented in hot-reloader-turbopack.ts\n        // in order to avoid a race condition where ADDED_PAGE and REMOVED_PAGE are sent before Turbopack picked up the file change.\n        if (!opts.turbo) {\n          // Reload the matchers. The filesystem would have been written to,\n          // and the matchers need to re-scan it to update the router.\n          // Reloading the matchers should happen before `ADDED_PAGE` or `REMOVED_PAGE` is sent over the websocket\n          // otherwise it sends the event too early.\n          await propagateServerField(opts, 'reloadMatchers', undefined)\n\n          if (\n            !prevSortedRoutes?.every((val, idx) => val === sortedRoutes[idx])\n          ) {\n            const addedRoutes = sortedRoutes.filter(\n              (route) => !prevSortedRoutes.includes(route)\n            )\n            const removedRoutes = prevSortedRoutes.filter(\n              (route) => !sortedRoutes.includes(route)\n            )\n\n            // emit the change so clients fetch the update\n            hotReloader.send({\n              type: HMR_MESSAGE_SENT_TO_BROWSER.DEV_PAGES_MANIFEST_UPDATE,\n              data: [\n                {\n                  devPagesManifest: true,\n                },\n              ],\n            })\n\n            addedRoutes.forEach((route) => {\n              hotReloader.send({\n                type: HMR_MESSAGE_SENT_TO_BROWSER.ADDED_PAGE,\n                data: [route],\n              })\n            })\n\n            removedRoutes.forEach((route) => {\n              hotReloader.send({\n                type: HMR_MESSAGE_SENT_TO_BROWSER.REMOVED_PAGE,\n                data: [route],\n              })\n            })\n          }\n        }\n        prevSortedRoutes = sortedRoutes\n\n        if (enabledTypeScript) {\n          // Using === false to make the check clearer.\n          if (typescriptStatusFromLastAggregation === false) {\n            // we tolerate the error here as this is best effort\n            // and the manual install command will be shown\n            await verifyTypeScript(opts)\n              .then(() => {\n                tsconfigChange = true\n              })\n              .catch(() => {})\n          }\n\n          if (writeEnvDefinitions && nextConfig.experimental?.typedEnv) {\n            // TODO: The call to propagateServerField 'loadEnvConfig' causes the env to be loaded twice on env file changes.\n            const loadEnvConfig = (\n              require('@next/env') as typeof import('@next/env')\n            ).loadEnvConfig\n            const { loadedEnvFiles } = loadEnvConfig(\n              dir,\n              process.env.NODE_ENV === 'development',\n              // Silent as it's the second time `loadEnvConfig` is called in this pass.\n              undefined,\n              true\n            )\n\n            const createEnvDefinitions = (\n              require('../experimental/create-env-definitions') as typeof import('../experimental/create-env-definitions')\n            ).createEnvDefinitions\n            await createEnvDefinitions({\n              distDir,\n              loadedEnvFiles: [\n                ...loadedEnvFiles,\n                {\n                  path: nextConfig.configFileName,\n                  env: nextConfig.env,\n                  contents: '',\n                },\n              ],\n            })\n          }\n\n          const routeTypesManifest = await createRouteTypesManifest({\n            dir,\n            pageRoutes,\n            appRoutes,\n            layoutRoutes,\n            slots,\n            redirects: opts.nextConfig.redirects,\n            rewrites: opts.nextConfig.rewrites,\n            // Ensure relative paths in validator.ts are computed from validatorFilePath,\n            // matching behavior of build and CLI typegen.\n            validatorFilePath,\n            appRouteHandlers,\n            pageApiRoutes,\n          })\n\n          await writeRouteTypesManifest(\n            routeTypesManifest,\n            routeTypesFilePath,\n            opts.nextConfig\n          )\n          await writeValidatorFile(routeTypesManifest, validatorFilePath)\n        }\n\n        if (!resolved) {\n          resolve()\n          resolved = true\n        }\n      } catch (e) {\n        if (!resolved) {\n          reject(e)\n          resolved = true\n        } else {\n          Log.warn('Failed to reload dynamic routes:', e)\n        }\n      }\n    })\n\n    wp.watch({ directories: [dir], startTime: 0 })\n  })\n\n  const clientPagesManifestPath = `/_next/${CLIENT_STATIC_FILES_PATH}/development/${DEV_CLIENT_PAGES_MANIFEST}`\n  opts.fsChecker.devVirtualFsItems.add(clientPagesManifestPath)\n\n  const devMiddlewareManifestPath = `/_next/${CLIENT_STATIC_FILES_PATH}/development/${DEV_CLIENT_MIDDLEWARE_MANIFEST}`\n  opts.fsChecker.devVirtualFsItems.add(devMiddlewareManifestPath)\n\n  const devTurbopackMiddlewareManifestPath = `/_next/${CLIENT_STATIC_FILES_PATH}/development/${TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST}`\n  opts.fsChecker.devVirtualFsItems.add(devTurbopackMiddlewareManifestPath)\n\n  async function requestHandler(req: IncomingMessage, res: ServerResponse) {\n    const parsedUrl = url.parse(req.url || '/')\n\n    if (parsedUrl.pathname?.includes(clientPagesManifestPath)) {\n      res.statusCode = 200\n      res.setHeader('Content-Type', JSON_CONTENT_TYPE_HEADER)\n      res.end(\n        JSON.stringify({\n          pages: prevSortedRoutes.filter(\n            (route) => !opts.fsChecker.appFiles.has(route)\n          ),\n        })\n      )\n      return { finished: true }\n    }\n\n    if (\n      parsedUrl.pathname?.includes(devMiddlewareManifestPath) ||\n      parsedUrl.pathname?.includes(devTurbopackMiddlewareManifestPath)\n    ) {\n      res.statusCode = 200\n      res.setHeader('Content-Type', JSON_CONTENT_TYPE_HEADER)\n      res.end(JSON.stringify(serverFields.middleware?.matchers || []))\n      return { finished: true }\n    }\n    return { finished: false }\n  }\n\n  function logErrorWithOriginalStack(\n    err: unknown,\n    type?: 'unhandledRejection' | 'uncaughtException' | 'warning' | 'app-dir'\n  ) {\n    if (err instanceof Error) {\n      err.message = deobfuscateText(err.message)\n    }\n    if (err instanceof ModuleBuildError) {\n      // Errors that may come from issues from the user's code\n      Log.error(err.message)\n    } else if (err instanceof TurbopackInternalError) {\n      // An internal Turbopack error that has been handled by next-swc, written\n      // to disk and a simplified message shown to user on the Rust side.\n    } else if (type === 'warning') {\n      Log.warn(err)\n    } else if (type === 'app-dir') {\n      Log.error(err)\n    } else if (type) {\n      Log.error(`${type}:`, err)\n    } else {\n      Log.error(err)\n    }\n  }\n\n  return {\n    serverFields,\n    hotReloader,\n    requestHandler,\n    logErrorWithOriginalStack,\n\n    async ensureMiddleware(requestUrl?: string) {\n      if (!serverFields.actualMiddlewareFile) return\n      return hotReloader.ensurePage({\n        page: serverFields.actualMiddlewareFile,\n        clientOnly: false,\n        definition: undefined,\n        url: requestUrl,\n      })\n    },\n  }\n}\n\nexport async function setupDevBundler(opts: SetupOpts) {\n  const isSrcDir = path\n    .relative(opts.dir, opts.pagesDir || opts.appDir || '')\n    .startsWith('src')\n\n  const result = await startWatcher({\n    ...opts,\n    isSrcDir,\n  })\n\n  opts.telemetry.record(\n    eventCliSession(opts.nextConfig, {\n      webpackVersion: 5,\n      isSrcDir,\n      turboFlag: !!opts.turbo,\n      cliCommand: 'dev',\n      appDir: !!opts.appDir,\n      pagesDir: !!opts.pagesDir,\n      isCustomServer: !!opts.isCustomServer,\n      hasNowJson: !!(await findUp('now.json', { cwd: opts.dir })),\n    })\n  )\n\n  // Track build features for dev server here:\n  opts.telemetry.record({\n    eventName: EVENT_BUILD_FEATURE_USAGE,\n    payload: {\n      featureName: 'turbopackFileSystemCache',\n      invocationCount: isFileSystemCacheEnabledForDev(opts.nextConfig) ? 1 : 0,\n    },\n  })\n\n  return result\n}\n\nexport type DevBundler = Awaited<ReturnType<typeof setupDevBundler>>\n\n// Returns a trace rewritten through Turbopack's sourcemaps\n"],"names":["propagateServerField","setupDevBundler","verifyTypeScript","opts","verifyResult","verifyTypeScriptSetup","dir","distDir","nextConfig","intentDirs","pagesDir","appDir","filter","Boolean","typeCheckPreflight","tsconfigPath","typescript","disableStaticImages","images","hasAppDir","hasPagesDir","isolatedDevBuild","experimental","version","field","args","renderServer","instance","startWatcher","resetFetch","useFileSystemPublicRoutes","path","join","setGlobal","PHASE_DEVELOPMENT_SERVER","lockfile","lockDistDir","fs","mkdirSync","recursive","Lockfile","acquireWithRetriesOrExit","validFileMatcher","createValidFileMatcher","pageExtensions","serverFields","consoleStore","setState","logging","hotReloader","turbo","createHotReloaderTurbopack","require","HotReloaderWebpack","default","isSrcDir","config","buildId","encryptionKey","generateEncryptionKeyBase64","isBuild","telemetry","rewrites","fsChecker","previewProps","prerenderManifest","preview","onDevServerCleanup","start","distTypesDir","writeRouteTypesManifest","appRoutes","pageRoutes","layoutRoutes","appRouteHandlerRoutes","redirectRoutes","rewriteRoutes","appPagePaths","Set","pagesRouterPagePaths","layoutPaths","appRouteHandlers","pageApiRoutes","filePathToRoute","Map","routesManifestPath","ROUTES_MANIFEST","routesManifest","caseSensitive","caseSensitiveRoutes","basePath","redirects","headers","i18n","undefined","skipProxyUrlNormalize","promises","writeFile","JSON","stringify","prerenderManifestPath","PRERENDER_MANIFEST","nextScriptWorkers","verifyPartytownSetup","CLIENT_STATIC_FILES_PATH","ensureCallback","ensure","item","type","ensurePage","clientOnly","page","itemPath","isApp","definition","resolved","prevSortedRoutes","Promise","resolve","reject","readdir","_","files","length","pages","app","directories","rootDir","getPossibleMiddlewareFilenames","getPossibleInstrumentationHookFilenames","nestedMiddleware","envFiles","map","file","push","tsconfigPaths","wp","Watchpack","aggregateTimeout","ignored","pathname","some","startsWith","d","fileWatchTimes","enabledTypeScript","previousClientRouterFilters","previousConflictingPagePaths","routeTypesFilePath","validatorFilePath","on","writeEnvDefinitions","typescriptStatusFromLastAggregation","middlewareMatchers","routedPages","knownFiles","getTimeInfoEntries","appPaths","pageNameSet","conflictingAppPagePaths","appPageFilePaths","pagesPageFilePaths","slots","envChange","tsconfigChange","conflictingPageChange","hasRootAppNotFound","appFiles","pageFiles","staticMetadataFiles","clear","devPageFiles","sortedKnownFiles","keys","sort","sortByPageExts","proxyFilePath","middlewareFilePath","fileName","includes","name","fileBaseName","fileDir","parse","isAtConventionLevel","MIDDLEWARE_FILENAME","PROXY_FILENAME","cwd","process","Error","relative","Log","warnOnce","meta","get","watchTime","watchTimeChange","timestamp","set","endsWith","accuracy","isPageFile","isAppPath","normalizePathSep","isPagePath","rootFile","absolutePathToPage","extensions","keepIndex","pagesType","PAGE_TYPES","ROOT","isMiddlewareFile","staticInfo","getStaticInfoIncludingLayouts","pageFilePath","isDev","isInsideAppDir","output","error","actualMiddlewareFile","middleware","matchers","regexp","originalSource","isInstrumentationHookFile","actualInstrumentationHookFile","add","pageName","APP","PAGES","isMetadataRouteFile","replace","getPageStaticInfo","pageType","normalizeMetadataPageToRoute","generateSitemaps","generateImageMetadata","isRootNotFound","segments","split","i","segment","isParallelRouteSegment","parentPath","normalizeAppPath","slice","slotName","s","parent","isAppLayoutPage","route","ensureLeadingSlash","filePath","isAppRouterPage","originalPageName","isStaticMetadataFile","isAppRouterRoute","nextDataRoutes","has","test","numConflicting","size","errorMessage","p","appPath","pagesPath","setHmrServerError","clearHmrServerError","clientRouterFilters","clientRouterFilter","createClientRouterFilter","Object","clientRouterFilterRedirects","_originalRedirects","r","internal","clientRouterFilterAllowedRate","dev","forceReload","turbopackProject","hasRewrites","afterFiles","beforeFiles","fallback","rootPath","turbopack","root","outputFileTracingRoot","update","defineEnv","createDefineEnv","isTurbopack","fetchCacheKeyPrefix","projectPath","normalizePath","tsconfigResult","loadJsConfig","activeWebpackConfigs","forEach","idx","isClient","isNodeServer","isEdgeServer","plugins","plugin","JsConfigPathsPlugin","jsConfig","resolvedBaseUrl","currentResolvedBaseUrl","resolvedUrlIndex","modules","findIndex","baseUrl","splice","isImplicit","compilerOptions","paths","key","assign","definitions","__NEXT_DEFINE_ENV","newDefine","getDefineEnv","invalidate","reloadAfterInvalidation","NestedMiddlewareError","message","appPathRoutes","fromEntries","entries","k","v","match","hasAppNotFound","middlewareMatcher","getMiddlewareRouteMatcher","interceptionRoutes","generateInterceptionRoutesRewrites","buildCustomRoute","exportPathMap","outDir","exportPathMapEntries","exportPathMapRoutes","value","source","destination","query","qs","sortedRoutes","getSortedRoutes","dynamicRoutes","regex","getNamedRouteRegex","prefixRouteKeys","re","toString","namedRegex","routeKeys","getRouteMatcher","dataRoutes","buildDataRoute","routeRegex","RegExp","dataRouteRegex","groups","unshift","every","val","addedRoutes","removedRoutes","send","HMR_MESSAGE_SENT_TO_BROWSER","DEV_PAGES_MANIFEST_UPDATE","data","devPagesManifest","ADDED_PAGE","REMOVED_PAGE","then","catch","typedEnv","loadEnvConfig","loadedEnvFiles","env","NODE_ENV","createEnvDefinitions","configFileName","contents","routeTypesManifest","createRouteTypesManifest","writeValidatorFile","e","warn","watch","startTime","clientPagesManifestPath","DEV_CLIENT_PAGES_MANIFEST","devVirtualFsItems","devMiddlewareManifestPath","DEV_CLIENT_MIDDLEWARE_MANIFEST","devTurbopackMiddlewareManifestPath","TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST","requestHandler","req","res","parsedUrl","url","statusCode","setHeader","JSON_CONTENT_TYPE_HEADER","end","finished","logErrorWithOriginalStack","err","deobfuscateText","ModuleBuildError","TurbopackInternalError","ensureMiddleware","requestUrl","result","record","eventCliSession","webpackVersion","turboFlag","cliCommand","isCustomServer","hasNowJson","findUp","eventName","EVENT_BUILD_FEATURE_USAGE","payload","featureName","invocationCount","isFileSystemCacheEnabledForDev"],"mappings":";;;;;;;;;;;;;;;IA8JsBA,oBAAoB;eAApBA;;IAmlCAC,eAAe;eAAfA;;;qBAxuCU;2DACjB;4DACC;6DACC;oEACF;kEACO;+DACH;4BACc;6DACZ;wBACK;8BAGa;wBAIhC;uBACyB;gCACD;uCACO;sCACD;4BACF;0BACF;gCACF;8BACC;kCACC;0CACQ;oCACN;oDACgB;2BAU5C;wCAEmC;wBAQnC;yBACsB;kCAEe;2BACjB;uCACiB;iCAIrC;kCACsC;qCACT;uBACE;wBAI/B;2BACsB;+BACU;+BACT;4BAKvB;iCAKA;yBACgC;oCACJ;0BACV;iCACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDhC,eAAeC,iBAAiBC,IAAe;IAC7C,MAAMC,eAAe,MAAMC,IAAAA,4CAAqB,EAAC;QAC/CC,KAAKH,KAAKG,GAAG;QACbC,SAASJ,KAAKK,UAAU,CAACD,OAAO;QAChCE,YAAY;YAACN,KAAKO,QAAQ;YAAEP,KAAKQ,MAAM;SAAC,CAACC,MAAM,CAACC;QAChDC,oBAAoB;QACpBC,cAAcZ,KAAKK,UAAU,CAACQ,UAAU,CAACD,YAAY;QACrDE,qBAAqBd,KAAKK,UAAU,CAACU,MAAM,CAACD,mBAAmB;QAC/DE,WAAW,CAAC,CAAChB,KAAKQ,MAAM;QACxBS,aAAa,CAAC,CAACjB,KAAKO,QAAQ;QAC5BW,kBAAkBlB,KAAKK,UAAU,CAACc,YAAY,CAACD,gBAAgB;IACjE;IAEA,IAAIjB,aAAamB,OAAO,EAAE;QACxB,OAAO;IACT;IACA,OAAO;AACT;AAEO,eAAevB,qBACpBG,IAAe,EACfqB,KAA8B,EAC9BC,IAAS;QAEHtB,6BAAAA;IAAN,QAAMA,qBAAAA,KAAKuB,YAAY,sBAAjBvB,8BAAAA,mBAAmBwB,QAAQ,qBAA3BxB,4BAA6BH,oBAAoB,CAACG,KAAKG,GAAG,EAAEkB,OAAOC;AAC3E;AAEA,eAAeG,aACbzB,IAEC;IAED,MAAM,EAAEK,UAAU,EAAEG,MAAM,EAAED,QAAQ,EAAEJ,GAAG,EAAEuB,UAAU,EAAE,GAAG1B;IAC1D,MAAM,EAAE2B,yBAAyB,EAAE,GAAGtB;IAEtC,MAAMD,UAAUwB,aAAI,CAACC,IAAI,CAAC7B,KAAKG,GAAG,EAAEH,KAAKK,UAAU,CAACD,OAAO;IAE3D0B,IAAAA,iBAAS,EAAC,WAAW1B;IACrB0B,IAAAA,iBAAS,EAAC,SAASC,mCAAwB;IAE3C,IAAIC;IACJ,IAAIhC,KAAKK,UAAU,CAACc,YAAY,CAACc,WAAW,EAAE;QAC5CC,WAAE,CAACC,SAAS,CAAC/B,SAAS;YAAEgC,WAAW;QAAK;QACxCJ,WAAW,MAAMK,kBAAQ,CAACC,wBAAwB,CAChDV,aAAI,CAACC,IAAI,CAACzB,SAAS,SACnB;IAEJ;IAEA,MAAMmC,mBAAmBC,IAAAA,oCAAsB,EAC7CnC,WAAWoC,cAAc,EACzBjC;IAGF,MAAMkC,eAA6B,CAAC;IAEpC,sEAAsE;IACtEC,YAAY,CAACC,QAAQ,CAAC;QACpBC,SAASxC,WAAWwC,OAAO,KAAK;IAClC;IAEA,MAAMC,cAA0C9C,KAAK+C,KAAK,GACtD,MAAM,AAAC,CAAA;QACL,MAAMC,6BAA6B,AACjCC,QAAQ,oCACRD,0BAA0B;QAC5B,OAAO,MAAMA,2BACXhD,MACA0C,cACAtC,SACAsB,YACAM;IAEJ,CAAA,MACA,MAAM,AAAC,CAAA;QACL,MAAMkB,qBAAqB,AACzBD,QAAQ,kCACRE,OAAO;QACT,OAAO,IAAID,mBAAmBlD,KAAKG,GAAG,EAAE;YACtCiD,UAAUpD,KAAKoD,QAAQ;YACvB5C;YACAD;YACAH;YACAiD,QAAQrD,KAAKK,UAAU;YACvBiD,SAAS;YACTC,eAAe,MAAMC,IAAAA,kDAA2B,EAAC;gBAC/CC,SAAS;gBACTrD;YACF;YACAsD,WAAW1D,KAAK0D,SAAS;YACzBC,UAAU3D,KAAK4D,SAAS,CAACD,QAAQ;YACjCE,cAAc7D,KAAK4D,SAAS,CAACE,iBAAiB,CAACC,OAAO;YACtDrC;YACAM;YACAgC,oBAAoBhE,KAAKgE,kBAAkB;QAC7C;IACF,CAAA;IAEJ,MAAMlB,YAAYmB,KAAK;IAEvB,4DAA4D;IAC5D,sBAAsB;IACtB,MAAMC,eAAetC,aAAI,CAACC,IAAI,CAACzB,SAAS;IACxC,MAAM+D,IAAAA,wCAAuB,EAC3B;QACEC,WAAW,CAAC;QACZC,YAAY,CAAC;QACbC,cAAc,CAAC;QACfC,uBAAuB,CAAC;QACxBC,gBAAgB,CAAC;QACjBC,eAAe,CAAC;QAChBC,cAAc,IAAIC;QAClBC,sBAAsB,IAAID;QAC1BE,aAAa,IAAIF;QACjBG,kBAAkB,IAAIH;QACtBI,eAAe,IAAIJ;QACnBK,iBAAiB,IAAIC;IACvB,GACArD,aAAI,CAACC,IAAI,CAACqC,cAAc,gBACxBlE,KAAKK,UAAU;IAGjB,MAAM6E,qBAAqBtD,aAAI,CAACC,IAAI,CAACzB,SAAS+E,0BAAe;IAC7D,MAAMC,iBAAoC;QACxChE,SAAS;QACTiE,eAAe,CAAC,CAAChF,WAAWc,YAAY,CAACmE,mBAAmB;QAC5DC,UAAUlF,WAAWkF,QAAQ;QAC7B5B,UAAU3D,KAAK4D,SAAS,CAACD,QAAQ;QACjC6B,WAAWxF,KAAK4D,SAAS,CAAC4B,SAAS;QACnCC,SAASzF,KAAK4D,SAAS,CAAC6B,OAAO;QAC/BC,MAAMrF,WAAWqF,IAAI,IAAIC;QACzBC,uBAAuBvF,WAAWuF,qBAAqB;IACzD;IACA,MAAM1D,WAAE,CAAC2D,QAAQ,CAACC,SAAS,CACzBZ,oBACAa,KAAKC,SAAS,CAACZ;IAGjB,MAAMa,wBAAwBrE,aAAI,CAACC,IAAI,CAACzB,SAAS8F,6BAAkB;IACnE,MAAMhE,WAAE,CAAC2D,QAAQ,CAACC,SAAS,CACzBG,uBACAF,KAAKC,SAAS,CAAChG,KAAK4D,SAAS,CAACE,iBAAiB,EAAE,MAAM;IAGzD,IAAI9D,KAAKK,UAAU,CAACc,YAAY,CAACgF,iBAAiB,EAAE;QAClD,MAAMC,IAAAA,0CAAoB,EACxBpG,KAAKG,GAAG,EACRyB,aAAI,CAACC,IAAI,CAACzB,SAASiG,mCAAwB;IAE/C;IAEArG,KAAK4D,SAAS,CAAC0C,cAAc,CAAC,eAAeC,OAAOC,IAAI;QACtD,IAAIA,KAAKC,IAAI,KAAK,aAAaD,KAAKC,IAAI,KAAK,YAAY;YACvD,MAAM3D,YAAY4D,UAAU,CAAC;gBAC3BC,YAAY;gBACZC,MAAMJ,KAAKK,QAAQ;gBACnBC,OAAON,KAAKC,IAAI,KAAK;gBACrBM,YAAYpB;YACd;QACF;IACF;IAEA,IAAIqB,WAAW;IACf,IAAIC,mBAA6B,EAAE;IAEnC,MAAM,IAAIC,QAAc,OAAOC,SAASC;QACtC,IAAI7G,UAAU;YACZ,yDAAyD;YACzD2B,WAAE,CAACmF,OAAO,CAAC9G,UAAU,CAAC+G,GAAGC;gBACvB,IAAIA,yBAAAA,MAAOC,MAAM,EAAE;oBACjB;gBACF;gBAEA,IAAI,CAACR,UAAU;oBACbG;oBACAH,WAAW;gBACb;YACF;QACF;QAEA,MAAMS,QAAQlH,WAAW;YAACA;SAAS,GAAG,EAAE;QACxC,MAAMmH,MAAMlH,SAAS;YAACA;SAAO,GAAG,EAAE;QAClC,MAAMmH,cAAc;eAAIF;eAAUC;SAAI;QAEtC,MAAME,UAAUrH,YAAYC;QAC5B,MAAM+G,QAAQ;eACTM,IAAAA,sCAA8B,EAC/BjG,aAAI,CAACC,IAAI,CAAC+F,SAAU,OACpBvH,WAAWoC,cAAc;eAExBqF,IAAAA,+CAAuC,EACxClG,aAAI,CAACC,IAAI,CAAC+F,SAAU,OACpBvH,WAAWoC,cAAc;SAE5B;QACD,IAAIsF,mBAA6B,EAAE;QAEnC,MAAMC,WAAW;YACf;YACA;YACA;YACA;SACD,CAACC,GAAG,CAAC,CAACC,OAAStG,aAAI,CAACC,IAAI,CAAC1B,KAAK+H;QAE/BX,MAAMY,IAAI,IAAIH;QAEd,wCAAwC;QACxC,MAAMI,gBAAgB;YACpBxG,aAAI,CAACC,IAAI,CAAC1B,KAAK;YACfyB,aAAI,CAACC,IAAI,CAAC1B,KAAK;SAChB;QACDoH,MAAMY,IAAI,IAAIC;QAEd,MAAMC,KAAK,IAAIC,kBAAS,CAAC;YACvB,sEAAsE;YACtEC,kBAAkB;YAClBC,SAAS,CAACC;gBACR,OACE,CAAClB,MAAMmB,IAAI,CAAC,CAACR,OAASA,KAAKS,UAAU,CAACF,cACtC,CAACd,YAAYe,IAAI,CACf,CAACE,IAAMH,SAASE,UAAU,CAACC,MAAMA,EAAED,UAAU,CAACF;YAGpD;QACF;QACA,MAAMI,iBAAiB,IAAI5D;QAC3B,IAAI6D,oBAAoB,MAAM/I,iBAAiBC;QAC/C,IAAI+I;QACJ,IAAIC,+BAA4C,IAAIrE;QAEpD,MAAMsE,qBAAqBrH,aAAI,CAACC,IAAI,CAACzB,SAAS,SAAS;QACvD,MAAM8I,oBAAoBtH,aAAI,CAACC,IAAI,CAACzB,SAAS,SAAS;QAEtDiI,GAAGc,EAAE,CAAC,cAAc;gBA0kBiBzG,0BACLA;YA1kB9B,IAAI0G,sBAAsB;YAC1B,IAAIC,sCAAsCP;YAC1C,IAAIQ;YACJ,MAAMC,cAAwB,EAAE;YAChC,MAAMC,aAAanB,GAAGoB,kBAAkB;YACxC,MAAMC,WAAqC,CAAC;YAC5C,MAAMC,cAAc,IAAIhF;YACxB,MAAMiF,0BAA0B,IAAIjF;YACpC,MAAMkF,mBAAmB,IAAI5E;YAC7B,MAAM6E,qBAAqB,IAAI7E;YAC/B,MAAMH,mBAA+D,EAAE;YACvE,MAAMC,gBAA4D,EAAE;YAEpE,MAAMV,aAAyD,EAAE;YACjE,MAAMD,YAAwD,EAAE;YAChE,MAAME,eAA2D,EAAE;YACnE,MAAMyF,QAAiD,EAAE;YAEzD,IAAIC,YAAY;YAChB,IAAIC,iBAAiB;YACrB,IAAIC,wBAAwB;YAC5B,IAAIC,qBAAqB;YAEzB,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,mBAAmB,EAAE,GAAGtK,KAAK4D,SAAS;YAEnEwG,SAASG,KAAK;YACdF,UAAUE,KAAK;YACfD,oBAAoBC,KAAK;YACzBC,qBAAY,CAACD,KAAK;YAElB,MAAME,mBAA6B;mBAAIjB,WAAWkB,IAAI;aAAG,CAACC,IAAI,CAC5DC,IAAAA,8BAAc,EAACvK,WAAWoC,cAAc;YAG1C,IAAIoI;YACJ,IAAIC;YAEJ,KAAK,MAAMC,YAAYN,iBAAkB;gBACvC,IACE,CAAClD,MAAMyD,QAAQ,CAACD,aAChB,CAACpD,YAAYe,IAAI,CAAC,CAACE,IAAMmC,SAASpC,UAAU,CAACC,KAC7C;oBACA;gBACF;gBAEA,MAAM,EAAEqC,MAAMC,YAAY,EAAE/K,KAAKgL,OAAO,EAAE,GAAGvJ,aAAI,CAACwJ,KAAK,CAACL;gBAExD,MAAMM,sBACJF,YAAYhL,OAAOgL,YAAYvJ,aAAI,CAACC,IAAI,CAAC1B,KAAK;gBAEhD,IAAIkL,uBAAuBH,iBAAiBI,+BAAmB,EAAE;oBAC/DR,qBAAqBC;gBACvB;gBACA,IAAIM,uBAAuBH,iBAAiBK,0BAAc,EAAE;oBAC1DV,gBAAgBE;gBAClB;gBAEA,IAAID,oBAAoB;oBACtB,IAAID,eAAe;wBACjB,MAAMW,MAAMC,QAAQD,GAAG;wBAEvB,MAAM,qBAEL,CAFK,IAAIE,MACR,CAAC,KAAK,EAAEJ,+BAAmB,CAAC,SAAS,EAAE1J,aAAI,CAAC+J,QAAQ,CAACH,KAAKV,oBAAoB,MAAM,EAAES,0BAAc,CAAC,SAAS,EAAE3J,aAAI,CAAC+J,QAAQ,CAACH,KAAKX,eAAe,8BAA8B,EAAEjJ,aAAI,CAAC+J,QAAQ,CAACH,KAAKX,eAAe,wEAAwE,CAAC,GADzR,qBAAA;mCAAA;wCAAA;0CAAA;wBAEN;oBACF;oBACAe,KAAIC,QAAQ,CACV,CAAC,KAAK,EAAEP,+BAAmB,CAAC,6CAA6C,EAAEC,0BAAc,CAAC,2EAA2E,CAAC;gBAE1K;gBAEA,MAAMO,OAAOtC,WAAWuC,GAAG,CAAChB;gBAE5B,MAAMiB,YAAYnD,eAAekD,GAAG,CAAChB;gBACrC,gGAAgG;gBAChG,MAAMkB,kBACJD,cAAcrG,aACbqG,aAAaA,eAAcF,wBAAAA,KAAMI,SAAS;gBAC7CrD,eAAesD,GAAG,CAACpB,UAAUe,wBAAAA,KAAMI,SAAS;gBAE5C,IAAIlE,SAASgD,QAAQ,CAACD,WAAW;oBAC/B,IAAIkB,iBAAiB;wBACnBjC,YAAY;oBACd;oBACA;gBACF;gBAEA,IAAI5B,cAAc4C,QAAQ,CAACD,WAAW;oBACpC,IAAIA,SAASqB,QAAQ,CAAC,kBAAkB;wBACtCtD,oBAAoB;oBACtB;oBACA,IAAImD,iBAAiB;wBACnBhC,iBAAiB;oBACnB;oBACA;gBACF;gBAEA,IACE6B,CAAAA,wBAAAA,KAAMO,QAAQ,MAAK1G,aACnB,CAACpD,iBAAiB+J,UAAU,CAACvB,WAC7B;oBACA;gBACF;gBAEA,MAAMwB,YAAY7L,QAChBF,UACEgM,IAAAA,kCAAgB,EAACzB,UAAUpC,UAAU,CACnC6D,IAAAA,kCAAgB,EAAChM,UAAU;gBAGjC,MAAMiM,aAAa/L,QACjBH,YACEiM,IAAAA,kCAAgB,EAACzB,UAAUpC,UAAU,CACnC6D,IAAAA,kCAAgB,EAACjM,YAAY;gBAInC,MAAMmM,WAAWC,IAAAA,sCAAkB,EAAC5B,UAAU;oBAC5C5K,KAAKA;oBACLyM,YAAYvM,WAAWoC,cAAc;oBACrCoK,WAAW;oBACXC,WAAWC,qBAAU,CAACC,IAAI;gBAC5B;gBAEA,IAAIC,IAAAA,wBAAgB,EAACP,WAAW;wBA0BTQ;oBAzBrB,MAAMC,gCAAgC,AACpClK,QAAQ,oDACRkK,6BAA6B;oBAC/B,MAAMD,aAAa,MAAMC,8BAA8B;wBACrDC,cAAcrC;wBACd1H,QAAQhD;wBACRG,QAAQA;wBACRoG,MAAM8F;wBACNW,OAAO;wBACPC,gBAAgBf;wBAChB9J,gBAAgBpC,WAAWoC,cAAc;oBAC3C;oBACA,IAAIpC,WAAWkN,MAAM,KAAK,UAAU;wBAClC3B,KAAI4B,KAAK,CACP;wBAEF;oBACF;oBACA9K,aAAa+K,oBAAoB,GAAGf;oBAEpC,MAAM7M,qBACJG,MACA,wBACA0C,aAAa+K,oBAAoB;oBAEnCnE,qBAAqB4D,EAAAA,yBAAAA,WAAWQ,UAAU,qBAArBR,uBAAuBS,QAAQ,KAAI;wBACtD;4BAAEC,QAAQ;4BAASC,gBAAgB;wBAAU;qBAC9C;oBACD;gBACF;gBACA,IAAIC,IAAAA,iCAAyB,EAACpB,WAAW;oBACvChK,aAAaqL,6BAA6B,GAAGrB;oBAC7C,MAAM7M,qBACJG,MACA,iCACA0C,aAAaqL,6BAA6B;oBAE5C;gBACF;gBAEA,IAAIhD,SAASqB,QAAQ,CAAC,UAAUrB,SAASqB,QAAQ,CAAC,SAAS;oBACzDtD,oBAAoB;gBACtB;gBAEA,IAAI,CAAEyD,CAAAA,aAAaE,UAAS,GAAI;oBAC9B;gBACF;gBAEA,yDAAyD;gBACzDjC,qBAAY,CAACwD,GAAG,CAACjD;gBAEjB,IAAIkD,WAAWtB,IAAAA,sCAAkB,EAAC5B,UAAU;oBAC1C5K,KAAKoM,YAAY/L,SAAUD;oBAC3BqM,YAAYvM,WAAWoC,cAAc;oBACrCoK,WAAWN;oBACXO,WAAWP,YAAYQ,qBAAU,CAACmB,GAAG,GAAGnB,qBAAU,CAACoB,KAAK;gBAC1D;gBAEA,IACE5B,aACA/L,UACA4N,IAAAA,oCAAmB,EACjBrD,SAASsD,OAAO,CAAC7N,QAAQ,KACzBH,WAAWoC,cAAc,EACzB,OAEF;oBACA,MAAM6L,oBAAoB,AACxBrL,QAAQ,gDACRqL,iBAAiB;oBACnB,MAAMpB,aAAa,MAAMoB,kBAAkB;wBACzClB,cAAcrC;wBACd1K,YAAY,CAAC;wBACbuG,MAAMqH;wBACNZ,OAAO;wBACPkB,UAAUxB,qBAAU,CAACmB,GAAG;oBAC1B;oBAEAD,WAAWO,IAAAA,8CAA4B,EACrCP,UACA,CAAC,CAAEf,CAAAA,WAAWuB,gBAAgB,IAAIvB,WAAWwB,qBAAqB,AAAD;gBAErE;gBAEA,IACE,CAACnC,aACD0B,SAAStF,UAAU,CAAC,YACpBtI,WAAWkN,MAAM,KAAK,UACtB;oBACA3B,KAAI4B,KAAK,CACP;oBAEF;gBACF;gBAEA,IAAIjB,WAAW;oBACb,MAAMoC,iBAAiBpM,iBAAiBoM,cAAc,CAAC5D;oBACvDZ,qBAAqB;oBAErB,IAAIwE,gBAAgB;wBAClB;oBACF;oBAEA,kEAAkE;oBAClE,IAAInC,IAAAA,kCAAgB,EAACyB,UAAUjD,QAAQ,CAAC,OAAO;wBAC7C;oBACF;oBAEA,gDAAgD;oBAChD,mDAAmD;oBACnD,8DAA8D;oBAC9D,MAAM4D,WAAWpC,IAAAA,kCAAgB,EAACyB,UAAUY,KAAK,CAAC;oBAClD,IAAK,IAAIC,IAAIF,SAASpH,MAAM,GAAG,GAAGsH,KAAK,GAAGA,IAAK;wBAC7C,MAAMC,UAAUH,QAAQ,CAACE,EAAE;wBAC3B,IAAIE,IAAAA,+BAAsB,EAACD,UAAU;4BACnC,MAAME,aAAaC,IAAAA,0BAAgB,EACjCN,SAASO,KAAK,CAAC,GAAGL,GAAGjN,IAAI,CAAC;4BAG5B,MAAMuN,WAAWL,QAAQI,KAAK,CAAC;4BAC/B,mCAAmC;4BACnC,IACEpF,MAAMrB,IAAI,CACR,CAAC2G,IAAMA,EAAEpE,IAAI,KAAKmE,YAAYC,EAAEC,MAAM,KAAKL,aAG7C;4BAEFlF,MAAM5B,IAAI,CAAC;gCACT8C,MAAMmE;gCACNE,QAAQL;4BACV;4BACA;wBACF;oBACF;oBAEA,iBAAiB;oBACjB,IAAI1M,iBAAiBgN,eAAe,CAACxE,WAAW;wBAC9CzG,aAAa6D,IAAI,CAAC;4BAChBqH,OAAOC,IAAAA,sCAAkB,EACvBP,IAAAA,0BAAgB,EAAC1C,IAAAA,kCAAgB,EAACyB,WAAWI,OAAO,CAClD,aACA;4BAGJqB,UAAU3E;wBACZ;oBACF;oBAEA,IAAI,CAACxI,iBAAiBoN,eAAe,CAAC5E,WAAW;wBAC/C;oBACF;oBAEA,MAAM6E,mBAAmB3B;oBACzBA,WAAWiB,IAAAA,0BAAgB,EAACjB,UAAUI,OAAO,CAAC,QAAQ;oBACtD,IAAI,CAAC3E,QAAQ,CAACuE,SAAS,EAAE;wBACvBvE,QAAQ,CAACuE,SAAS,GAAG,EAAE;oBACzB;oBACAvE,QAAQ,CAACuE,SAAS,CAAC9F,IAAI,CACrBnI,KAAK+C,KAAK,GAEN6M,iBAAiBvB,OAAO,CAAC,QAAQ,OACjCuB;oBAGN,IAAIjO,2BAA2B;wBAC7B,wDAAwD;wBACxD,IAAInB,UAAUqP,IAAAA,qCAAoB,EAAC9E,SAASsD,OAAO,CAAC7N,QAAQ,MAAM;4BAChE8J,oBAAoB6B,GAAG,CAAC8B,UAAUlD;wBACpC,OAAO;4BACLX,SAAS4D,GAAG,CAACC;wBACf;oBACF;oBAEA,IAAI1L,iBAAiBuN,gBAAgB,CAAC/E,WAAW;wBAC/CjG,iBAAiBqD,IAAI,CAAC;4BACpBqH,OAAOhD,IAAAA,kCAAgB,EAACyB;4BACxByB,UAAU3E;wBACZ;oBACF,OAAO;wBACL3G,UAAU+D,IAAI,CAAC;4BACbqH,OAAOhD,IAAAA,kCAAgB,EAACyB;4BACxByB,UAAU3E;wBACZ;oBACF;oBAEA,IAAIxB,YAAYyB,QAAQ,CAACiD,WAAW;wBAClC;oBACF;gBACF,OAAO;oBACL,IAAItM,2BAA2B;wBAC7B0I,UAAU2D,GAAG,CAACC;wBACd,8DAA8D;wBAC9D,8DAA8D;wBAC9DjO,KAAK4D,SAAS,CAACmM,cAAc,CAAC/B,GAAG,CAACC;oBACpC;oBAEA,IAAIA,SAAStF,UAAU,CAAC,UAAU;wBAChC5D,cAAcoD,IAAI,CAAC;4BACjBqH,OAAOhD,IAAAA,kCAAgB,EAACyB;4BACxByB,UAAU3E;wBACZ;oBACF,OAAO;wBACL1G,WAAW8D,IAAI,CAAC;4BACdqH,OAAOhD,IAAAA,kCAAgB,EAACyB;4BACxByB,UAAU3E;wBACZ;oBACF;gBACF;gBAEA,eAAe;gBACf,IAAIwB,WAAW;oBACb1C,iBAAiBsC,GAAG,CAAC8B,UAAUlD;gBACjC,OAAO;oBACLjB,mBAAmBqC,GAAG,CAAC8B,UAAUlD;gBACnC;gBAEA,IAAIvK,UAAUmJ,YAAYqG,GAAG,CAAC/B,WAAW;oBACvCrE,wBAAwBoE,GAAG,CAACC;gBAC9B,OAAO;oBACLtE,YAAYqE,GAAG,CAACC;gBAClB;gBAEA;;;SAGC,GACD,IAAI,sBAAsBgC,IAAI,CAAChC,WAAW;oBACxClG,iBAAiBI,IAAI,CAAC8F;oBACtB;gBACF;gBAEA1E,YAAYpB,IAAI,CAAC8F;YACnB;YAEA,MAAMiC,iBAAiBtG,wBAAwBuG,IAAI;YACnDjG,wBAAwBgG,iBAAiBlH,6BAA6BmH,IAAI;YAE1E,IAAIjG,0BAA0B,GAAG;gBAC/B,IAAIgG,iBAAiB,GAAG;oBACtB,IAAIE,eAAe,CAAC,6BAA6B,EAC/CF,mBAAmB,IAAI,SAAS,SACjC,0DAA0D,CAAC;oBAE5D,KAAK,MAAMG,KAAKzG,wBAAyB;wBACvC,MAAM0G,UAAU1O,aAAI,CAAC+J,QAAQ,CAACxL,KAAK0J,iBAAiBkC,GAAG,CAACsE;wBACxD,MAAME,YAAY3O,aAAI,CAAC+J,QAAQ,CAACxL,KAAK2J,mBAAmBiC,GAAG,CAACsE;wBAC5DD,gBAAgB,CAAC,GAAG,EAAEG,UAAU,KAAK,EAAED,QAAQ,GAAG,CAAC;oBACrD;oBACAxN,YAAY0N,iBAAiB,CAAC,qBAAuB,CAAvB,IAAI9E,MAAM0E,eAAV,qBAAA;+BAAA;oCAAA;sCAAA;oBAAsB;gBACtD,OAAO,IAAIF,mBAAmB,GAAG;oBAC/BpN,YAAY2N,mBAAmB;oBAC/B,MAAM5Q,qBAAqBG,MAAM,kBAAkB2F;gBACrD;YACF;YAEAqD,+BAA+BY;YAE/B,IAAI8G;YACJ,IAAIrQ,WAAWc,YAAY,CAACwP,kBAAkB,EAAE;gBAC9CD,sBAAsBE,IAAAA,kDAAwB,EAC5CC,OAAOnG,IAAI,CAAChB,WACZrJ,WAAWc,YAAY,CAAC2P,2BAA2B,GAC/C,AAAC,CAAA,AAACzQ,WAAmB0Q,kBAAkB,IAAI,EAAE,AAAD,EAAGtQ,MAAM,CACnD,CAACuQ,IAAW,CAACA,EAAEC,QAAQ,IAEzB,EAAE,EACN5Q,WAAWc,YAAY,CAAC+P,6BAA6B;gBAGvD,IACE,CAACnI,+BACDhD,KAAKC,SAAS,CAAC+C,iCACbhD,KAAKC,SAAS,CAAC0K,sBACjB;oBACA1G,YAAY;oBACZjB,8BAA8B2H;gBAChC;YACF;YAEA,IAAI1G,aAAaC,gBAAgB;gBAC/B,IAAID,WAAW;oBACbZ,sBAAsB;oBAEtB,MAAMvJ,qBAAqBG,MAAM,iBAAiB;wBAChD;4BAAEmR,KAAK;4BAAMC,aAAa;wBAAK;qBAChC;gBACH;gBAEA,IAAItO,YAAYuO,gBAAgB,EAAE;wBAO9BrR;oBANF,MAAMsR,cACJtR,KAAK4D,SAAS,CAACD,QAAQ,CAAC4N,UAAU,CAAC/J,MAAM,GAAG,KAC5CxH,KAAK4D,SAAS,CAACD,QAAQ,CAAC6N,WAAW,CAAChK,MAAM,GAAG,KAC7CxH,KAAK4D,SAAS,CAACD,QAAQ,CAAC8N,QAAQ,CAACjK,MAAM,GAAG;oBAE5C,MAAMkK,WACJ1R,EAAAA,6BAAAA,KAAKK,UAAU,CAACsR,SAAS,qBAAzB3R,2BAA2B4R,IAAI,KAC/B5R,KAAKK,UAAU,CAACwR,qBAAqB,IACrC7R,KAAKG,GAAG;oBACV,MAAM2C,YAAYuO,gBAAgB,CAACS,MAAM,CAAC;wBACxCC,WAAWC,IAAAA,oBAAe,EAAC;4BACzBC,aAAa;4BACbvB;4BACArN,QAAQhD;4BACR8Q,KAAK;4BACL/Q;4BACA8R,qBACElS,KAAKK,UAAU,CAACc,YAAY,CAAC+Q,mBAAmB;4BAClDZ;4BACA,kBAAkB;4BAClBhI,oBAAoB3D;4BACpBwM,aAAanS,KAAKG,GAAG;4BACrBwD,UAAU3D,KAAK4D,SAAS,CAACD,QAAQ;wBACnC;wBACA+N;wBACAS,aAAaC,IAAAA,4BAAa,EAACxQ,aAAI,CAAC+J,QAAQ,CAAC+F,UAAUvR;oBACrD;gBACF,OAAO;wBAoBL2C;oBAnBA,IAAIuP;oBAOJ,sFAAsF;oBACtF,IAAIpI,gBAAgB;wBAClB,IAAI;4BACF,MAAMqI,eAAe,AACnBrP,QAAQ,gCACRE,OAAO;4BACTkP,iBAAiB,MAAMC,aAAanS,KAAKE;wBAC3C,EAAE,OAAOiH,GAAG;wBACV,2EAA2E,GAC7E;oBACF;qBAEAxE,oCAAAA,YAAYyP,oBAAoB,qBAAhCzP,kCAAkC0P,OAAO,CAAC,CAACnP,QAAQoP;wBACjD,MAAMC,WAAWD,QAAQ;wBACzB,MAAME,eAAeF,QAAQ;wBAC7B,MAAMG,eAAeH,QAAQ;wBAC7B,MAAMnB,cACJtR,KAAK4D,SAAS,CAACD,QAAQ,CAAC4N,UAAU,CAAC/J,MAAM,GAAG,KAC5CxH,KAAK4D,SAAS,CAACD,QAAQ,CAAC6N,WAAW,CAAChK,MAAM,GAAG,KAC7CxH,KAAK4D,SAAS,CAACD,QAAQ,CAAC8N,QAAQ,CAACjK,MAAM,GAAG;wBAE5C,IAAIyC,gBAAgB;gCAClB5G,yBAAAA;6BAAAA,kBAAAA,OAAO8D,OAAO,sBAAd9D,0BAAAA,gBAAgBwP,OAAO,qBAAvBxP,wBAAyBmP,OAAO,CAAC,CAACM;gCAChC,mDAAmD;gCACnD,kCAAkC;gCAClC,IAAIA,kBAAkBC,wCAAmB,IAAIV,gBAAgB;wCAGlChP,yBAAAA,iBAsBrB2P;oCAxBJ,MAAM,EAAEC,eAAe,EAAED,QAAQ,EAAE,GAAGX;oCACtC,MAAMa,yBAAyBJ,OAAOG,eAAe;oCACrD,MAAME,oBAAmB9P,kBAAAA,OAAO8D,OAAO,sBAAd9D,0BAAAA,gBAAgB+P,OAAO,qBAAvB/P,wBAAyBgQ,SAAS,CACzD,CAAC7M,OAASA,UAAS0M,0CAAAA,uBAAwBI,OAAO;oCAGpD,IAAIL,iBAAiB;wCACnB,IACEA,gBAAgBK,OAAO,MACvBJ,0CAAAA,uBAAwBI,OAAO,GAC/B;4CACA,qCAAqC;4CACrC,IAAIH,oBAAoBA,mBAAmB,CAAC,GAAG;oDAC7C9P,0BAAAA;iDAAAA,mBAAAA,OAAO8D,OAAO,sBAAd9D,2BAAAA,iBAAgB+P,OAAO,qBAAvB/P,yBAAyBkQ,MAAM,CAACJ,kBAAkB;4CACpD;4CAEA,wEAAwE;4CACxE,mEAAmE;4CACnE,IAAI,CAACF,gBAAgBO,UAAU,EAAE;oDAC/BnQ,0BAAAA;iDAAAA,mBAAAA,OAAO8D,OAAO,sBAAd9D,2BAAAA,iBAAgB+P,OAAO,qBAAvB/P,yBAAyB8E,IAAI,CAAC8K,gBAAgBK,OAAO;4CACvD;wCACF;oCACF;oCAEA,IAAIN,CAAAA,6BAAAA,4BAAAA,SAAUS,eAAe,qBAAzBT,0BAA2BU,KAAK,KAAIT,iBAAiB;wCACvDpC,OAAOnG,IAAI,CAACoI,OAAOY,KAAK,EAAElB,OAAO,CAAC,CAACmB;4CACjC,OAAOb,OAAOY,KAAK,CAACC,IAAI;wCAC1B;wCACA9C,OAAO+C,MAAM,CAACd,OAAOY,KAAK,EAAEV,SAASS,eAAe,CAACC,KAAK;wCAC1DZ,OAAOG,eAAe,GAAGA;oCAC3B;gCACF;4BACF;wBACF;wBAEA,IAAIjJ,WAAW;gCACb3G;6BAAAA,kBAAAA,OAAOwP,OAAO,qBAAdxP,gBAAgBmP,OAAO,CAAC,CAACM;gCACvB,qDAAqD;gCACrD,sCAAsC;gCACtC,IACEA,UACA,OAAOA,OAAOe,WAAW,KAAK,YAC9Bf,OAAOe,WAAW,CAACC,iBAAiB,EACpC;oCACA,MAAMC,YAAYC,IAAAA,uBAAY,EAAC;wCAC7B/B,aAAa;wCACbvB;wCACArN,QAAQhD;wCACR8Q,KAAK;wCACL/Q;wCACA8R,qBACElS,KAAKK,UAAU,CAACc,YAAY,CAAC+Q,mBAAmB;wCAClDZ;wCACAoB;wCACAE;wCACAD;wCACArJ,oBAAoB3D;wCACpBwM,aAAanS,KAAKG,GAAG;wCACrBwD,UAAU3D,KAAK4D,SAAS,CAACD,QAAQ;oCACnC;oCAEAkN,OAAOnG,IAAI,CAACoI,OAAOe,WAAW,EAAErB,OAAO,CAAC,CAACmB;wCACvC,IAAI,CAAEA,CAAAA,OAAOI,SAAQ,GAAI;4CACvB,OAAOjB,OAAOe,WAAW,CAACF,IAAI;wCAChC;oCACF;oCACA9C,OAAO+C,MAAM,CAACd,OAAOe,WAAW,EAAEE;gCACpC;4BACF;wBACF;oBACF;gBACF;gBACA,MAAMjR,YAAYmR,UAAU,CAAC;oBAC3BC,yBAAyBlK;gBAC3B;YACF;YAEA,IAAIjC,iBAAiBP,MAAM,GAAG,GAAG;gBAC/BoE,KAAI4B,KAAK,CACP,qBAIC,CAJD,IAAI2G,6BAAqB,CACvBpM,kBACA5H,KACCI,YAAYC,SAHf,qBAAA;2BAAA;gCAAA;kCAAA;gBAIA,GAAE4T,OAAO;gBAEXrM,mBAAmB,EAAE;YACvB;YAEA,sEAAsE;YACtErF,aAAa2R,aAAa,GAAGxD,OAAOyD,WAAW,CAC7CzD,OAAO0D,OAAO,CAAC7K,UAAUzB,GAAG,CAAC,CAAC,CAACuM,GAAGC,EAAE,GAAK;oBAACD;oBAAGC,EAAE9J,IAAI;iBAAG;YAExD,MAAM9K,qBACJG,MACA,iBACA0C,aAAa2R,aAAa;YAG5B,gDAAgD;YAChD3R,aAAagL,UAAU,GAAGpE,qBACtB;gBACEoL,OAAO;gBACP9N,MAAM;gBACN+G,UAAUrE;YACZ,IACA3D;YAEJ,MAAM9F,qBAAqBG,MAAM,cAAc0C,aAAagL,UAAU;YACtEhL,aAAaiS,cAAc,GAAGxK;YAE9BnK,KAAK4D,SAAS,CAACgR,iBAAiB,GAAGlS,EAAAA,2BAAAA,aAAagL,UAAU,qBAAvBhL,yBAAyBiL,QAAQ,IAChEkH,IAAAA,iDAAyB,GAACnS,4BAAAA,aAAagL,UAAU,qBAAvBhL,0BAAyBiL,QAAQ,IAC3DhI;YAEJ,MAAMmP,qBAAqBC,IAAAA,sEAAkC,EAC3DlE,OAAOnG,IAAI,CAAChB,WACZ1J,KAAKK,UAAU,CAACkF,QAAQ,EACxB0C,GAAG,CAAC,CAACzB,OACLwO,IAAAA,4BAAgB,EACd,wBACAxO,MACAxG,KAAKK,UAAU,CAACkF,QAAQ,EACxBvF,KAAKK,UAAU,CAACc,YAAY,CAACmE,mBAAmB;YAIpDtF,KAAK4D,SAAS,CAACD,QAAQ,CAAC6N,WAAW,CAACrJ,IAAI,IAAI2M;YAE5C,MAAMG,gBACJ,AAAC,OAAO5U,WAAW4U,aAAa,KAAK,cAClC,OAAM5U,WAAW4U,aAAa,oBAAxB5U,WAAW4U,aAAa,MAAxB5U,YACL,CAAC,GACD;gBACE8Q,KAAK;gBACLhR,KAAKH,KAAKG,GAAG;gBACb+U,QAAQ;gBACR9U,SAASA;gBACTkD,SAAS;YACX,OAEJ,CAAC;YAEH,MAAM6R,uBAAuBtE,OAAO0D,OAAO,CAACU,iBAAiB,CAAC;YAE9D,IAAIE,qBAAqB3N,MAAM,GAAG,GAAG;gBACnCxH,KAAK4D,SAAS,CAACwR,mBAAmB,GAAGD,qBAAqBlN,GAAG,CAC3D,CAAC,CAAC0L,KAAK0B,MAAM,GACXL,IAAAA,4BAAgB,EACd,wBACA;wBACEM,QAAQ3B;wBACR4B,aAAa,GAAGF,MAAMzO,IAAI,GACxByO,MAAMG,KAAK,GAAG,MAAM,KACnBC,oBAAE,CAACzP,SAAS,CAACqP,MAAMG,KAAK,GAAG;oBAChC,GACAxV,KAAKK,UAAU,CAACkF,QAAQ,EACxBvF,KAAKK,UAAU,CAACc,YAAY,CAACmE,mBAAmB;YAGxD;YAEA,IAAI;gBACF,gEAAgE;gBAChE,qEAAqE;gBACrE,kEAAkE;gBAClE,MAAMoQ,eAAeC,IAAAA,sBAAe,EAACpM;gBAErCvJ,KAAK4D,SAAS,CAACgS,aAAa,GAAGF,aAAazN,GAAG,CAC7C,CAACrB;oBACC,MAAMiP,QAAQC,IAAAA,8BAAkB,EAAClP,MAAM;wBACrCmP,iBAAiB;oBACnB;oBACA,OAAO;wBACLF,OAAOA,MAAMG,EAAE,CAACC,QAAQ;wBACxBC,YAAYL,MAAMK,UAAU;wBAC5BC,WAAWN,MAAMM,SAAS;wBAC1BzB,OAAO0B,IAAAA,6BAAe,EAACP;wBACvBjP;oBACF;gBACF;gBAGF,MAAMyP,aAAkD,EAAE;gBAE1D,KAAK,MAAMzP,QAAQ8O,aAAc;oBAC/B,MAAMlG,QAAQ8G,IAAAA,8BAAc,EAAC1P,MAAM;oBACnC,MAAM2P,aAAaT,IAAAA,8BAAkB,EAACtG,MAAM5I,IAAI,EAAE;wBAChDmP,iBAAiB;oBACnB;oBACAM,WAAWlO,IAAI,CAAC;wBACd,GAAGqH,KAAK;wBACRqG,OAAOU,WAAWP,EAAE,CAACC,QAAQ;wBAC7BC,YAAYK,WAAWL,UAAU;wBACjCC,WAAWI,WAAWJ,SAAS;wBAC/BzB,OAAO0B,IAAAA,6BAAe,EAAC;4BACrB,+DAA+D;4BAC/D,uCAAuC;4BACvCJ,IAAIhW,KAAKK,UAAU,CAACqF,IAAI,GACpB,IAAI8Q,OACFhH,MAAMiH,cAAc,CAACpI,OAAO,CAC1B,CAAC,aAAa,CAAC,EACf,CAAC,mCAAmC,CAAC,KAGzC,IAAImI,OAAOhH,MAAMiH,cAAc;4BACnCC,QAAQH,WAAWG,MAAM;wBAC3B;oBACF;gBACF;gBACA1W,KAAK4D,SAAS,CAACgS,aAAa,CAACe,OAAO,IAAIN;gBAExC,yFAAyF;gBACzF,4HAA4H;gBAC5H,IAAI,CAACrW,KAAK+C,KAAK,EAAE;oBACf,kEAAkE;oBAClE,4DAA4D;oBAC5D,wGAAwG;oBACxG,0CAA0C;oBAC1C,MAAMlD,qBAAqBG,MAAM,kBAAkB2F;oBAEnD,IACE,EAACsB,oCAAAA,iBAAkB2P,KAAK,CAAC,CAACC,KAAKpE,MAAQoE,QAAQnB,YAAY,CAACjD,IAAI,IAChE;wBACA,MAAMqE,cAAcpB,aAAajV,MAAM,CACrC,CAAC+O,QAAU,CAACvI,iBAAiB+D,QAAQ,CAACwE;wBAExC,MAAMuH,gBAAgB9P,iBAAiBxG,MAAM,CAC3C,CAAC+O,QAAU,CAACkG,aAAa1K,QAAQ,CAACwE;wBAGpC,8CAA8C;wBAC9C1M,YAAYkU,IAAI,CAAC;4BACfvQ,MAAMwQ,6CAA2B,CAACC,yBAAyB;4BAC3DC,MAAM;gCACJ;oCACEC,kBAAkB;gCACpB;6BACD;wBACH;wBAEAN,YAAYtE,OAAO,CAAC,CAAChD;4BACnB1M,YAAYkU,IAAI,CAAC;gCACfvQ,MAAMwQ,6CAA2B,CAACI,UAAU;gCAC5CF,MAAM;oCAAC3H;iCAAM;4BACf;wBACF;wBAEAuH,cAAcvE,OAAO,CAAC,CAAChD;4BACrB1M,YAAYkU,IAAI,CAAC;gCACfvQ,MAAMwQ,6CAA2B,CAACK,YAAY;gCAC9CH,MAAM;oCAAC3H;iCAAM;4BACf;wBACF;oBACF;gBACF;gBACAvI,mBAAmByO;gBAEnB,IAAI5M,mBAAmB;wBAYMzI;oBAX3B,6CAA6C;oBAC7C,IAAIgJ,wCAAwC,OAAO;wBACjD,oDAAoD;wBACpD,+CAA+C;wBAC/C,MAAMtJ,iBAAiBC,MACpBuX,IAAI,CAAC;4BACJtN,iBAAiB;wBACnB,GACCuN,KAAK,CAAC,KAAO;oBAClB;oBAEA,IAAIpO,yBAAuB/I,2BAAAA,WAAWc,YAAY,qBAAvBd,yBAAyBoX,QAAQ,GAAE;wBAC5D,gHAAgH;wBAChH,MAAMC,gBAAgB,AACpBzU,QAAQ,aACRyU,aAAa;wBACf,MAAM,EAAEC,cAAc,EAAE,GAAGD,cACzBvX,KACAsL,QAAQmM,GAAG,CAACC,QAAQ,KAAK,eACzB,yEAAyE;wBACzElS,WACA;wBAGF,MAAMmS,uBAAuB,AAC3B7U,QAAQ,0CACR6U,oBAAoB;wBACtB,MAAMA,qBAAqB;4BACzB1X;4BACAuX,gBAAgB;mCACXA;gCACH;oCACE/V,MAAMvB,WAAW0X,cAAc;oCAC/BH,KAAKvX,WAAWuX,GAAG;oCACnBI,UAAU;gCACZ;6BACD;wBACH;oBACF;oBAEA,MAAMC,qBAAqB,MAAMC,IAAAA,yCAAwB,EAAC;wBACxD/X;wBACAkE;wBACAD;wBACAE;wBACAyF;wBACAvE,WAAWxF,KAAKK,UAAU,CAACmF,SAAS;wBACpC7B,UAAU3D,KAAKK,UAAU,CAACsD,QAAQ;wBAClC,6EAA6E;wBAC7E,8CAA8C;wBAC9CuF;wBACApE;wBACAC;oBACF;oBAEA,MAAMZ,IAAAA,wCAAuB,EAC3B8T,oBACAhP,oBACAjJ,KAAKK,UAAU;oBAEjB,MAAM8X,IAAAA,mCAAkB,EAACF,oBAAoB/O;gBAC/C;gBAEA,IAAI,CAAClC,UAAU;oBACbG;oBACAH,WAAW;gBACb;YACF,EAAE,OAAOoR,GAAG;gBACV,IAAI,CAACpR,UAAU;oBACbI,OAAOgR;oBACPpR,WAAW;gBACb,OAAO;oBACL4E,KAAIyM,IAAI,CAAC,oCAAoCD;gBAC/C;YACF;QACF;QAEA/P,GAAGiQ,KAAK,CAAC;YAAE3Q,aAAa;gBAACxH;aAAI;YAAEoY,WAAW;QAAE;IAC9C;IAEA,MAAMC,0BAA0B,CAAC,OAAO,EAAEnS,mCAAwB,CAAC,aAAa,EAAEoS,oCAAyB,EAAE;IAC7GzY,KAAK4D,SAAS,CAAC8U,iBAAiB,CAAC1K,GAAG,CAACwK;IAErC,MAAMG,4BAA4B,CAAC,OAAO,EAAEtS,mCAAwB,CAAC,aAAa,EAAEuS,yCAA8B,EAAE;IACpH5Y,KAAK4D,SAAS,CAAC8U,iBAAiB,CAAC1K,GAAG,CAAC2K;IAErC,MAAME,qCAAqC,CAAC,OAAO,EAAExS,mCAAwB,CAAC,aAAa,EAAEyS,+CAAoC,EAAE;IACnI9Y,KAAK4D,SAAS,CAAC8U,iBAAiB,CAAC1K,GAAG,CAAC6K;IAErC,eAAeE,eAAeC,GAAoB,EAAEC,GAAmB;YAGjEC,qBAcFA,sBACAA;QAjBF,MAAMA,YAAYC,YAAG,CAAC/N,KAAK,CAAC4N,IAAIG,GAAG,IAAI;QAEvC,KAAID,sBAAAA,UAAUzQ,QAAQ,qBAAlByQ,oBAAoBlO,QAAQ,CAACwN,0BAA0B;YACzDS,IAAIG,UAAU,GAAG;YACjBH,IAAII,SAAS,CAAC,gBAAgBC,oCAAwB;YACtDL,IAAIM,GAAG,CACLxT,KAAKC,SAAS,CAAC;gBACbyB,OAAOR,iBAAiBxG,MAAM,CAC5B,CAAC+O,QAAU,CAACxP,KAAK4D,SAAS,CAACwG,QAAQ,CAAC4F,GAAG,CAACR;YAE5C;YAEF,OAAO;gBAAEgK,UAAU;YAAK;QAC1B;QAEA,IACEN,EAAAA,uBAAAA,UAAUzQ,QAAQ,qBAAlByQ,qBAAoBlO,QAAQ,CAAC2N,iCAC7BO,uBAAAA,UAAUzQ,QAAQ,qBAAlByQ,qBAAoBlO,QAAQ,CAAC6N,sCAC7B;gBAGuBnW;YAFvBuW,IAAIG,UAAU,GAAG;YACjBH,IAAII,SAAS,CAAC,gBAAgBC,oCAAwB;YACtDL,IAAIM,GAAG,CAACxT,KAAKC,SAAS,CAACtD,EAAAA,2BAAAA,aAAagL,UAAU,qBAAvBhL,yBAAyBiL,QAAQ,KAAI,EAAE;YAC9D,OAAO;gBAAE6L,UAAU;YAAK;QAC1B;QACA,OAAO;YAAEA,UAAU;QAAM;IAC3B;IAEA,SAASC,0BACPC,GAAY,EACZjT,IAAyE;QAEzE,IAAIiT,eAAehO,OAAO;YACxBgO,IAAItF,OAAO,GAAGuF,IAAAA,gCAAe,EAACD,IAAItF,OAAO;QAC3C;QACA,IAAIsF,eAAeE,wBAAgB,EAAE;YACnC,wDAAwD;YACxDhO,KAAI4B,KAAK,CAACkM,IAAItF,OAAO;QACvB,OAAO,IAAIsF,eAAeG,qCAAsB,EAAE;QAChD,yEAAyE;QACzE,mEAAmE;QACrE,OAAO,IAAIpT,SAAS,WAAW;YAC7BmF,KAAIyM,IAAI,CAACqB;QACX,OAAO,IAAIjT,SAAS,WAAW;YAC7BmF,KAAI4B,KAAK,CAACkM;QACZ,OAAO,IAAIjT,MAAM;YACfmF,KAAI4B,KAAK,CAAC,GAAG/G,KAAK,CAAC,CAAC,EAAEiT;QACxB,OAAO;YACL9N,KAAI4B,KAAK,CAACkM;QACZ;IACF;IAEA,OAAO;QACLhX;QACAI;QACAiW;QACAU;QAEA,MAAMK,kBAAiBC,UAAmB;YACxC,IAAI,CAACrX,aAAa+K,oBAAoB,EAAE;YACxC,OAAO3K,YAAY4D,UAAU,CAAC;gBAC5BE,MAAMlE,aAAa+K,oBAAoB;gBACvC9G,YAAY;gBACZI,YAAYpB;gBACZwT,KAAKY;YACP;QACF;IACF;AACF;AAEO,eAAeja,gBAAgBE,IAAe;IACnD,MAAMoD,WAAWxB,aAAI,CAClB+J,QAAQ,CAAC3L,KAAKG,GAAG,EAAEH,KAAKO,QAAQ,IAAIP,KAAKQ,MAAM,IAAI,IACnDmI,UAAU,CAAC;IAEd,MAAMqR,SAAS,MAAMvY,aAAa;QAChC,GAAGzB,IAAI;QACPoD;IACF;IAEApD,KAAK0D,SAAS,CAACuW,MAAM,CACnBC,IAAAA,uBAAe,EAACla,KAAKK,UAAU,EAAE;QAC/B8Z,gBAAgB;QAChB/W;QACAgX,WAAW,CAAC,CAACpa,KAAK+C,KAAK;QACvBsX,YAAY;QACZ7Z,QAAQ,CAAC,CAACR,KAAKQ,MAAM;QACrBD,UAAU,CAAC,CAACP,KAAKO,QAAQ;QACzB+Z,gBAAgB,CAAC,CAACta,KAAKsa,cAAc;QACrCC,YAAY,CAAC,CAAE,MAAMC,IAAAA,eAAM,EAAC,YAAY;YAAEhP,KAAKxL,KAAKG,GAAG;QAAC;IAC1D;IAGF,4CAA4C;IAC5CH,KAAK0D,SAAS,CAACuW,MAAM,CAAC;QACpBQ,WAAWC,iCAAyB;QACpCC,SAAS;YACPC,aAAa;YACbC,iBAAiBC,IAAAA,sCAA8B,EAAC9a,KAAKK,UAAU,IAAI,IAAI;QACzE;IACF;IAEA,OAAO2Z;AACT;CAIA,2DAA2D","ignoreList":[0]}
{"version":3,"sources":["../../../src/server/dev/hot-reloader-turbopack.ts"],"sourcesContent":["import type { Socket } from 'net'\nimport { mkdir, writeFile } from 'fs/promises'\nimport { join, extname, relative } from 'path'\nimport { pathToFileURL } from 'url'\n\nimport ws from 'next/dist/compiled/ws'\n\nimport type { OutputState } from '../../build/output/store'\nimport { store as consoleStore } from '../../build/output/store'\nimport type {\n  CompilationError,\n  HmrMessageSentToBrowser,\n  NextJsHotReloaderInterface,\n  ReloadPageMessage,\n  SyncMessage,\n  TurbopackConnectedMessage,\n} from './hot-reloader-types'\nimport { HMR_MESSAGE_SENT_TO_BROWSER } from './hot-reloader-types'\nimport type {\n  Update as TurbopackUpdate,\n  Endpoint,\n  WrittenEndpoint,\n  TurbopackResult,\n  Project,\n  Entrypoints,\n} from '../../build/swc/types'\nimport { createDefineEnv } from '../../build/swc'\nimport * as Log from '../../build/output/log'\nimport { BLOCKED_PAGES } from '../../shared/lib/constants'\nimport {\n  getOverlayMiddleware,\n  getSourceMapMiddleware,\n  getOriginalStackFrames,\n} from './middleware-turbopack'\nimport { PageNotFoundError } from '../../shared/lib/utils'\nimport { debounce } from '../utils'\nimport { deleteCache } from './require-cache'\nimport {\n  clearAllModuleContexts,\n  clearModuleContext,\n} from '../lib/render-server'\nimport { denormalizePagePath } from '../../shared/lib/page-path/denormalize-page-path'\nimport { trace } from '../../trace'\nimport {\n  AssetMapper,\n  type ChangeSubscriptions,\n  type ClientState,\n  handleEntrypoints,\n  handlePagesErrorRoute,\n  handleRouteType,\n  hasEntrypointForKey,\n  msToNs,\n  type ReadyIds,\n  type SendHmr,\n  type StartBuilding,\n  processTopLevelIssues,\n  printNonFatalIssue,\n  normalizedPageToTurbopackStructureRoute,\n} from './turbopack-utils'\nimport {\n  propagateServerField,\n  type ServerFields,\n  type SetupOpts,\n} from '../lib/router-utils/setup-dev-bundler'\nimport { TurbopackManifestLoader } from '../../shared/lib/turbopack/manifest-loader'\nimport { findPagePathData } from './on-demand-entry-handler'\nimport type { RouteDefinition } from '../route-definitions/route-definition'\nimport {\n  type EntryKey,\n  getEntryKey,\n  splitEntryKey,\n} from '../../shared/lib/turbopack/entry-key'\nimport {\n  createBinaryHmrMessageData,\n  FAST_REFRESH_RUNTIME_RELOAD,\n} from './messages'\nimport { generateEncryptionKeyBase64 } from '../app-render/encryption-utils-server'\nimport { isAppPageRouteDefinition } from '../route-definitions/app-page-route-definition'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport type { ModernSourceMapPayload } from '../lib/source-maps'\nimport { getNodeDebugType } from '../lib/utils'\nimport { isMetadataRouteFile } from '../../lib/metadata/is-metadata-route'\nimport { setBundlerFindSourceMapImplementation } from '../patch-error-inspect'\nimport { getNextErrorFeedbackMiddleware } from '../../next-devtools/server/get-next-error-feedback-middleware'\nimport {\n  formatIssue,\n  isFileSystemCacheEnabledForDev,\n  isWellKnownError,\n  processIssues,\n  renderStyledStringToErrorAnsi,\n  type EntryIssuesMap,\n  type IssuesMap,\n  type TopLevelIssuesMap,\n} from '../../shared/lib/turbopack/utils'\nimport { getDevOverlayFontMiddleware } from '../../next-devtools/server/font/get-dev-overlay-font-middleware'\nimport { devIndicatorServerState } from './dev-indicator-server-state'\nimport { getDisableDevIndicatorMiddleware } from '../../next-devtools/server/dev-indicator-middleware'\nimport { getRestartDevServerMiddleware } from '../../next-devtools/server/restart-dev-server-middleware'\nimport { backgroundLogCompilationEvents } from '../../shared/lib/turbopack/compilation-events'\nimport { getSupportedBrowsers, printBuildErrors } from '../../build/utils'\nimport {\n  receiveBrowserLogsTurbopack,\n  handleClientFileLogs,\n} from './browser-logs/receive-logs'\nimport { normalizePath } from '../../lib/normalize-path'\nimport {\n  devToolsConfigMiddleware,\n  getDevToolsConfig,\n} from '../../next-devtools/server/devtools-config-middleware'\nimport {\n  connectReactDebugChannel,\n  deleteReactDebugChannel,\n  setReactDebugChannel,\n} from './debug-channel'\nimport {\n  getVersionInfo,\n  matchNextPageBundleRequest,\n} from './hot-reloader-shared-utils'\nimport { getMcpMiddleware } from '../mcp/get-mcp-middleware'\nimport { handleErrorStateResponse } from '../mcp/tools/get-errors'\nimport { handlePageMetadataResponse } from '../mcp/tools/get-page-metadata'\nimport { setStackFrameResolver } from '../mcp/tools/utils/format-errors'\nimport { recordMcpTelemetry } from '../mcp/mcp-telemetry-tracker'\nimport { getFileLogger } from './browser-logs/file-logger'\nimport type { ServerCacheStatus } from '../../next-devtools/dev-overlay/cache-indicator'\nimport type { Lockfile } from '../../build/lockfile'\n\nconst wsServer = new ws.Server({ noServer: true })\nconst isTestMode = !!(\n  process.env.NEXT_TEST_MODE ||\n  process.env.__NEXT_TEST_MODE ||\n  process.env.DEBUG\n)\n\nconst sessionId = Math.floor(Number.MAX_SAFE_INTEGER * Math.random())\n\ndeclare const __next__clear_chunk_cache__: (() => void) | null | undefined\n\n/**\n * Replaces turbopack:///[project] with the specified project in the `source` field.\n */\nfunction rewriteTurbopackSources(\n  projectRoot: string,\n  sourceMap: ModernSourceMapPayload\n): void {\n  if ('sections' in sourceMap) {\n    for (const section of sourceMap.sections) {\n      rewriteTurbopackSources(projectRoot, section.map)\n    }\n  } else {\n    for (let i = 0; i < sourceMap.sources.length; i++) {\n      sourceMap.sources[i] = pathToFileURL(\n        join(\n          projectRoot,\n          sourceMap.sources[i].replace(/turbopack:\\/\\/\\/\\[project\\]/, '')\n        )\n      ).toString()\n    }\n  }\n}\n\nfunction getSourceMapFromTurbopack(\n  project: Project,\n  projectRoot: string,\n  sourceURL: string\n): ModernSourceMapPayload | undefined {\n  let sourceMapJson: string | null = null\n\n  try {\n    sourceMapJson = project.getSourceMapSync(sourceURL)\n  } catch (err) {}\n\n  if (sourceMapJson === null) {\n    return undefined\n  } else {\n    const payload: ModernSourceMapPayload = JSON.parse(sourceMapJson)\n    // The sourcemap from Turbopack is not yet written to disk so its `sources`\n    // are not absolute paths yet. We need to rewrite them to be absolute paths.\n    rewriteTurbopackSources(projectRoot, payload)\n    return payload\n  }\n}\n\nexport async function createHotReloaderTurbopack(\n  opts: SetupOpts & { isSrcDir: boolean },\n  serverFields: ServerFields,\n  distDir: string,\n  resetFetch: () => void,\n  lockfile: Lockfile | undefined\n): Promise<NextJsHotReloaderInterface> {\n  const dev = true\n  const buildId = 'development'\n  const { nextConfig, dir: projectPath } = opts\n\n  const { loadBindings } =\n    require('../../build/swc') as typeof import('../../build/swc')\n\n  let bindings = await loadBindings()\n\n  // For the debugging purpose, check if createNext or equivalent next instance setup in test cases\n  // works correctly. Normally `run-test` hides output so only will be visible when `--debug` flag is used.\n  if (isTestMode) {\n    ;(require('console') as typeof import('console')).log(\n      'Creating turbopack project',\n      {\n        dir: projectPath,\n        testMode: isTestMode,\n      }\n    )\n  }\n\n  const hasRewrites =\n    opts.fsChecker.rewrites.afterFiles.length > 0 ||\n    opts.fsChecker.rewrites.beforeFiles.length > 0 ||\n    opts.fsChecker.rewrites.fallback.length > 0\n\n  const hotReloaderSpan = trace('hot-reloader', undefined, {\n    version: process.env.__NEXT_VERSION as string,\n  })\n  // Ensure the hotReloaderSpan is flushed immediately as it's the parentSpan for all processing\n  // of the current `next dev` invocation.\n  hotReloaderSpan.stop()\n\n  // Initialize log monitor for file logging\n  // Enable logging by default in development mode\n  const mcpServerEnabled = !!nextConfig.experimental.mcpServer\n  const fileLogger = getFileLogger()\n  fileLogger.initialize(distDir, mcpServerEnabled)\n\n  const encryptionKey = await generateEncryptionKeyBase64({\n    isBuild: false,\n    distDir,\n  })\n\n  // TODO: Implement\n  let clientRouterFilters: any\n  if (nextConfig.experimental.clientRouterFilter) {\n    // TODO this need to be set correctly for filesystem cache to work\n  }\n\n  const supportedBrowsers = getSupportedBrowsers(projectPath, dev)\n  const currentNodeJsVersion = process.versions.node\n\n  const rootPath =\n    opts.nextConfig.turbopack?.root ||\n    opts.nextConfig.outputFileTracingRoot ||\n    projectPath\n  const project = await bindings.turbo.createProject(\n    {\n      rootPath,\n      projectPath: normalizePath(relative(rootPath, projectPath) || '.'),\n      distDir,\n      nextConfig: opts.nextConfig,\n      watch: {\n        enable: dev,\n        pollIntervalMs: nextConfig.watchOptions?.pollIntervalMs,\n      },\n      dev,\n      env: process.env as Record<string, string>,\n      defineEnv: createDefineEnv({\n        isTurbopack: true,\n        clientRouterFilters,\n        config: nextConfig,\n        dev,\n        distDir,\n        projectPath,\n        fetchCacheKeyPrefix: opts.nextConfig.experimental.fetchCacheKeyPrefix,\n        hasRewrites,\n        // TODO: Implement\n        middlewareMatchers: undefined,\n        rewrites: opts.fsChecker.rewrites,\n      }),\n      buildId,\n      encryptionKey,\n      previewProps: opts.fsChecker.prerenderManifest.preview,\n      browserslistQuery: supportedBrowsers.join(', '),\n      noMangling: false,\n      currentNodeJsVersion,\n    },\n    {\n      persistentCaching: isFileSystemCacheEnabledForDev(opts.nextConfig),\n      memoryLimit: opts.nextConfig.experimental?.turbopackMemoryLimit,\n      isShortSession: false,\n    }\n  )\n  backgroundLogCompilationEvents(project, {\n    eventTypes: ['StartupCacheInvalidationEvent', 'TimingEvent'],\n  })\n  setBundlerFindSourceMapImplementation(\n    getSourceMapFromTurbopack.bind(null, project, projectPath)\n  )\n  opts.onDevServerCleanup?.(async () => {\n    setBundlerFindSourceMapImplementation(() => undefined)\n    await project.onExit()\n    await lockfile?.unlock()\n  })\n  const entrypointsSubscription = project.entrypointsSubscribe()\n\n  const currentWrittenEntrypoints: Map<EntryKey, WrittenEndpoint> = new Map()\n  const currentEntrypoints: Entrypoints = {\n    global: {\n      app: undefined,\n      document: undefined,\n      error: undefined,\n\n      middleware: undefined,\n      instrumentation: undefined,\n    },\n\n    page: new Map(),\n    app: new Map(),\n  }\n\n  const currentTopLevelIssues: TopLevelIssuesMap = new Map()\n  const currentEntryIssues: EntryIssuesMap = new Map()\n\n  const manifestLoader = new TurbopackManifestLoader({\n    buildId,\n    distDir,\n    encryptionKey,\n  })\n\n  // Dev specific\n  const changeSubscriptions: ChangeSubscriptions = new Map()\n  const serverPathState = new Map<string, string>()\n  const readyIds: ReadyIds = new Set()\n  let currentEntriesHandlingResolve: ((value?: unknown) => void) | undefined\n  let currentEntriesHandling = new Promise(\n    (resolve) => (currentEntriesHandlingResolve = resolve)\n  )\n\n  const assetMapper = new AssetMapper()\n\n  function clearRequireCache(\n    key: EntryKey,\n    writtenEndpoint: WrittenEndpoint,\n    {\n      force,\n    }: {\n      // Always clear the cache, don't check if files have changed\n      force?: boolean\n    } = {}\n  ): boolean {\n    if (force) {\n      for (const { path, contentHash } of writtenEndpoint.serverPaths) {\n        // We ignore source maps\n        if (path.endsWith('.map')) continue\n        const localKey = `${key}:${path}`\n        serverPathState.set(localKey, contentHash)\n        serverPathState.set(path, contentHash)\n      }\n    } else {\n      // Figure out if the server files have changed\n      let hasChange = false\n      for (const { path, contentHash } of writtenEndpoint.serverPaths) {\n        // We ignore source maps\n        if (path.endsWith('.map')) continue\n        const localKey = `${key}:${path}`\n        const localHash = serverPathState.get(localKey)\n        const globalHash = serverPathState.get(path)\n        if (\n          (localHash && localHash !== contentHash) ||\n          (globalHash && globalHash !== contentHash)\n        ) {\n          hasChange = true\n          serverPathState.set(localKey, contentHash)\n          serverPathState.set(path, contentHash)\n        } else {\n          if (!localHash) {\n            serverPathState.set(localKey, contentHash)\n          }\n          if (!globalHash) {\n            serverPathState.set(path, contentHash)\n          }\n        }\n      }\n\n      if (!hasChange) {\n        return false\n      }\n    }\n\n    resetFetch()\n\n    // Not available in:\n    // - Pages Router (no server-side HMR)\n    // - Edge Runtime (uses browser runtime which already disposes chunks individually)\n    if (typeof __next__clear_chunk_cache__ === 'function') {\n      __next__clear_chunk_cache__()\n    }\n\n    const serverPaths = writtenEndpoint.serverPaths.map(({ path: p }) =>\n      join(distDir, p)\n    )\n\n    for (const file of serverPaths) {\n      clearModuleContext(file)\n      deleteCache(file)\n    }\n\n    return true\n  }\n\n  const buildingIds = new Set()\n\n  const startBuilding: StartBuilding = (id, requestUrl, forceRebuild) => {\n    if (!forceRebuild && readyIds.has(id)) {\n      return () => {}\n    }\n    if (buildingIds.size === 0) {\n      consoleStore.setState(\n        {\n          loading: true,\n          trigger: id,\n          url: requestUrl,\n        } as OutputState,\n        true\n      )\n    }\n    buildingIds.add(id)\n    return function finishBuilding() {\n      if (buildingIds.size === 0) {\n        return\n      }\n      readyIds.add(id)\n      buildingIds.delete(id)\n      if (buildingIds.size === 0) {\n        hmrEventHappened = false\n        consoleStore.setState(\n          {\n            loading: false,\n          } as OutputState,\n          true\n        )\n      }\n    }\n  }\n\n  let hmrEventHappened = false\n  let hmrHash = 0\n\n  const clientsWithoutRequestId = new Set<ws>()\n  const clientsByRequestId = new Map<string, ws>()\n  const cacheStatusesByRequestId = new Map<string, ServerCacheStatus>()\n  const clientStates = new WeakMap<ws, ClientState>()\n\n  function sendToClient(client: ws, message: HmrMessageSentToBrowser) {\n    const data =\n      typeof message.type === 'number'\n        ? createBinaryHmrMessageData(message)\n        : JSON.stringify(message)\n\n    client.send(data)\n  }\n\n  function sendEnqueuedMessages() {\n    for (const [, issueMap] of currentEntryIssues) {\n      if (\n        [...issueMap.values()].filter((i) => i.severity !== 'warning').length >\n        0\n      ) {\n        // During compilation errors we want to delay the HMR events until errors are fixed\n        return\n      }\n    }\n\n    for (const client of [\n      ...clientsWithoutRequestId,\n      ...clientsByRequestId.values(),\n    ]) {\n      const state = clientStates.get(client)\n      if (!state) {\n        continue\n      }\n\n      for (const [, issueMap] of state.clientIssues) {\n        if (\n          [...issueMap.values()].filter((i) => i.severity !== 'warning')\n            .length > 0\n        ) {\n          // During compilation errors we want to delay the HMR events until errors are fixed\n          return\n        }\n      }\n\n      for (const message of state.messages.values()) {\n        sendToClient(client, message)\n      }\n      state.messages.clear()\n\n      if (state.turbopackUpdates.length > 0) {\n        sendToClient(client, {\n          type: HMR_MESSAGE_SENT_TO_BROWSER.TURBOPACK_MESSAGE,\n          data: state.turbopackUpdates,\n        })\n        state.turbopackUpdates.length = 0\n      }\n    }\n  }\n  const sendEnqueuedMessagesDebounce = debounce(sendEnqueuedMessages, 2)\n\n  const sendHmr: SendHmr = (id: string, message: HmrMessageSentToBrowser) => {\n    for (const client of [\n      ...clientsWithoutRequestId,\n      ...clientsByRequestId.values(),\n    ]) {\n      clientStates.get(client)?.messages.set(id, message)\n    }\n\n    hmrEventHappened = true\n    sendEnqueuedMessagesDebounce()\n  }\n\n  function sendTurbopackMessage(payload: TurbopackUpdate) {\n    // TODO(PACK-2049): For some reason we end up emitting hundreds of issues messages on bigger apps,\n    //   a lot of which are duplicates.\n    //   They are currently not handled on the client at all, so might as well not send them for now.\n    payload.diagnostics = []\n    payload.issues = []\n\n    for (const client of [\n      ...clientsWithoutRequestId,\n      ...clientsByRequestId.values(),\n    ]) {\n      clientStates.get(client)?.turbopackUpdates.push(payload)\n    }\n\n    hmrEventHappened = true\n    sendEnqueuedMessagesDebounce()\n  }\n\n  async function subscribeToChanges(\n    key: EntryKey,\n    includeIssues: boolean,\n    endpoint: Endpoint,\n    createMessage: (\n      change: TurbopackResult,\n      hash: string\n    ) => Promise<HmrMessageSentToBrowser> | HmrMessageSentToBrowser | void,\n    onError?: (\n      error: Error\n    ) => Promise<HmrMessageSentToBrowser> | HmrMessageSentToBrowser | void\n  ) {\n    if (changeSubscriptions.has(key)) {\n      return\n    }\n\n    const { side } = splitEntryKey(key)\n\n    const changedPromise = endpoint[`${side}Changed`](includeIssues)\n    changeSubscriptions.set(key, changedPromise)\n    try {\n      const changed = await changedPromise\n\n      for await (const change of changed) {\n        processIssues(currentEntryIssues, key, change, false, true)\n        // TODO: Get an actual content hash from Turbopack.\n        const message = await createMessage(change, String(++hmrHash))\n        if (message) {\n          sendHmr(key, message)\n        }\n      }\n    } catch (e) {\n      changeSubscriptions.delete(key)\n      const payload = await onError?.(e as Error)\n      if (payload) {\n        sendHmr(key, payload)\n      }\n      return\n    }\n    changeSubscriptions.delete(key)\n  }\n\n  async function unsubscribeFromChanges(key: EntryKey) {\n    const subscription = await changeSubscriptions.get(key)\n    if (subscription) {\n      await subscription.return?.()\n      changeSubscriptions.delete(key)\n    }\n    currentEntryIssues.delete(key)\n  }\n\n  async function subscribeToHmrEvents(client: ws, id: string) {\n    const key = getEntryKey('assets', 'client', id)\n    if (!hasEntrypointForKey(currentEntrypoints, key, assetMapper)) {\n      // maybe throw an error / force the client to reload?\n      return\n    }\n\n    const state = clientStates.get(client)\n    if (!state || state.subscriptions.has(id)) {\n      return\n    }\n\n    const subscription = project!.hmrEvents(id)\n    state.subscriptions.set(id, subscription)\n\n    // The subscription will always emit once, which is the initial\n    // computation. This is not a change, so swallow it.\n    try {\n      await subscription.next()\n\n      for await (const data of subscription) {\n        processIssues(state.clientIssues, key, data, false, true)\n        if (data.type !== 'issues') {\n          sendTurbopackMessage(data)\n        }\n      }\n    } catch (e) {\n      // The client might be using an HMR session from a previous server, tell them\n      // to fully reload the page to resolve the issue. We can't use\n      // `hotReloader.send` since that would force every connected client to\n      // reload, only this client is out of date.\n      const reloadMessage: ReloadPageMessage = {\n        type: HMR_MESSAGE_SENT_TO_BROWSER.RELOAD_PAGE,\n        data: `error in HMR event subscription for ${id}: ${e}`,\n      }\n      sendToClient(client, reloadMessage)\n      client.close()\n      return\n    }\n  }\n\n  function unsubscribeFromHmrEvents(client: ws, id: string) {\n    const state = clientStates.get(client)\n    if (!state) {\n      return\n    }\n\n    const subscription = state.subscriptions.get(id)\n    subscription?.return!()\n\n    const key = getEntryKey('assets', 'client', id)\n    state.clientIssues.delete(key)\n  }\n\n  async function handleEntrypointsSubscription() {\n    for await (const entrypoints of entrypointsSubscription) {\n      if (!currentEntriesHandlingResolve) {\n        currentEntriesHandling = new Promise(\n          // eslint-disable-next-line no-loop-func\n          (resolve) => (currentEntriesHandlingResolve = resolve)\n        )\n      }\n\n      // Always process issues/diagnostics, even if there are no entrypoints yet\n      processTopLevelIssues(currentTopLevelIssues, entrypoints)\n\n      // Certain crtical issues prevent any entrypoints from being constructed so return early\n      if (!('routes' in entrypoints)) {\n        printBuildErrors(entrypoints, true)\n\n        currentEntriesHandlingResolve!()\n        currentEntriesHandlingResolve = undefined\n        continue\n      }\n\n      const routes = entrypoints.routes\n      const existingRoutes = [\n        ...currentEntrypoints.app.keys(),\n        ...currentEntrypoints.page.keys(),\n      ]\n      const newRoutes = [...routes.keys()]\n\n      const addedRoutes = newRoutes.filter(\n        (route) =>\n          !currentEntrypoints.app.has(route) &&\n          !currentEntrypoints.page.has(route)\n      )\n      const removedRoutes = existingRoutes.filter((route) => !routes.has(route))\n\n      await handleEntrypoints({\n        entrypoints: entrypoints as any,\n\n        currentEntrypoints,\n\n        currentEntryIssues,\n        manifestLoader,\n        devRewrites: opts.fsChecker.rewrites,\n        productionRewrites: undefined,\n        logErrors: true,\n\n        dev: {\n          assetMapper,\n          changeSubscriptions,\n          clients: [...clientsWithoutRequestId, ...clientsByRequestId.values()],\n          clientStates,\n          serverFields,\n\n          hooks: {\n            handleWrittenEndpoint: (id, result, forceDeleteCache) => {\n              currentWrittenEntrypoints.set(id, result)\n              return clearRequireCache(id, result, { force: forceDeleteCache })\n            },\n            propagateServerField: propagateServerField.bind(null, opts),\n            sendHmr,\n            startBuilding,\n            subscribeToChanges,\n            unsubscribeFromChanges,\n            unsubscribeFromHmrEvents,\n          },\n        },\n      })\n\n      // Reload matchers when the files have been compiled\n      await propagateServerField(opts, 'reloadMatchers', undefined)\n\n      if (addedRoutes.length > 0 || removedRoutes.length > 0) {\n        // When the list of routes changes a new manifest should be fetched for Pages Router.\n        hotReloader.send({\n          type: HMR_MESSAGE_SENT_TO_BROWSER.DEV_PAGES_MANIFEST_UPDATE,\n          data: [\n            {\n              devPagesManifest: true,\n            },\n          ],\n        })\n      }\n\n      for (const route of addedRoutes) {\n        hotReloader.send({\n          type: HMR_MESSAGE_SENT_TO_BROWSER.ADDED_PAGE,\n          data: [route],\n        })\n      }\n\n      for (const route of removedRoutes) {\n        hotReloader.send({\n          type: HMR_MESSAGE_SENT_TO_BROWSER.REMOVED_PAGE,\n          data: [route],\n        })\n      }\n\n      currentEntriesHandlingResolve!()\n      currentEntriesHandlingResolve = undefined\n    }\n  }\n\n  await mkdir(join(distDir, 'server'), { recursive: true })\n  await mkdir(join(distDir, 'static', buildId), { recursive: true })\n  await writeFile(\n    join(distDir, 'package.json'),\n    JSON.stringify(\n      {\n        type: 'commonjs',\n      },\n      null,\n      2\n    )\n  )\n\n  const middlewares = [\n    getOverlayMiddleware({\n      project,\n      projectPath,\n      isSrcDir: opts.isSrcDir,\n    }),\n    getSourceMapMiddleware(project),\n    getNextErrorFeedbackMiddleware(opts.telemetry),\n    getDevOverlayFontMiddleware(),\n    getDisableDevIndicatorMiddleware(),\n    getRestartDevServerMiddleware({\n      telemetry: opts.telemetry,\n      turbopackProject: project,\n    }),\n    devToolsConfigMiddleware({\n      distDir,\n      sendUpdateSignal: (data) => {\n        hotReloader.send({\n          type: HMR_MESSAGE_SENT_TO_BROWSER.DEVTOOLS_CONFIG,\n          data,\n        })\n      },\n    }),\n    ...(nextConfig.experimental.mcpServer\n      ? [\n          getMcpMiddleware({\n            projectPath,\n            distDir,\n            sendHmrMessage: (message) => hotReloader.send(message),\n            getActiveConnectionCount: () =>\n              clientsWithoutRequestId.size + clientsByRequestId.size,\n            getDevServerUrl: () => process.env.__NEXT_PRIVATE_ORIGIN,\n          }),\n        ]\n      : []),\n  ]\n\n  setStackFrameResolver(async (request) => {\n    return getOriginalStackFrames({\n      project,\n      projectPath,\n      isServer: request.isServer,\n      isEdgeServer: request.isEdgeServer,\n      isAppDirectory: request.isAppDirectory,\n      frames: request.frames,\n    })\n  })\n\n  let versionInfoCached: ReturnType<typeof getVersionInfo> | undefined\n  // This fetch, even though not awaited, is not kicked off eagerly because the first `fetch()` in\n  // Node.js adds roughly 20ms main-thread blocking to load the SSL certificate cache\n  // We don't want that blocking time to be in the hot path for the `ready in` logging.\n  // Instead, the fetch is kicked off lazily when the first `getVersionInfoCached()` is called.\n  const getVersionInfoCached = (): ReturnType<typeof getVersionInfo> => {\n    if (!versionInfoCached) {\n      versionInfoCached = getVersionInfo()\n    }\n    return versionInfoCached\n  }\n\n  let devtoolsFrontendUrl: string | undefined\n  const nodeDebugType = getNodeDebugType()\n  if (nodeDebugType) {\n    const debugPort = process.debugPort\n    let debugInfo\n    try {\n      // It requires to use 127.0.0.1 instead of localhost for server-side fetching.\n      const debugInfoList = await fetch(\n        `http://127.0.0.1:${debugPort}/json/list`\n      ).then((res) => res.json())\n      debugInfo = debugInfoList[0]\n    } catch {}\n    if (debugInfo) {\n      devtoolsFrontendUrl = debugInfo.devtoolsFrontendUrl\n    }\n  }\n\n  const hotReloader: NextJsHotReloaderInterface = {\n    turbopackProject: project,\n    activeWebpackConfigs: undefined,\n    serverStats: null,\n    edgeServerStats: null,\n    async run(req, res, _parsedUrl) {\n      // intercept page chunks request and ensure them with turbopack\n      if (req.url?.startsWith('/_next/static/chunks/pages/')) {\n        const params = matchNextPageBundleRequest(req.url)\n\n        if (params) {\n          const decodedPagePath = `/${params.path\n            .map((param: string) => decodeURIComponent(param))\n            .join('/')}`\n\n          const denormalizedPagePath = denormalizePagePath(decodedPagePath)\n\n          await hotReloader\n            .ensurePage({\n              page: denormalizedPagePath,\n              clientOnly: false,\n              definition: undefined,\n              url: req.url,\n            })\n            .catch(console.error)\n        }\n      }\n\n      for (const middleware of middlewares) {\n        let calledNext = false\n\n        await middleware(req, res, () => {\n          calledNext = true\n        })\n\n        if (!calledNext) {\n          return { finished: true }\n        }\n      }\n\n      // Request was not finished.\n      return { finished: undefined }\n    },\n\n    // TODO: Figure out if socket type can match the NextJsHotReloaderInterface\n    onHMR(req, socket: Socket, head, onUpgrade) {\n      wsServer.handleUpgrade(req, socket, head, (client) => {\n        const clientIssues: EntryIssuesMap = new Map()\n        const subscriptions: Map<string, AsyncIterator<any>> = new Map()\n\n        const requestId = req.url\n          ? new URL(req.url, 'http://n').searchParams.get('id')\n          : null\n\n        // Clients with a request ID are inferred App Router clients. If Cache\n        // Components is not enabled, we consider those legacy clients. Pages\n        // Router clients are also considered legacy clients. TODO: Maybe mark\n        // clients as App Router / Pages Router clients explicitly, instead of\n        // inferring it from the presence of a request ID.\n        if (requestId) {\n          clientsByRequestId.set(requestId, client)\n          const enableCacheComponents = nextConfig.cacheComponents\n          if (enableCacheComponents) {\n            onUpgrade(client, { isLegacyClient: false })\n            const cacheStatus = cacheStatusesByRequestId.get(requestId)\n            if (cacheStatus !== undefined) {\n              sendToClient(client, {\n                type: HMR_MESSAGE_SENT_TO_BROWSER.CACHE_INDICATOR,\n                state: cacheStatus,\n              })\n              cacheStatusesByRequestId.delete(requestId)\n            }\n          } else {\n            onUpgrade(client, { isLegacyClient: true })\n          }\n        } else {\n          clientsWithoutRequestId.add(client)\n          onUpgrade(client, { isLegacyClient: true })\n        }\n\n        clientStates.set(client, {\n          clientIssues,\n          messages: new Map(),\n          turbopackUpdates: [],\n          subscriptions,\n        })\n\n        client.on('close', () => {\n          // Remove active subscriptions\n          for (const subscription of subscriptions.values()) {\n            subscription.return?.()\n          }\n          clientStates.delete(client)\n\n          if (requestId) {\n            clientsByRequestId.delete(requestId)\n            deleteReactDebugChannel(requestId)\n          } else {\n            clientsWithoutRequestId.delete(client)\n          }\n        })\n\n        client.addEventListener('message', async ({ data }) => {\n          const parsedData = JSON.parse(\n            typeof data !== 'string' ? data.toString() : data\n          )\n\n          // Next.js messages\n          switch (parsedData.event) {\n            case 'span-end': {\n              hotReloaderSpan.manualTraceChild(\n                parsedData.spanName,\n                msToNs(parsedData.startTime),\n                msToNs(parsedData.endTime),\n                parsedData.attributes\n              )\n              break\n            }\n            case 'client-hmr-latency': // { id, startTime, endTime, page, updatedModules, isPageHidden }\n              hotReloaderSpan.manualTraceChild(\n                parsedData.event,\n                msToNs(parsedData.startTime),\n                msToNs(parsedData.endTime),\n                {\n                  updatedModules: parsedData.updatedModules,\n                  page: parsedData.page,\n                  isPageHidden: parsedData.isPageHidden,\n                }\n              )\n              break\n\n            case 'client-error': // { errorCount, clientId }\n            case 'client-warning': // { warningCount, clientId }\n            case 'client-success': // { clientId }\n            case 'server-component-reload-page': // { clientId }\n            case 'client-reload-page': // { clientId }\n            case 'client-removed-page': // { page }\n            case 'client-full-reload': // { stackTrace, hadRuntimeError }\n              const { hadRuntimeError, dependencyChain } = parsedData\n              if (hadRuntimeError) {\n                Log.warn(FAST_REFRESH_RUNTIME_RELOAD)\n              }\n              if (\n                Array.isArray(dependencyChain) &&\n                typeof dependencyChain[0] === 'string'\n              ) {\n                const cleanedModulePath = dependencyChain[0]\n                  .replace(/^\\[project\\]/, '.')\n                  .replace(/ \\[.*\\] \\(.*\\)$/, '')\n                Log.warn(\n                  `Fast Refresh had to perform a full reload when ${cleanedModulePath} changed. Read more: https://nextjs.org/docs/messages/fast-refresh-reload`\n                )\n              }\n              break\n            case 'client-added-page':\n              // TODO\n              break\n            case 'browser-logs': {\n              if (nextConfig.experimental.browserDebugInfoInTerminal) {\n                await receiveBrowserLogsTurbopack({\n                  entries: parsedData.entries,\n                  router: parsedData.router,\n                  sourceType: parsedData.sourceType,\n                  project,\n                  projectPath,\n                  distDir,\n                  config: nextConfig.experimental.browserDebugInfoInTerminal,\n                })\n              }\n              break\n            }\n            case 'client-file-logs': {\n              // Always log to file regardless of terminal flag\n              await handleClientFileLogs(parsedData.logs)\n              break\n            }\n            case 'ping': {\n              // Handle ping events to keep WebSocket connections alive\n              // No-op - just acknowledge the ping\n              break\n            }\n\n            case 'mcp-error-state-response': {\n              handleErrorStateResponse(\n                parsedData.requestId,\n                parsedData.errorState,\n                parsedData.url\n              )\n              break\n            }\n\n            case 'mcp-page-metadata-response': {\n              handlePageMetadataResponse(\n                parsedData.requestId,\n                parsedData.segmentTrieData,\n                parsedData.url\n              )\n              break\n            }\n\n            default:\n              // Might be a Turbopack message...\n              if (!parsedData.type) {\n                throw new Error(`unrecognized HMR message \"${data}\"`)\n              }\n          }\n\n          // Turbopack messages\n          switch (parsedData.type) {\n            case 'turbopack-subscribe':\n              subscribeToHmrEvents(client, parsedData.path)\n              break\n\n            case 'turbopack-unsubscribe':\n              unsubscribeFromHmrEvents(client, parsedData.path)\n              break\n\n            default:\n              if (!parsedData.event) {\n                throw new Error(`unrecognized Turbopack HMR message \"${data}\"`)\n              }\n          }\n        })\n\n        const turbopackConnectedMessage: TurbopackConnectedMessage = {\n          type: HMR_MESSAGE_SENT_TO_BROWSER.TURBOPACK_CONNECTED,\n          data: { sessionId },\n        }\n        sendToClient(client, turbopackConnectedMessage)\n\n        const errors: CompilationError[] = []\n\n        for (const entryIssues of currentEntryIssues.values()) {\n          for (const issue of entryIssues.values()) {\n            if (issue.severity !== 'warning') {\n              errors.push({\n                message: formatIssue(issue),\n              })\n            } else {\n              printNonFatalIssue(issue)\n            }\n          }\n        }\n\n        if (devIndicatorServerState.disabledUntil < Date.now()) {\n          devIndicatorServerState.disabledUntil = 0\n        }\n\n        ;(async function () {\n          const versionInfo = await getVersionInfoCached()\n          const devToolsConfig = await getDevToolsConfig(distDir)\n\n          const syncMessage: SyncMessage = {\n            type: HMR_MESSAGE_SENT_TO_BROWSER.SYNC,\n            errors,\n            warnings: [],\n            hash: '',\n            versionInfo,\n            debug: {\n              devtoolsFrontendUrl,\n            },\n            devIndicator: devIndicatorServerState,\n            devToolsConfig,\n          }\n\n          sendToClient(client, syncMessage)\n\n          if (requestId) {\n            connectReactDebugChannel(requestId, sendToClient.bind(null, client))\n          }\n        })()\n      })\n    },\n\n    send(action) {\n      const payload = JSON.stringify(action)\n\n      for (const client of [\n        ...clientsWithoutRequestId,\n        ...clientsByRequestId.values(),\n      ]) {\n        client.send(payload)\n      }\n    },\n\n    sendToLegacyClients(action) {\n      const payload = JSON.stringify(action)\n\n      // Clients with a request ID are inferred App Router clients. If Cache\n      // Components is not enabled, we consider those legacy clients. Pages\n      // Router clients are also considered legacy clients. TODO: Maybe mark\n      // clients as App Router / Pages Router clients explicitly, instead of\n      // inferring it from the presence of a request ID.\n\n      if (!nextConfig.cacheComponents) {\n        for (const client of clientsByRequestId.values()) {\n          client.send(payload)\n        }\n      }\n\n      for (const client of clientsWithoutRequestId) {\n        client.send(payload)\n      }\n    },\n\n    setCacheStatus(\n      status: ServerCacheStatus,\n      htmlRequestId: string,\n      requestId: string\n    ): void {\n      // Legacy clients don't have Cache Components.\n      const client = clientsByRequestId.get(htmlRequestId)\n      if (client !== undefined) {\n        sendToClient(client, {\n          type: HMR_MESSAGE_SENT_TO_BROWSER.CACHE_INDICATOR,\n          state: status,\n        })\n      } else {\n        // If the client is not connected, store the status so that we can send it\n        // when the client connects.\n        cacheStatusesByRequestId.set(requestId, status)\n      }\n    },\n\n    setReactDebugChannel(debugChannel, htmlRequestId, requestId) {\n      // Store the debug channel, regardless of whether the client is connected.\n      setReactDebugChannel(requestId, debugChannel)\n\n      // If the client is connected, we can connect the debug channel\n      // immediately. Otherwise, we'll do that when the client connects.\n      const client = clientsByRequestId.get(htmlRequestId)\n\n      if (client) {\n        connectReactDebugChannel(requestId, sendToClient.bind(null, client))\n      }\n    },\n\n    setHmrServerError(_error) {\n      // Not implemented yet.\n    },\n    clearHmrServerError() {\n      // Not implemented yet.\n    },\n    async start() {},\n    async getCompilationErrors(page) {\n      const appEntryKey = getEntryKey('app', 'server', page)\n      const pagesEntryKey = getEntryKey('pages', 'server', page)\n\n      const topLevelIssues = currentTopLevelIssues.values()\n\n      const thisEntryIssues =\n        currentEntryIssues.get(appEntryKey) ??\n        currentEntryIssues.get(pagesEntryKey)\n\n      if (thisEntryIssues !== undefined && thisEntryIssues.size > 0) {\n        // If there is an error related to the requesting page we display it instead of the first error\n        return [...topLevelIssues, ...thisEntryIssues.values()]\n          .map((issue) => {\n            const formattedIssue = formatIssue(issue)\n            if (issue.severity === 'warning') {\n              printNonFatalIssue(issue)\n              return null\n            } else if (isWellKnownError(issue)) {\n              Log.error(formattedIssue)\n            }\n\n            return new Error(formattedIssue)\n          })\n          .filter((error) => error !== null)\n      }\n\n      // Otherwise, return all errors across pages\n      const errors = []\n      for (const issue of topLevelIssues) {\n        if (issue.severity !== 'warning') {\n          errors.push(new Error(formatIssue(issue)))\n        }\n      }\n      for (const entryIssues of currentEntryIssues.values()) {\n        for (const issue of entryIssues.values()) {\n          if (issue.severity !== 'warning') {\n            const message = formatIssue(issue)\n            errors.push(new Error(message))\n          } else {\n            printNonFatalIssue(issue)\n          }\n        }\n      }\n      return errors\n    },\n    async invalidate({\n      // .env files or tsconfig/jsconfig change\n      reloadAfterInvalidation,\n    }) {\n      if (reloadAfterInvalidation) {\n        for (const [key, entrypoint] of currentWrittenEntrypoints) {\n          clearRequireCache(key, entrypoint, { force: true })\n        }\n\n        await clearAllModuleContexts()\n        this.send({\n          type: HMR_MESSAGE_SENT_TO_BROWSER.SERVER_COMPONENT_CHANGES,\n          hash: String(++hmrHash),\n        })\n      }\n    },\n    async buildFallbackError() {\n      // Not implemented yet.\n    },\n    async ensurePage({\n      page: inputPage,\n      // Unused parameters\n      // clientOnly,\n      appPaths,\n      definition,\n      isApp,\n      url: requestUrl,\n    }) {\n      // When there is no route definition this is an internal file not a route the user added.\n      // Middleware and instrumentation are handled in turbpack-utils.ts handleEntrypoints instead.\n      if (!definition) {\n        if (inputPage === '/middleware') return\n        if (inputPage === '/src/middleware') return\n        if (inputPage === '/instrumentation') return\n        if (inputPage === '/src/instrumentation') return\n      }\n\n      return hotReloaderSpan\n        .traceChild('ensure-page', {\n          inputPage,\n        })\n        .traceAsyncFn(async () => {\n          if (BLOCKED_PAGES.includes(inputPage) && inputPage !== '/_error') {\n            return\n          }\n\n          await currentEntriesHandling\n\n          // TODO We shouldn't look into the filesystem again. This should use the information from entrypoints\n          let routeDef: Pick<\n            RouteDefinition,\n            'filename' | 'bundlePath' | 'page'\n          > =\n            definition ??\n            (await findPagePathData(\n              projectPath,\n              inputPage,\n              nextConfig.pageExtensions,\n              opts.pagesDir,\n              opts.appDir,\n              !!nextConfig.experimental.globalNotFound\n            ))\n\n          // If the route is actually an app page route, then we should have access\n          // to the app route definition, and therefore, the appPaths from it.\n          if (!appPaths && definition && isAppPageRouteDefinition(definition)) {\n            appPaths = definition.appPaths\n          }\n\n          let page = routeDef.page\n          if (appPaths) {\n            const normalizedPage = normalizeAppPath(page)\n\n            // filter out paths that are not exact matches (e.g. catchall)\n            const matchingAppPaths = appPaths.filter(\n              (path) => normalizeAppPath(path) === normalizedPage\n            )\n\n            // the last item in the array is the root page, if there are parallel routes\n            page = matchingAppPaths[matchingAppPaths.length - 1]\n          }\n\n          const pathname = definition?.pathname ?? inputPage\n\n          if (page === '/_error') {\n            let finishBuilding = startBuilding(pathname, requestUrl, false)\n            try {\n              await handlePagesErrorRoute({\n                currentEntryIssues,\n                entrypoints: currentEntrypoints,\n                manifestLoader,\n                devRewrites: opts.fsChecker.rewrites,\n                productionRewrites: undefined,\n                logErrors: true,\n                hooks: {\n                  subscribeToChanges,\n                  handleWrittenEndpoint: (id, result, forceDeleteCache) => {\n                    currentWrittenEntrypoints.set(id, result)\n                    assetMapper.setPathsForKey(id, result.clientPaths)\n                    return clearRequireCache(id, result, {\n                      force: forceDeleteCache,\n                    })\n                  },\n                },\n              })\n            } finally {\n              finishBuilding()\n            }\n            return\n          }\n\n          const isInsideAppDir = routeDef.bundlePath.startsWith('app/')\n          const isEntryMetadataRouteFile = isMetadataRouteFile(\n            routeDef.filename.replace(opts.appDir || '', ''),\n            nextConfig.pageExtensions,\n            true\n          )\n          const normalizedAppPage = isEntryMetadataRouteFile\n            ? normalizedPageToTurbopackStructureRoute(\n                page,\n                extname(routeDef.filename)\n              )\n            : page\n\n          const route = isInsideAppDir\n            ? currentEntrypoints.app.get(normalizedAppPage)\n            : currentEntrypoints.page.get(page)\n\n          if (!route) {\n            // TODO: why is this entry missing in turbopack?\n            if (page === '/middleware') return\n            if (page === '/src/middleware') return\n            if (page === '/proxy') return\n            if (page === '/src/proxy') return\n            if (page === '/instrumentation') return\n            if (page === '/src/instrumentation') return\n\n            throw new PageNotFoundError(`route not found ${page}`)\n          }\n\n          // We don't throw on ensureOpts.isApp === true for page-api\n          // since this can happen when app pages make\n          // api requests to page API routes.\n          if (isApp && route.type === 'page') {\n            throw new Error(`mis-matched route type: isApp && page for ${page}`)\n          }\n\n          const finishBuilding = startBuilding(pathname, requestUrl, false)\n          try {\n            await handleRouteType({\n              dev,\n              page,\n              pathname,\n              route,\n              currentEntryIssues,\n              entrypoints: currentEntrypoints,\n              manifestLoader,\n              readyIds,\n              devRewrites: opts.fsChecker.rewrites,\n              productionRewrites: undefined,\n              logErrors: true,\n\n              hooks: {\n                subscribeToChanges,\n                handleWrittenEndpoint: (id, result, forceDeleteCache) => {\n                  currentWrittenEntrypoints.set(id, result)\n                  assetMapper.setPathsForKey(id, result.clientPaths)\n                  return clearRequireCache(id, result, {\n                    force: forceDeleteCache,\n                  })\n                },\n              },\n            })\n          } finally {\n            finishBuilding()\n          }\n        })\n    },\n    close() {\n      // Report MCP telemetry if MCP server is enabled\n      recordMcpTelemetry(opts.telemetry)\n\n      for (const wsClient of [\n        ...clientsWithoutRequestId,\n        ...clientsByRequestId.values(),\n      ]) {\n        // it's okay to not cleanly close these websocket connections, this is dev\n        wsClient.terminate()\n      }\n      clientsWithoutRequestId.clear()\n      clientsByRequestId.clear()\n    },\n  }\n\n  handleEntrypointsSubscription().catch((err) => {\n    console.error(err)\n    process.exit(1)\n  })\n\n  // Write empty manifests\n  await currentEntriesHandling\n  await manifestLoader.writeManifests({\n    devRewrites: opts.fsChecker.rewrites,\n    productionRewrites: undefined,\n    entrypoints: currentEntrypoints,\n  })\n\n  async function handleProjectUpdates() {\n    for await (const updateMessage of project.updateInfoSubscribe(30)) {\n      switch (updateMessage.updateType) {\n        case 'start': {\n          hotReloader.send({ type: HMR_MESSAGE_SENT_TO_BROWSER.BUILDING })\n          break\n        }\n        case 'end': {\n          sendEnqueuedMessages()\n\n          function addToErrorsMap(\n            errorsMap: Map<string, CompilationError>,\n            issueMap: IssuesMap\n          ) {\n            for (const [key, issue] of issueMap) {\n              if (issue.severity === 'warning') continue\n              if (errorsMap.has(key)) continue\n\n              const message = formatIssue(issue)\n\n              errorsMap.set(key, {\n                message,\n                details: issue.detail\n                  ? renderStyledStringToErrorAnsi(issue.detail)\n                  : undefined,\n              })\n            }\n          }\n\n          function addErrors(\n            errorsMap: Map<string, CompilationError>,\n            issues: EntryIssuesMap\n          ) {\n            for (const issueMap of issues.values()) {\n              addToErrorsMap(errorsMap, issueMap)\n            }\n          }\n\n          const errors = new Map<string, CompilationError>()\n          addToErrorsMap(errors, currentTopLevelIssues)\n          addErrors(errors, currentEntryIssues)\n\n          for (const client of [\n            ...clientsWithoutRequestId,\n            ...clientsByRequestId.values(),\n          ]) {\n            const state = clientStates.get(client)\n            if (!state) {\n              continue\n            }\n\n            const clientErrors = new Map(errors)\n            addErrors(clientErrors, state.clientIssues)\n\n            sendToClient(client, {\n              type: HMR_MESSAGE_SENT_TO_BROWSER.BUILT,\n              hash: String(++hmrHash),\n              errors: [...clientErrors.values()],\n              warnings: [],\n            })\n          }\n\n          if (hmrEventHappened) {\n            const time = updateMessage.value.duration\n            const timeMessage =\n              time > 2000 ? `${Math.round(time / 100) / 10}s` : `${time}ms`\n            Log.event(`Compiled in ${timeMessage}`)\n            hmrEventHappened = false\n          }\n          break\n        }\n        default:\n      }\n    }\n  }\n\n  handleProjectUpdates().catch((err) => {\n    console.error(err)\n    process.exit(1)\n  })\n\n  return hotReloader\n}\n"],"names":["createHotReloaderTurbopack","wsServer","ws","Server","noServer","isTestMode","process","env","NEXT_TEST_MODE","__NEXT_TEST_MODE","DEBUG","sessionId","Math","floor","Number","MAX_SAFE_INTEGER","random","rewriteTurbopackSources","projectRoot","sourceMap","section","sections","map","i","sources","length","pathToFileURL","join","replace","toString","getSourceMapFromTurbopack","project","sourceURL","sourceMapJson","getSourceMapSync","err","undefined","payload","JSON","parse","opts","serverFields","distDir","resetFetch","lockfile","nextConfig","dev","buildId","dir","projectPath","loadBindings","require","bindings","log","testMode","hasRewrites","fsChecker","rewrites","afterFiles","beforeFiles","fallback","hotReloaderSpan","trace","version","__NEXT_VERSION","stop","mcpServerEnabled","experimental","mcpServer","fileLogger","getFileLogger","initialize","encryptionKey","generateEncryptionKeyBase64","isBuild","clientRouterFilters","clientRouterFilter","supportedBrowsers","getSupportedBrowsers","currentNodeJsVersion","versions","node","rootPath","turbopack","root","outputFileTracingRoot","turbo","createProject","normalizePath","relative","watch","enable","pollIntervalMs","watchOptions","defineEnv","createDefineEnv","isTurbopack","config","fetchCacheKeyPrefix","middlewareMatchers","previewProps","prerenderManifest","preview","browserslistQuery","noMangling","persistentCaching","isFileSystemCacheEnabledForDev","memoryLimit","turbopackMemoryLimit","isShortSession","backgroundLogCompilationEvents","eventTypes","setBundlerFindSourceMapImplementation","bind","onDevServerCleanup","onExit","unlock","entrypointsSubscription","entrypointsSubscribe","currentWrittenEntrypoints","Map","currentEntrypoints","global","app","document","error","middleware","instrumentation","page","currentTopLevelIssues","currentEntryIssues","manifestLoader","TurbopackManifestLoader","changeSubscriptions","serverPathState","readyIds","Set","currentEntriesHandlingResolve","currentEntriesHandling","Promise","resolve","assetMapper","AssetMapper","clearRequireCache","key","writtenEndpoint","force","path","contentHash","serverPaths","endsWith","localKey","set","hasChange","localHash","get","globalHash","__next__clear_chunk_cache__","p","file","clearModuleContext","deleteCache","buildingIds","startBuilding","id","requestUrl","forceRebuild","has","size","consoleStore","setState","loading","trigger","url","add","finishBuilding","delete","hmrEventHappened","hmrHash","clientsWithoutRequestId","clientsByRequestId","cacheStatusesByRequestId","clientStates","WeakMap","sendToClient","client","message","data","type","createBinaryHmrMessageData","stringify","send","sendEnqueuedMessages","issueMap","values","filter","severity","state","clientIssues","messages","clear","turbopackUpdates","HMR_MESSAGE_SENT_TO_BROWSER","TURBOPACK_MESSAGE","sendEnqueuedMessagesDebounce","debounce","sendHmr","sendTurbopackMessage","diagnostics","issues","push","subscribeToChanges","includeIssues","endpoint","createMessage","onError","side","splitEntryKey","changedPromise","changed","change","processIssues","String","e","unsubscribeFromChanges","subscription","return","subscribeToHmrEvents","getEntryKey","hasEntrypointForKey","subscriptions","hmrEvents","next","reloadMessage","RELOAD_PAGE","close","unsubscribeFromHmrEvents","handleEntrypointsSubscription","entrypoints","processTopLevelIssues","printBuildErrors","routes","existingRoutes","keys","newRoutes","addedRoutes","route","removedRoutes","handleEntrypoints","devRewrites","productionRewrites","logErrors","clients","hooks","handleWrittenEndpoint","result","forceDeleteCache","propagateServerField","hotReloader","DEV_PAGES_MANIFEST_UPDATE","devPagesManifest","ADDED_PAGE","REMOVED_PAGE","mkdir","recursive","writeFile","middlewares","getOverlayMiddleware","isSrcDir","getSourceMapMiddleware","getNextErrorFeedbackMiddleware","telemetry","getDevOverlayFontMiddleware","getDisableDevIndicatorMiddleware","getRestartDevServerMiddleware","turbopackProject","devToolsConfigMiddleware","sendUpdateSignal","DEVTOOLS_CONFIG","getMcpMiddleware","sendHmrMessage","getActiveConnectionCount","getDevServerUrl","__NEXT_PRIVATE_ORIGIN","setStackFrameResolver","request","getOriginalStackFrames","isServer","isEdgeServer","isAppDirectory","frames","versionInfoCached","getVersionInfoCached","getVersionInfo","devtoolsFrontendUrl","nodeDebugType","getNodeDebugType","debugPort","debugInfo","debugInfoList","fetch","then","res","json","activeWebpackConfigs","serverStats","edgeServerStats","run","req","_parsedUrl","startsWith","params","matchNextPageBundleRequest","decodedPagePath","param","decodeURIComponent","denormalizedPagePath","denormalizePagePath","ensurePage","clientOnly","definition","catch","console","calledNext","finished","onHMR","socket","head","onUpgrade","handleUpgrade","requestId","URL","searchParams","enableCacheComponents","cacheComponents","isLegacyClient","cacheStatus","CACHE_INDICATOR","on","deleteReactDebugChannel","addEventListener","parsedData","event","manualTraceChild","spanName","msToNs","startTime","endTime","attributes","updatedModules","isPageHidden","hadRuntimeError","dependencyChain","Log","warn","FAST_REFRESH_RUNTIME_RELOAD","Array","isArray","cleanedModulePath","browserDebugInfoInTerminal","receiveBrowserLogsTurbopack","entries","router","sourceType","handleClientFileLogs","logs","handleErrorStateResponse","errorState","handlePageMetadataResponse","segmentTrieData","Error","turbopackConnectedMessage","TURBOPACK_CONNECTED","errors","entryIssues","issue","formatIssue","printNonFatalIssue","devIndicatorServerState","disabledUntil","Date","now","versionInfo","devToolsConfig","getDevToolsConfig","syncMessage","SYNC","warnings","hash","debug","devIndicator","connectReactDebugChannel","action","sendToLegacyClients","setCacheStatus","status","htmlRequestId","setReactDebugChannel","debugChannel","setHmrServerError","_error","clearHmrServerError","start","getCompilationErrors","appEntryKey","pagesEntryKey","topLevelIssues","thisEntryIssues","formattedIssue","isWellKnownError","invalidate","reloadAfterInvalidation","entrypoint","clearAllModuleContexts","SERVER_COMPONENT_CHANGES","buildFallbackError","inputPage","appPaths","isApp","traceChild","traceAsyncFn","BLOCKED_PAGES","includes","routeDef","findPagePathData","pageExtensions","pagesDir","appDir","globalNotFound","isAppPageRouteDefinition","normalizedPage","normalizeAppPath","matchingAppPaths","pathname","handlePagesErrorRoute","setPathsForKey","clientPaths","isInsideAppDir","bundlePath","isEntryMetadataRouteFile","isMetadataRouteFile","filename","normalizedAppPage","normalizedPageToTurbopackStructureRoute","extname","PageNotFoundError","handleRouteType","recordMcpTelemetry","wsClient","terminate","exit","writeManifests","handleProjectUpdates","updateMessage","updateInfoSubscribe","updateType","BUILDING","addToErrorsMap","errorsMap","details","detail","renderStyledStringToErrorAnsi","addErrors","clientErrors","BUILT","time","value","duration","timeMessage","round"],"mappings":"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","ignoreList":[0]}
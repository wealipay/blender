{"version":3,"sources":["../../../src/server/dev/messages.ts"],"sourcesContent":["import { InvariantError } from '../../shared/lib/invariant-error'\nimport {\n  HMR_MESSAGE_SENT_TO_BROWSER,\n  type BinaryHmrMessageSentToBrowser,\n} from './hot-reloader-types'\n\nexport const FAST_REFRESH_RUNTIME_RELOAD =\n  'Fast Refresh had to perform a full reload due to a runtime error.'\n\nconst textEncoder = new TextEncoder()\n\nexport function createBinaryHmrMessageData(\n  message: BinaryHmrMessageSentToBrowser\n): Uint8Array {\n  switch (message.type) {\n    case HMR_MESSAGE_SENT_TO_BROWSER.REACT_DEBUG_CHUNK: {\n      const { requestId, chunk } = message\n      const requestIdBytes = textEncoder.encode(requestId)\n      const requestIdLength = requestIdBytes.length\n\n      if (requestIdLength > 255) {\n        throw new InvariantError(\n          'Request ID is too long for the binary HMR message.'\n        )\n      }\n\n      const chunkLength = chunk ? chunk.length : 0\n      const totalLength = 2 + requestIdLength + chunkLength\n      const data = new Uint8Array(totalLength)\n      const view = new DataView(data.buffer)\n\n      view.setUint8(0, HMR_MESSAGE_SENT_TO_BROWSER.REACT_DEBUG_CHUNK)\n      view.setUint8(1, requestIdLength)\n      textEncoder.encodeInto(requestId, data.subarray(2, 2 + requestIdLength))\n\n      if (chunk) {\n        data.set(chunk, 2 + requestIdLength)\n      }\n\n      return data\n    }\n    default: {\n      throw new InvariantError(\n        `Invalid binary HMR message of type ${message.type}`\n      )\n    }\n  }\n}\n"],"names":["FAST_REFRESH_RUNTIME_RELOAD","createBinaryHmrMessageData","textEncoder","TextEncoder","message","type","HMR_MESSAGE_SENT_TO_BROWSER","REACT_DEBUG_CHUNK","requestId","chunk","requestIdBytes","encode","requestIdLength","length","InvariantError","chunkLength","totalLength","data","Uint8Array","view","DataView","buffer","setUint8","encodeInto","subarray","set"],"mappings":";;;;;;;;;;;;;;;IAMaA,2BAA2B;eAA3BA;;IAKGC,0BAA0B;eAA1BA;;;gCAXe;kCAIxB;AAEA,MAAMD,8BACX;AAEF,MAAME,cAAc,IAAIC;AAEjB,SAASF,2BACdG,OAAsC;IAEtC,OAAQA,QAAQC,IAAI;QAClB,KAAKC,6CAA2B,CAACC,iBAAiB;YAAE;gBAClD,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAE,GAAGL;gBAC7B,MAAMM,iBAAiBR,YAAYS,MAAM,CAACH;gBAC1C,MAAMI,kBAAkBF,eAAeG,MAAM;gBAE7C,IAAID,kBAAkB,KAAK;oBACzB,MAAM,qBAEL,CAFK,IAAIE,8BAAc,CACtB,uDADI,qBAAA;+BAAA;oCAAA;sCAAA;oBAEN;gBACF;gBAEA,MAAMC,cAAcN,QAAQA,MAAMI,MAAM,GAAG;gBAC3C,MAAMG,cAAc,IAAIJ,kBAAkBG;gBAC1C,MAAME,OAAO,IAAIC,WAAWF;gBAC5B,MAAMG,OAAO,IAAIC,SAASH,KAAKI,MAAM;gBAErCF,KAAKG,QAAQ,CAAC,GAAGhB,6CAA2B,CAACC,iBAAiB;gBAC9DY,KAAKG,QAAQ,CAAC,GAAGV;gBACjBV,YAAYqB,UAAU,CAACf,WAAWS,KAAKO,QAAQ,CAAC,GAAG,IAAIZ;gBAEvD,IAAIH,OAAO;oBACTQ,KAAKQ,GAAG,CAAChB,OAAO,IAAIG;gBACtB;gBAEA,OAAOK;YACT;QACA;YAAS;gBACP,MAAM,qBAEL,CAFK,IAAIH,8BAAc,CACtB,CAAC,mCAAmC,EAAEV,QAAQC,IAAI,EAAE,GADhD,qBAAA;2BAAA;gCAAA;kCAAA;gBAEN;YACF;IACF;AACF","ignoreList":[0]}
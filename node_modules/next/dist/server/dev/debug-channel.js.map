{"version":3,"sources":["../../../src/server/dev/debug-channel.ts"],"sourcesContent":["import { createBufferedTransformStream } from '../stream-utils/node-web-streams-helper'\nimport {\n  HMR_MESSAGE_SENT_TO_BROWSER,\n  type HmrMessageSentToBrowser,\n} from './hot-reloader-types'\n\nexport interface ReactDebugChannelForBrowser {\n  readonly readable: ReadableStream<Uint8Array>\n  // Might also get a writable stream as return channel in the future.\n}\n\nconst reactDebugChannelsByRequestId = new Map<\n  string,\n  ReactDebugChannelForBrowser\n>()\n\nexport function connectReactDebugChannel(\n  requestId: string,\n  sendToClient: (message: HmrMessageSentToBrowser) => void\n) {\n  const debugChannel = reactDebugChannelsByRequestId.get(requestId)\n\n  if (!debugChannel) {\n    return\n  }\n\n  const reader = debugChannel.readable\n    .pipeThrough(\n      // We're sending the chunks in batches to reduce overhead in the browser.\n      createBufferedTransformStream({ maxBufferByteLength: 128 * 1024 })\n    )\n    .getReader()\n\n  const stop = () => {\n    sendToClient({\n      type: HMR_MESSAGE_SENT_TO_BROWSER.REACT_DEBUG_CHUNK,\n      requestId,\n      chunk: null,\n    })\n\n    reactDebugChannelsByRequestId.delete(requestId)\n  }\n\n  const onError = (err: unknown) => {\n    console.error(new Error('React debug channel stream error', { cause: err }))\n    stop()\n  }\n\n  const progress = (entry: ReadableStreamReadResult<Uint8Array>) => {\n    if (entry.done) {\n      stop()\n    } else {\n      sendToClient({\n        type: HMR_MESSAGE_SENT_TO_BROWSER.REACT_DEBUG_CHUNK,\n        requestId,\n        chunk: entry.value,\n      })\n\n      reader.read().then(progress, onError)\n    }\n  }\n\n  reader.read().then(progress, onError)\n}\n\nexport function setReactDebugChannel(\n  requestId: string,\n  debugChannel: ReactDebugChannelForBrowser\n) {\n  reactDebugChannelsByRequestId.set(requestId, debugChannel)\n}\n\nexport function deleteReactDebugChannel(requestId: string) {\n  reactDebugChannelsByRequestId.delete(requestId)\n}\n"],"names":["connectReactDebugChannel","deleteReactDebugChannel","setReactDebugChannel","reactDebugChannelsByRequestId","Map","requestId","sendToClient","debugChannel","get","reader","readable","pipeThrough","createBufferedTransformStream","maxBufferByteLength","getReader","stop","type","HMR_MESSAGE_SENT_TO_BROWSER","REACT_DEBUG_CHUNK","chunk","delete","onError","err","console","error","Error","cause","progress","entry","done","value","read","then","set"],"mappings":";;;;;;;;;;;;;;;;IAgBgBA,wBAAwB;eAAxBA;;IAwDAC,uBAAuB;eAAvBA;;IAPAC,oBAAoB;eAApBA;;;sCAjE8B;kCAIvC;AAOP,MAAMC,gCAAgC,IAAIC;AAKnC,SAASJ,yBACdK,SAAiB,EACjBC,YAAwD;IAExD,MAAMC,eAAeJ,8BAA8BK,GAAG,CAACH;IAEvD,IAAI,CAACE,cAAc;QACjB;IACF;IAEA,MAAME,SAASF,aAAaG,QAAQ,CACjCC,WAAW,CACV,yEAAyE;IACzEC,IAAAA,mDAA6B,EAAC;QAAEC,qBAAqB,MAAM;IAAK,IAEjEC,SAAS;IAEZ,MAAMC,OAAO;QACXT,aAAa;YACXU,MAAMC,6CAA2B,CAACC,iBAAiB;YACnDb;YACAc,OAAO;QACT;QAEAhB,8BAA8BiB,MAAM,CAACf;IACvC;IAEA,MAAMgB,UAAU,CAACC;QACfC,QAAQC,KAAK,CAAC,qBAA6D,CAA7D,IAAIC,MAAM,oCAAoC;YAAEC,OAAOJ;QAAI,IAA3D,qBAAA;mBAAA;wBAAA;0BAAA;QAA4D;QAC1EP;IACF;IAEA,MAAMY,WAAW,CAACC;QAChB,IAAIA,MAAMC,IAAI,EAAE;YACdd;QACF,OAAO;YACLT,aAAa;gBACXU,MAAMC,6CAA2B,CAACC,iBAAiB;gBACnDb;gBACAc,OAAOS,MAAME,KAAK;YACpB;YAEArB,OAAOsB,IAAI,GAAGC,IAAI,CAACL,UAAUN;QAC/B;IACF;IAEAZ,OAAOsB,IAAI,GAAGC,IAAI,CAACL,UAAUN;AAC/B;AAEO,SAASnB,qBACdG,SAAiB,EACjBE,YAAyC;IAEzCJ,8BAA8B8B,GAAG,CAAC5B,WAAWE;AAC/C;AAEO,SAASN,wBAAwBI,SAAiB;IACvDF,8BAA8BiB,MAAM,CAACf;AACvC","ignoreList":[0]}
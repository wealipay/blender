{"version":3,"sources":["../../src/server/base-server.ts"],"sourcesContent":["import type { __ApiPreviewProps } from './api-utils'\nimport type { LoadComponentsReturnType } from './load-components'\nimport type { MiddlewareRouteMatch } from '../shared/lib/router/utils/middleware-route-matcher'\nimport type { Params } from './request/params'\nimport type { NextConfig, NextConfigComplete } from './config-shared'\nimport type {\n  NextParsedUrlQuery,\n  NextUrlWithParsedQuery,\n  RequestMeta,\n} from './request-meta'\nimport type { ParsedUrlQuery } from 'querystring'\nimport type { RenderOptsPartial as PagesRenderOptsPartial } from './render'\nimport type {\n  RenderOptsPartial as AppRenderOptsPartial,\n  ServerOnInstrumentationRequestError,\n} from './app-render/types'\nimport type {\n  ServerComponentsHmrCache,\n  ResponseCacheBase,\n} from './response-cache'\nimport type { UrlWithParsedQuery } from 'url'\nimport {\n  NormalizeError,\n  DecodeError,\n  normalizeRepeatedSlashes,\n  MissingStaticPage,\n} from '../shared/lib/utils'\nimport type { PagesManifest } from '../build/webpack/plugins/pages-manifest-plugin'\nimport type { BaseNextRequest, BaseNextResponse } from './base-http'\nimport type {\n  ManifestRewriteRoute,\n  ManifestRoute,\n  PrerenderManifest,\n} from '../build'\nimport type { ClientReferenceManifest } from '../build/webpack/plugins/flight-manifest-plugin'\nimport type { NextFontManifest } from '../build/webpack/plugins/next-font-manifest-plugin'\nimport type { PagesAPIRouteMatch } from './route-matches/pages-api-route-match'\nimport type {\n  Server as HTTPServer,\n  IncomingMessage,\n  ServerResponse as HTTPServerResponse,\n} from 'http'\nimport type { ProxyMatcher } from '../build/analysis/get-page-static-info'\nimport type { TLSSocket } from 'tls'\nimport type { PathnameNormalizer } from './normalizers/request/pathname-normalizer'\nimport type { InstrumentationModule } from './instrumentation/types'\n\nimport * as path from 'path'\nimport { format as formatUrl, parse as parseUrl } from 'url'\nimport { formatHostname } from './lib/format-hostname'\nimport {\n  APP_PATHS_MANIFEST,\n  NEXT_BUILTIN_DOCUMENT,\n  PAGES_MANIFEST,\n  STATIC_STATUS_PAGES,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n} from '../shared/lib/constants'\nimport { isDynamicRoute } from '../shared/lib/router/utils'\nimport { execOnce } from '../shared/lib/utils'\nimport { isBlockedPage } from './utils'\nimport { getBotType, isBot } from '../shared/lib/router/utils/is-bot'\nimport RenderResult from './render-result'\nimport { removeTrailingSlash } from '../shared/lib/router/utils/remove-trailing-slash'\nimport { denormalizePagePath } from '../shared/lib/page-path/denormalize-page-path'\nimport * as Log from '../build/output/log'\nimport { getServerUtils } from './server-utils'\nimport isError, { getProperError } from '../lib/is-error'\nimport {\n  addRequestMeta,\n  getRequestMeta,\n  removeRequestMeta,\n  setRequestMeta,\n} from './request-meta'\nimport { removePathPrefix } from '../shared/lib/router/utils/remove-path-prefix'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\nimport { getHostname } from '../shared/lib/get-hostname'\nimport { parseUrl as parseUrlUtil } from '../shared/lib/router/utils/parse-url'\nimport { getNextPathnameInfo } from '../shared/lib/router/utils/get-next-pathname-info'\nimport {\n  RSC_HEADER,\n  NEXT_RSC_UNION_QUERY,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n  NEXT_URL,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n} from '../client/components/app-router-headers'\nimport type {\n  MatchOptions,\n  RouteMatcherManager,\n} from './route-matcher-managers/route-matcher-manager'\nimport { LocaleRouteNormalizer } from './normalizers/locale-route-normalizer'\nimport { DefaultRouteMatcherManager } from './route-matcher-managers/default-route-matcher-manager'\nimport { AppPageRouteMatcherProvider } from './route-matcher-providers/app-page-route-matcher-provider'\nimport { AppRouteRouteMatcherProvider } from './route-matcher-providers/app-route-route-matcher-provider'\nimport { PagesAPIRouteMatcherProvider } from './route-matcher-providers/pages-api-route-matcher-provider'\nimport { PagesRouteMatcherProvider } from './route-matcher-providers/pages-route-matcher-provider'\nimport { ServerManifestLoader } from './route-matcher-providers/helpers/manifest-loaders/server-manifest-loader'\nimport {\n  getTracer,\n  isBubbledError,\n  SpanKind,\n  SpanStatusCode,\n} from './lib/trace/tracer'\nimport { BaseServerSpan } from './lib/trace/constants'\nimport { I18NProvider } from './lib/i18n-provider'\nimport { sendResponse } from './send-response'\nimport { normalizeNextQueryParam } from './web/utils'\nimport {\n  HTML_CONTENT_TYPE_HEADER,\n  JSON_CONTENT_TYPE_HEADER,\n  MATCHED_PATH_HEADER,\n  NEXT_RESUME_HEADER,\n} from '../lib/constants'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport { matchNextDataPathname } from './lib/match-next-data-pathname'\nimport getRouteFromAssetPath from '../shared/lib/router/utils/get-route-from-asset-path'\nimport { RSCPathnameNormalizer } from './normalizers/request/rsc'\nimport { stripFlightHeaders } from './app-render/strip-flight-headers'\nimport {\n  isAppPageRouteModule,\n  isAppRouteRouteModule,\n} from './route-modules/checks'\nimport { PrefetchRSCPathnameNormalizer } from './normalizers/request/prefetch-rsc'\nimport { NextDataPathnameNormalizer } from './normalizers/request/next-data'\nimport { getIsPossibleServerAction } from './lib/server-action-request-meta'\nimport { isInterceptionRouteAppPath } from '../shared/lib/router/utils/interception-routes'\nimport { toRoute } from './lib/to-route'\nimport type { DeepReadonly } from '../shared/lib/deep-readonly'\nimport { isNodeNextRequest, isNodeNextResponse } from './base-http/helpers'\nimport { patchSetHeaderWithCookieSupport } from './lib/patch-set-header'\nimport { checkIsAppPPREnabled } from './lib/experimental/ppr'\nimport {\n  getBuiltinRequestContext,\n  type WaitUntil,\n} from './after/builtin-request-context'\nimport { NextRequestHint } from './web/adapter'\nimport type { RouteModule } from './route-modules/route-module'\nimport { type FallbackMode, parseFallbackField } from '../lib/fallback'\nimport { SegmentPrefixRSCPathnameNormalizer } from './normalizers/request/segment-prefix-rsc'\nimport { shouldServeStreamingMetadata } from './lib/streaming-metadata'\nimport { decodeQueryPathParameter } from './lib/decode-query-path-parameter'\nimport { NoFallbackError } from '../shared/lib/no-fallback-error.external'\nimport { fixMojibake } from './lib/fix-mojibake'\nimport { computeCacheBustingSearchParam } from '../shared/lib/router/utils/cache-busting-search-param'\nimport { setCacheBustingSearchParamWithHash } from '../client/components/router-reducer/set-cache-busting-search-param'\nimport type { CacheControl } from './lib/cache-control'\nimport type { PrerenderedRoute } from '../build/static-paths/types'\nimport { createOpaqueFallbackRouteParams } from './request/fallback-params'\nimport { RouteKind } from './route-kind'\n\nexport type FindComponentsResult = {\n  components: LoadComponentsReturnType\n  query: NextParsedUrlQuery\n}\n\nexport interface MiddlewareRoutingItem {\n  page: string\n  match: MiddlewareRouteMatch\n  matchers?: ProxyMatcher[]\n}\n\nexport type RouteHandler<\n  ServerRequest extends BaseNextRequest = BaseNextRequest,\n  ServerResponse extends BaseNextResponse = BaseNextResponse,\n> = (\n  req: ServerRequest,\n  res: ServerResponse,\n  parsedUrl: NextUrlWithParsedQuery\n) => PromiseLike<boolean> | boolean\n\n/**\n * The normalized route manifest is the same as the route manifest, but with\n * the rewrites normalized to the object shape that the router expects.\n */\nexport type NormalizedRouteManifest = {\n  readonly dynamicRoutes: ReadonlyArray<ManifestRoute>\n  readonly rewrites: {\n    readonly beforeFiles: ReadonlyArray<ManifestRewriteRoute>\n    readonly afterFiles: ReadonlyArray<ManifestRewriteRoute>\n    readonly fallback: ReadonlyArray<ManifestRewriteRoute>\n  }\n}\n\nexport interface Options {\n  /**\n   * Object containing the configuration next.config.js\n   */\n  conf: NextConfig\n  /**\n   * Set to false when the server was created by Next.js\n   */\n  customServer?: boolean\n  /**\n   * Tells if Next.js is running in dev mode\n   */\n  dev?: boolean\n  /**\n   * Enables the experimental testing mode.\n   */\n  experimentalTestProxy?: boolean\n\n  /**\n   * Whether or not the dev server is running in experimental HTTPS mode\n   */\n  experimentalHttpsServer?: boolean\n  /**\n   * Where the Next project is located\n   */\n  dir?: string\n  /**\n   * Tells if Next.js is at the platform-level\n   */\n  minimalMode?: boolean\n  /**\n   * Hide error messages containing server information\n   */\n  quiet?: boolean\n  /**\n   * The hostname the server is running behind\n   */\n  hostname?: string\n  /**\n   * The port the server is running behind\n   */\n  port?: number\n  /**\n   * The HTTP Server that Next.js is running behind\n   */\n  httpServer?: HTTPServer\n}\n\nexport type RenderOpts = PagesRenderOptsPartial & AppRenderOptsPartial\n\nexport type LoadedRenderOpts = RenderOpts &\n  LoadComponentsReturnType &\n  RequestLifecycleOpts\n\nexport type RequestLifecycleOpts = {\n  waitUntil: ((promise: Promise<any>) => void) | undefined\n  onClose: (callback: () => void) => void\n  onAfterTaskError: ((error: unknown) => void) | undefined\n}\n\ntype BaseRenderOpts = RenderOpts & {\n  poweredByHeader: boolean\n  generateEtags: boolean\n  previewProps: __ApiPreviewProps\n}\n\n/**\n * The public interface for rendering with the server programmatically. This\n * would typically only allow the base request or response to extend it, but\n * because this can be programmatically accessed, we assume that it could also\n * be the base Node.js request and response types.\n */\nexport interface BaseRequestHandler<\n  ServerRequest extends BaseNextRequest | IncomingMessage = BaseNextRequest,\n  ServerResponse extends\n    | BaseNextResponse\n    | HTTPServerResponse = BaseNextResponse,\n> {\n  (\n    req: ServerRequest,\n    res: ServerResponse,\n    parsedUrl?: NextUrlWithParsedQuery | undefined\n  ): Promise<void> | void\n}\n\nexport type RequestContext<\n  ServerRequest extends BaseNextRequest = BaseNextRequest,\n  ServerResponse extends BaseNextResponse = BaseNextResponse,\n> = {\n  req: ServerRequest\n  res: ServerResponse\n  pathname: string\n  query: NextParsedUrlQuery\n  renderOpts: RenderOpts\n}\n\n// Internal wrapper around build errors at development\n// time, to prevent us from propagating or logging them\nexport class WrappedBuildError extends Error {\n  innerError: Error\n\n  constructor(innerError: Error) {\n    super()\n    this.innerError = innerError\n  }\n}\n\ntype ResponsePayload = {\n  body: RenderResult\n  cacheControl?: CacheControl\n}\n\nexport type NextEnabledDirectories = {\n  readonly pages: boolean\n  readonly app: boolean\n}\n\nexport default abstract class Server<\n  ServerOptions extends Options = Options,\n  ServerRequest extends BaseNextRequest = BaseNextRequest,\n  ServerResponse extends BaseNextResponse = BaseNextResponse,\n> {\n  public readonly hostname?: string\n  public readonly fetchHostname?: string\n  public readonly port?: number\n  protected readonly dir: string\n  protected readonly quiet: boolean\n  protected readonly nextConfig: NextConfigComplete\n  protected readonly distDir: string\n  protected readonly publicDir: string\n  protected readonly hasStaticDir: boolean\n  protected readonly pagesManifest?: PagesManifest\n  protected readonly appPathsManifest?: PagesManifest\n  protected readonly buildId: string\n  protected readonly minimalMode: boolean\n  protected readonly renderOpts: BaseRenderOpts\n  protected readonly serverOptions: Readonly<ServerOptions>\n  protected readonly appPathRoutes?: Record<string, string[]>\n  protected readonly clientReferenceManifest?: DeepReadonly<ClientReferenceManifest>\n  protected interceptionRoutePatterns: RegExp[]\n  protected nextFontManifest?: DeepReadonly<NextFontManifest>\n  protected instrumentation: InstrumentationModule | undefined\n  private readonly responseCache: ResponseCacheBase\n\n  protected abstract getPublicDir(): string\n  protected abstract getHasStaticDir(): boolean\n  protected abstract getPagesManifest(): PagesManifest | undefined\n  protected abstract getAppPathsManifest(): PagesManifest | undefined\n  protected abstract getBuildId(): string\n  protected abstract getinterceptionRoutePatterns(): RegExp[]\n\n  protected readonly enabledDirectories: NextEnabledDirectories\n  protected abstract getEnabledDirectories(dev: boolean): NextEnabledDirectories\n\n  protected readonly experimentalTestProxy?: boolean\n\n  protected abstract findPageComponents(params: {\n    locale: string | undefined\n    page: string\n    query: NextParsedUrlQuery\n    params: Params\n    isAppPath: boolean\n    // The following parameters are used in the development server's\n    // implementation.\n    sriEnabled?: boolean\n    appPaths?: ReadonlyArray<string> | null\n    shouldEnsure?: boolean\n    url?: string\n  }): Promise<FindComponentsResult | null>\n  protected abstract getPrerenderManifest(): DeepReadonly<PrerenderManifest>\n  protected abstract getNextFontManifest():\n    | DeepReadonly<NextFontManifest>\n    | undefined\n  protected abstract attachRequestMeta(\n    req: ServerRequest,\n    parsedUrl: NextUrlWithParsedQuery\n  ): void\n  protected abstract hasPage(pathname: string): Promise<boolean>\n\n  protected abstract sendRenderResult(\n    req: ServerRequest,\n    res: ServerResponse,\n    options: {\n      result: RenderResult\n      generateEtags: boolean\n      poweredByHeader: boolean\n      cacheControl: CacheControl | undefined\n    }\n  ): Promise<void>\n\n  protected abstract runApi(\n    req: ServerRequest,\n    res: ServerResponse,\n    query: ParsedUrlQuery,\n    match: PagesAPIRouteMatch\n  ): Promise<boolean>\n\n  protected abstract renderHTML(\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: NextParsedUrlQuery,\n    renderOpts: LoadedRenderOpts\n  ): Promise<RenderResult>\n\n  protected abstract getIncrementalCache(options: {\n    requestHeaders: Record<string, undefined | string | string[]>\n  }): Promise<import('./lib/incremental-cache').IncrementalCache>\n\n  protected abstract getResponseCache(options: {\n    dev: boolean\n  }): ResponseCacheBase\n\n  protected getServerComponentsHmrCache():\n    | ServerComponentsHmrCache\n    | undefined {\n    return this.nextConfig.experimental.serverComponentsHmrCache\n      ? (globalThis as any).__serverComponentsHmrCache\n      : undefined\n  }\n\n  protected abstract loadEnvConfig(params: {\n    dev: boolean\n    forceReload: boolean\n  }): void\n\n  // TODO-APP: (wyattjoh): Make protected again. Used for turbopack in route-resolver.ts right now.\n  public readonly matchers: RouteMatcherManager\n  protected readonly i18nProvider?: I18NProvider\n  protected readonly localeNormalizer?: LocaleRouteNormalizer\n\n  protected readonly normalizers: {\n    readonly rsc: RSCPathnameNormalizer | undefined\n    readonly prefetchRSC: PrefetchRSCPathnameNormalizer | undefined\n    readonly segmentPrefetchRSC: SegmentPrefixRSCPathnameNormalizer | undefined\n    readonly data: NextDataPathnameNormalizer | undefined\n  }\n\n  private readonly isAppPPREnabled: boolean\n  private readonly isAppSegmentPrefetchEnabled: boolean\n\n  /**\n   * This is used to persist cache scopes across\n   * prefetch -> full route requests for cache components\n   * it's only fully used in dev\n   */\n\n  public constructor(options: ServerOptions) {\n    const {\n      dir = '.',\n      quiet = false,\n      conf,\n      dev = false,\n      minimalMode = false,\n      hostname,\n      port,\n      experimentalTestProxy,\n    } = options\n\n    this.experimentalTestProxy = experimentalTestProxy\n    this.serverOptions = options\n\n    this.dir = path.resolve(/* turbopackIgnore: true */ dir)\n\n    this.quiet = quiet\n    this.loadEnvConfig({ dev, forceReload: false })\n\n    // TODO: should conf be normalized to prevent missing\n    // values from causing issues as this can be user provided\n    this.nextConfig = conf as NextConfigComplete\n    this.hostname = hostname\n    if (this.hostname) {\n      // we format the hostname so that it can be fetched\n      this.fetchHostname = formatHostname(this.hostname)\n    }\n    this.port = port\n    this.distDir = path.join(\n      /* turbopackIgnore: true */ this.dir,\n      this.nextConfig.distDir\n    )\n    this.publicDir = this.getPublicDir()\n    this.hasStaticDir = !minimalMode && this.getHasStaticDir()\n\n    this.i18nProvider = this.nextConfig.i18n?.locales\n      ? new I18NProvider(this.nextConfig.i18n)\n      : undefined\n\n    // Configure the locale normalizer, it's used for routes inside `pages/`.\n    this.localeNormalizer = this.i18nProvider\n      ? new LocaleRouteNormalizer(this.i18nProvider)\n      : undefined\n\n    const { assetPrefix, generateEtags } = this.nextConfig\n\n    this.buildId = this.getBuildId()\n    // this is a hack to avoid Webpack knowing this is equal to this.minimalMode\n    // because we replace this.minimalMode to true in production bundles.\n    const minimalModeKey = 'minimalMode'\n    this[minimalModeKey] =\n      minimalMode || !!process.env.NEXT_PRIVATE_MINIMAL_MODE\n\n    this.enabledDirectories = this.getEnabledDirectories(dev)\n\n    this.isAppPPREnabled =\n      this.enabledDirectories.app &&\n      checkIsAppPPREnabled(this.nextConfig.experimental.ppr)\n\n    this.isAppSegmentPrefetchEnabled =\n      this.enabledDirectories.app &&\n      this.nextConfig.experimental.clientSegmentCache === true\n\n    this.normalizers = {\n      // We should normalize the pathname from the RSC prefix only in minimal\n      // mode as otherwise that route is not exposed external to the server as\n      // we instead only rely on the headers.\n      rsc:\n        this.enabledDirectories.app && this.minimalMode\n          ? new RSCPathnameNormalizer()\n          : undefined,\n      prefetchRSC:\n        this.isAppPPREnabled && this.minimalMode\n          ? new PrefetchRSCPathnameNormalizer()\n          : undefined,\n      segmentPrefetchRSC:\n        this.isAppSegmentPrefetchEnabled && this.minimalMode\n          ? new SegmentPrefixRSCPathnameNormalizer()\n          : undefined,\n      data: this.enabledDirectories.pages\n        ? new NextDataPathnameNormalizer(this.buildId)\n        : undefined,\n    }\n\n    this.nextFontManifest = this.getNextFontManifest()\n    process.env.NEXT_DEPLOYMENT_ID = this.nextConfig.deploymentId || ''\n\n    this.renderOpts = {\n      dir: this.dir,\n      supportsDynamicResponse: true,\n      trailingSlash: this.nextConfig.trailingSlash,\n      deploymentId: this.nextConfig.deploymentId,\n      poweredByHeader: this.nextConfig.poweredByHeader,\n      generateEtags,\n      previewProps: this.getPrerenderManifest().preview,\n      basePath: this.nextConfig.basePath,\n      images: this.nextConfig.images,\n      optimizeCss: this.nextConfig.experimental.optimizeCss,\n      nextConfigOutput: this.nextConfig.output,\n      nextScriptWorkers: this.nextConfig.experimental.nextScriptWorkers,\n      disableOptimizedLoading:\n        this.nextConfig.experimental.disableOptimizedLoading,\n      domainLocales: this.nextConfig.i18n?.domains,\n      distDir: this.distDir,\n      serverComponents: this.enabledDirectories.app,\n      cacheLifeProfiles: this.nextConfig.cacheLife,\n      enableTainting: this.nextConfig.experimental.taint,\n      crossOrigin: this.nextConfig.crossOrigin\n        ? this.nextConfig.crossOrigin\n        : undefined,\n      largePageDataBytes: this.nextConfig.experimental.largePageDataBytes,\n\n      isExperimentalCompile: this.nextConfig.experimental.isExperimentalCompile,\n      // `htmlLimitedBots` is passed to server as serialized config in string format\n      htmlLimitedBots: this.nextConfig.htmlLimitedBots,\n      cacheComponents: this.nextConfig.cacheComponents ?? false,\n      experimental: {\n        expireTime: this.nextConfig.expireTime,\n        staleTimes: this.nextConfig.experimental.staleTimes,\n        clientTraceMetadata: this.nextConfig.experimental.clientTraceMetadata,\n        clientSegmentCache:\n          this.nextConfig.experimental.clientSegmentCache === 'client-only'\n            ? 'client-only'\n            : Boolean(this.nextConfig.experimental.clientSegmentCache),\n        clientParamParsingOrigins:\n          this.nextConfig.experimental.clientParamParsingOrigins,\n        dynamicOnHover: this.nextConfig.experimental.dynamicOnHover ?? false,\n        inlineCss: this.nextConfig.experimental.inlineCss ?? false,\n        authInterrupts: !!this.nextConfig.experimental.authInterrupts,\n      },\n      onInstrumentationRequestError:\n        this.instrumentationOnRequestError.bind(this),\n      reactMaxHeadersLength: this.nextConfig.reactMaxHeadersLength,\n    }\n\n    this.pagesManifest = this.getPagesManifest()\n    this.appPathsManifest = this.getAppPathsManifest()\n    this.appPathRoutes = this.getAppPathRoutes()\n    this.interceptionRoutePatterns = this.getinterceptionRoutePatterns()\n\n    // Configure the routes.\n    this.matchers = this.getRouteMatchers()\n\n    // Start route compilation. We don't wait for the routes to finish loading\n    // because we use the `waitTillReady` promise below in `handleRequest` to\n    // wait. Also we can't `await` in the constructor.\n    void this.matchers.reload()\n\n    this.setAssetPrefix(assetPrefix)\n    this.responseCache = this.getResponseCache({ dev })\n  }\n\n  protected reloadMatchers() {\n    return this.matchers.reload()\n  }\n\n  private handleRSCRequest: RouteHandler<ServerRequest, ServerResponse> = (\n    req,\n    _res,\n    parsedUrl\n  ) => {\n    if (!parsedUrl.pathname) return false\n\n    if (this.normalizers.segmentPrefetchRSC?.match(parsedUrl.pathname)) {\n      const result = this.normalizers.segmentPrefetchRSC.extract(\n        parsedUrl.pathname\n      )\n      if (!result) return false\n\n      const { originalPathname, segmentPath } = result\n      parsedUrl.pathname = originalPathname\n\n      // Mark the request as a router prefetch request.\n      req.headers[RSC_HEADER] = '1'\n      req.headers[NEXT_ROUTER_PREFETCH_HEADER] = '1'\n      req.headers[NEXT_ROUTER_SEGMENT_PREFETCH_HEADER] = segmentPath\n\n      addRequestMeta(req, 'isRSCRequest', true)\n      addRequestMeta(req, 'isPrefetchRSCRequest', true)\n      addRequestMeta(req, 'segmentPrefetchRSCRequest', segmentPath)\n    } else if (this.normalizers.prefetchRSC?.match(parsedUrl.pathname)) {\n      parsedUrl.pathname = this.normalizers.prefetchRSC.normalize(\n        parsedUrl.pathname,\n        true\n      )\n\n      // Mark the request as a router prefetch request.\n      req.headers[RSC_HEADER] = '1'\n      req.headers[NEXT_ROUTER_PREFETCH_HEADER] = '1'\n      addRequestMeta(req, 'isRSCRequest', true)\n      addRequestMeta(req, 'isPrefetchRSCRequest', true)\n    } else if (this.normalizers.rsc?.match(parsedUrl.pathname)) {\n      parsedUrl.pathname = this.normalizers.rsc.normalize(\n        parsedUrl.pathname,\n        true\n      )\n\n      // Mark the request as a RSC request.\n      req.headers[RSC_HEADER] = '1'\n      addRequestMeta(req, 'isRSCRequest', true)\n    } else if (req.headers['x-now-route-matches']) {\n      // If we didn't match, return with the flight headers stripped. If in\n      // minimal mode we didn't match based on the path, this can't be a RSC\n      // request. This is because Vercel only sends this header during\n      // revalidation requests and we want the cache to instead depend on the\n      // request path for flight information.\n      stripFlightHeaders(req.headers)\n\n      return false\n    } else if (req.headers[RSC_HEADER] === '1') {\n      addRequestMeta(req, 'isRSCRequest', true)\n\n      if (req.headers[NEXT_ROUTER_PREFETCH_HEADER] === '1') {\n        addRequestMeta(req, 'isPrefetchRSCRequest', true)\n\n        const segmentPrefetchRSCRequest =\n          req.headers[NEXT_ROUTER_SEGMENT_PREFETCH_HEADER]\n        if (typeof segmentPrefetchRSCRequest === 'string') {\n          addRequestMeta(\n            req,\n            'segmentPrefetchRSCRequest',\n            segmentPrefetchRSCRequest\n          )\n        }\n      }\n    } else {\n      // Otherwise just return without doing anything.\n      return false\n    }\n\n    if (req.url) {\n      const parsed = parseUrl(req.url)\n      parsed.pathname = parsedUrl.pathname\n      req.url = formatUrl(parsed)\n    }\n\n    return false\n  }\n\n  private handleNextDataRequest: RouteHandler<ServerRequest, ServerResponse> =\n    async (req, res, parsedUrl) => {\n      const middleware = await this.getMiddleware()\n      const params = matchNextDataPathname(parsedUrl.pathname)\n\n      // ignore for non-next data URLs\n      if (!params || !params.path) {\n        return false\n      }\n\n      if (params.path[0] !== this.buildId) {\n        // Ignore if its a middleware request when we aren't on edge.\n        if (getRequestMeta(req, 'middlewareInvoke')) {\n          return false\n        }\n\n        // Make sure to 404 if the buildId isn't correct\n        await this.render404(req, res, parsedUrl)\n        return true\n      }\n\n      // remove buildId from URL\n      params.path.shift()\n\n      const lastParam = params.path[params.path.length - 1]\n\n      // show 404 if it doesn't end with .json\n      if (typeof lastParam !== 'string' || !lastParam.endsWith('.json')) {\n        await this.render404(req, res, parsedUrl)\n        return true\n      }\n\n      // re-create page's pathname\n      let pathname = `/${params.path.join('/')}`\n      pathname = getRouteFromAssetPath(pathname, '.json')\n\n      // ensure trailing slash is normalized per config\n      if (middleware) {\n        if (this.nextConfig.trailingSlash && !pathname.endsWith('/')) {\n          pathname += '/'\n        }\n        if (\n          !this.nextConfig.trailingSlash &&\n          pathname.length > 1 &&\n          pathname.endsWith('/')\n        ) {\n          pathname = pathname.substring(0, pathname.length - 1)\n        }\n      }\n\n      if (this.i18nProvider) {\n        // Remove the port from the hostname if present.\n        const hostname = req?.headers.host?.split(':', 1)[0].toLowerCase()\n\n        const domainLocale = this.i18nProvider.detectDomainLocale(hostname)\n        const defaultLocale =\n          domainLocale?.defaultLocale ?? this.i18nProvider.config.defaultLocale\n\n        const localePathResult = this.i18nProvider.analyze(pathname)\n\n        // If the locale is detected from the path, we need to remove it\n        // from the pathname.\n        if (localePathResult.detectedLocale) {\n          pathname = localePathResult.pathname\n        }\n\n        // Update the query with the detected locale and default locale.\n        addRequestMeta(req, 'locale', localePathResult.detectedLocale)\n        addRequestMeta(req, 'defaultLocale', defaultLocale)\n\n        // If the locale is not detected from the path, we need to mark that\n        // it was not inferred from default.\n        if (!localePathResult.detectedLocale) {\n          removeRequestMeta(req, 'localeInferredFromDefault')\n        }\n\n        // If no locale was detected and we don't have middleware, we need\n        // to render a 404 page.\n        if (!localePathResult.detectedLocale && !middleware) {\n          addRequestMeta(req, 'locale', defaultLocale)\n          await this.render404(req, res, parsedUrl)\n          return true\n        }\n      }\n\n      parsedUrl.pathname = pathname\n      addRequestMeta(req, 'isNextDataReq', true)\n\n      return false\n    }\n\n  protected handleNextImageRequest: RouteHandler<\n    ServerRequest,\n    ServerResponse\n  > = () => false\n\n  protected handleCatchallRenderRequest: RouteHandler<\n    ServerRequest,\n    ServerResponse\n  > = () => false\n\n  protected handleCatchallMiddlewareRequest: RouteHandler<\n    ServerRequest,\n    ServerResponse\n  > = () => false\n\n  protected getRouteMatchers(): RouteMatcherManager {\n    // Create a new manifest loader that get's the manifests from the server.\n    const manifestLoader = new ServerManifestLoader((name) => {\n      switch (name) {\n        case PAGES_MANIFEST:\n          return this.getPagesManifest() ?? null\n        case APP_PATHS_MANIFEST:\n          return this.getAppPathsManifest() ?? null\n        default:\n          return null\n      }\n    })\n\n    // Configure the matchers and handlers.\n    const matchers: RouteMatcherManager = new DefaultRouteMatcherManager()\n\n    // Match pages under `pages/`.\n    matchers.push(\n      new PagesRouteMatcherProvider(\n        this.distDir,\n        manifestLoader,\n        this.i18nProvider\n      )\n    )\n\n    // Match api routes under `pages/api/`.\n    matchers.push(\n      new PagesAPIRouteMatcherProvider(\n        this.distDir,\n        manifestLoader,\n        this.i18nProvider\n      )\n    )\n\n    // If the app directory is enabled, then add the app matchers and handlers.\n    if (this.enabledDirectories.app) {\n      // Match app pages under `app/`.\n      matchers.push(\n        new AppPageRouteMatcherProvider(this.distDir, manifestLoader)\n      )\n      matchers.push(\n        new AppRouteRouteMatcherProvider(this.distDir, manifestLoader)\n      )\n    }\n\n    return matchers\n  }\n\n  protected async instrumentationOnRequestError(\n    ...args: Parameters<ServerOnInstrumentationRequestError>\n  ) {\n    const [err, req, ctx] = args\n\n    if (this.instrumentation) {\n      try {\n        await this.instrumentation.onRequestError?.(\n          err,\n          {\n            path: req.url || '',\n            method: req.method || 'GET',\n            // Normalize middleware headers and other server request headers\n            headers:\n              req instanceof NextRequestHint\n                ? Object.fromEntries(req.headers.entries())\n                : req.headers,\n          },\n          ctx\n        )\n      } catch (handlerErr) {\n        // Log the soft error and continue, since errors can thrown from react stream handler\n        console.error('Error in instrumentation.onRequestError:', handlerErr)\n      }\n    }\n  }\n\n  public logError(err: Error): void {\n    if (this.quiet) return\n    Log.error(err)\n  }\n\n  public async handleRequest(\n    req: ServerRequest,\n    res: ServerResponse,\n    parsedUrl?: NextUrlWithParsedQuery\n  ): Promise<void> {\n    await this.prepare()\n    const method = req.method.toUpperCase()\n    const tracer = getTracer()\n\n    return tracer.withPropagatedContext(req.headers, () => {\n      return tracer.trace(\n        BaseServerSpan.handleRequest,\n        {\n          spanName: `${method}`,\n          kind: SpanKind.SERVER,\n          attributes: {\n            'http.method': method,\n            'http.target': req.url,\n          },\n        },\n        async (span) =>\n          this.handleRequestImpl(req, res, parsedUrl).finally(() => {\n            if (!span) return\n\n            const isRSCRequest = getRequestMeta(req, 'isRSCRequest') ?? false\n            span.setAttributes({\n              'http.status_code': res.statusCode,\n              'next.rsc': isRSCRequest,\n            })\n\n            if (res.statusCode && res.statusCode >= 500) {\n              // For 5xx status codes: SHOULD be set to 'Error' span status.\n              // x-ref: https://opentelemetry.io/docs/specs/semconv/http/http-spans/#status\n              span.setStatus({\n                code: SpanStatusCode.ERROR,\n              })\n              // For span status 'Error', SHOULD set 'error.type' attribute.\n              span.setAttribute('error.type', res.statusCode.toString())\n            }\n\n            const rootSpanAttributes = tracer.getRootSpanAttributes()\n            // We were unable to get attributes, probably OTEL is not enabled\n            if (!rootSpanAttributes) return\n\n            if (\n              rootSpanAttributes.get('next.span_type') !==\n              BaseServerSpan.handleRequest\n            ) {\n              console.warn(\n                `Unexpected root span type '${rootSpanAttributes.get(\n                  'next.span_type'\n                )}'. Please report this Next.js issue https://github.com/vercel/next.js`\n              )\n              return\n            }\n\n            const route = rootSpanAttributes.get('next.route')\n            if (route) {\n              const name = isRSCRequest\n                ? `RSC ${method} ${route}`\n                : `${method} ${route}`\n\n              span.setAttributes({\n                'next.route': route,\n                'http.route': route,\n                'next.span_name': name,\n              })\n              span.updateName(name)\n            } else {\n              span.updateName(isRSCRequest ? `RSC ${method}` : `${method}`)\n            }\n          })\n      )\n    })\n  }\n\n  private async handleRequestImpl(\n    req: ServerRequest,\n    res: ServerResponse,\n    parsedUrl?: NextUrlWithParsedQuery\n  ): Promise<void> {\n    try {\n      // Wait for the matchers to be ready.\n      await this.matchers.waitTillReady()\n\n      // ensure cookies set in middleware are merged and\n      // not overridden by API routes/getServerSideProps\n      patchSetHeaderWithCookieSupport(\n        req,\n        isNodeNextResponse(res) ? res.originalResponse : res\n      )\n\n      const urlParts = (req.url || '').split('?', 1)\n      const urlNoQuery = urlParts[0]\n\n      // this normalizes repeated slashes in the path e.g. hello//world ->\n      // hello/world or backslashes to forward slashes, this does not\n      // handle trailing slash as that is handled the same as a next.config.js\n      // redirect\n      if (urlNoQuery?.match(/(\\\\|\\/\\/)/)) {\n        const cleanUrl = normalizeRepeatedSlashes(req.url!)\n        res.redirect(cleanUrl, 308).body(cleanUrl).send()\n        return\n      }\n\n      // Parse url if parsedUrl not provided\n      if (!parsedUrl || typeof parsedUrl !== 'object') {\n        if (!req.url) {\n          throw new Error('Invariant: url can not be undefined')\n        }\n\n        parsedUrl = parseUrl(req.url!, true)\n      }\n\n      if (!parsedUrl.pathname) {\n        throw new Error(\"Invariant: pathname can't be empty\")\n      }\n\n      // Parse the querystring ourselves if the user doesn't handle querystring parsing\n      if (typeof parsedUrl.query === 'string') {\n        parsedUrl.query = Object.fromEntries(\n          new URLSearchParams(parsedUrl.query)\n        )\n      }\n\n      // Update the `x-forwarded-*` headers.\n      const { originalRequest = null } = isNodeNextRequest(req) ? req : {}\n      const xForwardedProto = originalRequest?.headers['x-forwarded-proto']\n      const isHttps = xForwardedProto\n        ? xForwardedProto === 'https'\n        : !!(originalRequest?.socket as TLSSocket)?.encrypted\n\n      req.headers['x-forwarded-host'] ??= req.headers['host'] ?? this.hostname\n      req.headers['x-forwarded-port'] ??= this.port\n        ? this.port.toString()\n        : isHttps\n          ? '443'\n          : '80'\n      req.headers['x-forwarded-proto'] ??= isHttps ? 'https' : 'http'\n      req.headers['x-forwarded-for'] ??= originalRequest?.socket?.remoteAddress\n\n      // This should be done before any normalization of the pathname happens as\n      // it captures the initial URL.\n      this.attachRequestMeta(req, parsedUrl)\n\n      let finished = await this.handleRSCRequest(req, res, parsedUrl)\n      if (finished) return\n\n      const domainLocale = this.i18nProvider?.detectDomainLocale(\n        getHostname(parsedUrl, req.headers)\n      )\n\n      const defaultLocale =\n        domainLocale?.defaultLocale || this.nextConfig.i18n?.defaultLocale\n      addRequestMeta(req, 'defaultLocale', defaultLocale)\n\n      const url = parseUrlUtil(req.url.replace(/^\\/+/, '/'))\n      const pathnameInfo = getNextPathnameInfo(url.pathname, {\n        nextConfig: this.nextConfig,\n        i18nProvider: this.i18nProvider,\n      })\n      url.pathname = pathnameInfo.pathname\n\n      if (pathnameInfo.basePath) {\n        req.url = removePathPrefix(req.url!, this.nextConfig.basePath)\n      }\n\n      const useMatchedPathHeader =\n        this.minimalMode && typeof req.headers[MATCHED_PATH_HEADER] === 'string'\n\n      // TODO: merge handling with invokePath\n      if (useMatchedPathHeader) {\n        try {\n          if (this.enabledDirectories.app) {\n            // ensure /index path is normalized for prerender\n            // in minimal mode\n            if (req.url.match(/^\\/index($|\\?)/)) {\n              req.url = req.url.replace(/^\\/index/, '/')\n            }\n            parsedUrl.pathname =\n              parsedUrl.pathname === '/index' ? '/' : parsedUrl.pathname\n          }\n\n          // x-matched-path is the source of truth, it tells what page\n          // should be rendered because we don't process rewrites in minimalMode\n          let { pathname: matchedPath } = new URL(\n            fixMojibake(req.headers[MATCHED_PATH_HEADER] as string),\n            'http://localhost'\n          )\n\n          let { pathname: urlPathname } = new URL(req.url, 'http://localhost')\n\n          // For ISR the URL is normalized to the prerenderPath so if\n          // it's a data request the URL path will be the data URL,\n          // basePath is already stripped by this point\n          if (this.normalizers.data?.match(urlPathname)) {\n            addRequestMeta(req, 'isNextDataReq', true)\n          }\n\n          // It's important to execute the following block even it the request\n          // matches a pages data route from above.\n          if (\n            this.isAppPPREnabled &&\n            this.minimalMode &&\n            req.headers[NEXT_RESUME_HEADER] === '1' &&\n            req.method === 'POST'\n          ) {\n            // Decode the postponed state from the request body, it will come as\n            // an array of buffers, so collect them and then concat them to form\n            // the string.\n            const body: Array<Buffer> = []\n            for await (const chunk of req.body) {\n              body.push(chunk)\n            }\n            const postponed = Buffer.concat(body).toString('utf8')\n\n            addRequestMeta(req, 'postponed', postponed)\n          }\n\n          // If the request is a next data request and it has a postponed state,\n          // we should error, as it represents an unprocessable request.\n          if (\n            getRequestMeta(req, 'isNextDataReq') &&\n            getRequestMeta(req, 'postponed')\n          ) {\n            // The server understood that this is a PPR resume request, as the\n            // headers were included to correctly indicate a resume request, but\n            // because the request URL indicates that this should render a next\n            // data route (a pages router route), this represents an\n            // unprocessable request.\n            res.statusCode = 422\n            res.send()\n            return\n          }\n\n          matchedPath = this.normalize(matchedPath)\n          const normalizedUrlPath = this.stripNextDataPath(urlPathname)\n\n          matchedPath = denormalizePagePath(matchedPath)\n\n          // Perform locale detection and normalization.\n          const localeAnalysisResult = this.i18nProvider?.analyze(matchedPath, {\n            defaultLocale,\n          })\n\n          // The locale result will be defined even if the locale was not\n          // detected for the request because it will be inferred from the\n          // default locale.\n          if (localeAnalysisResult) {\n            addRequestMeta(req, 'locale', localeAnalysisResult.detectedLocale)\n\n            // If the detected locale was inferred from the default locale, we\n            // need to modify the metadata on the request to indicate that.\n            if (localeAnalysisResult.inferredFromDefault) {\n              addRequestMeta(req, 'localeInferredFromDefault', true)\n            } else {\n              removeRequestMeta(req, 'localeInferredFromDefault')\n            }\n          }\n\n          let srcPathname = matchedPath\n          let pageIsDynamic = isDynamicRoute(srcPathname)\n          let paramsResult: {\n            params: ParsedUrlQuery | false\n            hasValidParams: boolean\n          } = {\n            params: false,\n            hasValidParams: false,\n          }\n\n          const match = await this.matchers.match(srcPathname, {\n            i18n: localeAnalysisResult,\n          })\n\n          if (!pageIsDynamic && match) {\n            // Update the source pathname to the matched page's pathname.\n            srcPathname = match.definition.pathname\n\n            // The page is dynamic if the params are defined. We know at this\n            // stage that the matched path is not a static page if the params\n            // were parsed from the matched path header.\n            if (typeof match.params !== 'undefined') {\n              pageIsDynamic = true\n              paramsResult.params = match.params\n              paramsResult.hasValidParams = true\n            }\n          }\n\n          // The rest of this function can't handle i18n properly, so ensure we\n          // restore the pathname with the locale information stripped from it\n          // now that we're done matching if we're using i18n.\n          if (localeAnalysisResult) {\n            matchedPath = localeAnalysisResult.pathname\n          }\n\n          const utils = getServerUtils({\n            pageIsDynamic,\n            page: srcPathname,\n            i18n: this.nextConfig.i18n,\n            basePath: this.nextConfig.basePath,\n            rewrites: this.getRoutesManifest()?.rewrites || {\n              beforeFiles: [],\n              afterFiles: [],\n              fallback: [],\n            },\n            caseSensitive: !!this.nextConfig.experimental.caseSensitiveRoutes,\n          })\n\n          // Ensure parsedUrl.pathname includes locale before processing\n          // rewrites or they won't match correctly.\n          if (defaultLocale && !pathnameInfo.locale) {\n            parsedUrl.pathname = `/${defaultLocale}${parsedUrl.pathname}`\n          }\n\n          // Store a copy of `parsedUrl.query` before calling handleRewrites.\n          // Since `handleRewrites` might add new queries to `parsedUrl.query`.\n          const originQueryParams = { ...parsedUrl.query }\n\n          const pathnameBeforeRewrite = parsedUrl.pathname\n          const { rewriteParams, rewrittenParsedUrl } = utils.handleRewrites(\n            req,\n            parsedUrl\n          )\n          const rewriteParamKeys = Object.keys(rewriteParams)\n\n          // Create a copy of the query params to avoid mutating the original\n          // object. This prevents any overlapping query params that have the\n          // same normalized key from causing issues.\n          const rewrittenQueryParams = { ...rewrittenParsedUrl.query }\n          const didRewrite =\n            pathnameBeforeRewrite !== rewrittenParsedUrl.pathname\n\n          if (didRewrite && rewrittenParsedUrl.pathname) {\n            addRequestMeta(req, 'rewroteURL', rewrittenParsedUrl.pathname)\n          }\n\n          const routeParamKeys = new Set<string>()\n          for (const [key, value] of Object.entries(parsedUrl.query)) {\n            const normalizedKey = normalizeNextQueryParam(key)\n            if (!normalizedKey) continue\n\n            // Remove the prefixed key from the query params because we want\n            // to consume it for the dynamic route matcher.\n            delete parsedUrl.query[key]\n            routeParamKeys.add(normalizedKey)\n\n            if (typeof value === 'undefined') continue\n\n            rewrittenQueryParams[normalizedKey] = Array.isArray(value)\n              ? value.map((v) => decodeQueryPathParameter(v))\n              : decodeQueryPathParameter(value)\n          }\n\n          // interpolate dynamic params and normalize URL if needed\n          if (pageIsDynamic) {\n            let params: ParsedUrlQuery | false = {}\n\n            // If we don't already have valid params, try to parse them from\n            // the query params.\n            if (!paramsResult.hasValidParams) {\n              paramsResult = utils.normalizeDynamicRouteParams(\n                rewrittenQueryParams,\n                false\n              )\n            }\n\n            // for prerendered ISR paths we attempt parsing the route\n            // params from the URL directly as route-matches may not\n            // contain the correct values due to the filesystem path\n            // matching before the dynamic route has been matched\n            if (\n              !paramsResult.hasValidParams &&\n              !isDynamicRoute(normalizedUrlPath)\n            ) {\n              let matcherParams = utils.dynamicRouteMatcher?.(normalizedUrlPath)\n\n              if (matcherParams) {\n                utils.normalizeDynamicRouteParams(matcherParams, false)\n                Object.assign(paramsResult.params, matcherParams)\n                paramsResult.hasValidParams = true\n              }\n            }\n\n            // if an action request is bypassing a prerender and we\n            // don't have the params in the URL since it was prerendered\n            // and matched during handle: 'filesystem' rather than dynamic route\n            // resolving we need to parse the params from the matched-path.\n            // Note: this is similar to above case but from match-path instead\n            // of from the request URL since a rewrite could cause that to not\n            // match the src pathname\n            if (\n              // we can have a collision with /index and a top-level /[slug]\n              matchedPath !== '/index' &&\n              !paramsResult.hasValidParams &&\n              !isDynamicRoute(matchedPath)\n            ) {\n              let matcherParams = utils.dynamicRouteMatcher?.(matchedPath)\n\n              if (matcherParams) {\n                const curParamsResult = utils.normalizeDynamicRouteParams(\n                  matcherParams,\n                  false\n                )\n\n                if (curParamsResult.hasValidParams) {\n                  Object.assign(params, matcherParams)\n                  paramsResult = curParamsResult\n                }\n              }\n            }\n\n            if (paramsResult.hasValidParams) {\n              params = paramsResult.params\n            }\n\n            const routeMatchesHeader = req.headers['x-now-route-matches']\n            if (\n              typeof routeMatchesHeader === 'string' &&\n              routeMatchesHeader &&\n              isDynamicRoute(matchedPath) &&\n              !paramsResult.hasValidParams\n            ) {\n              const routeMatches =\n                utils.getParamsFromRouteMatches(routeMatchesHeader)\n\n              if (routeMatches) {\n                paramsResult = utils.normalizeDynamicRouteParams(\n                  routeMatches,\n                  true\n                )\n\n                if (paramsResult.hasValidParams) {\n                  params = paramsResult.params\n                }\n              }\n            }\n\n            // Try to parse the params from the query if we couldn't parse them\n            // from the route matches but ignore missing optional params.\n            if (!paramsResult.hasValidParams) {\n              paramsResult = utils.normalizeDynamicRouteParams(\n                rewrittenQueryParams,\n                true\n              )\n\n              if (paramsResult.hasValidParams) {\n                params = paramsResult.params\n              }\n            }\n\n            // If the pathname being requested is the same as the source\n            // pathname, and we don't have valid params, we want to use the\n            // default route matches.\n            if (\n              utils.defaultRouteMatches &&\n              normalizedUrlPath === srcPathname &&\n              !paramsResult.hasValidParams\n            ) {\n              params = utils.defaultRouteMatches\n\n              // If the route matches header is an empty string, we want to\n              // render a fallback shell. This is because we know this came from\n              // a prerender (it has the header) but it's values were filtered\n              // out (because the allowQuery was empty). If it was undefined\n              // then we know that the request is hitting the lambda directly.\n              if (routeMatchesHeader === '') {\n                addRequestMeta(req, 'renderFallbackShell', true)\n              }\n            }\n\n            if (params) {\n              matchedPath = utils.interpolateDynamicPath(srcPathname, params)\n              req.url = utils.interpolateDynamicPath(req.url!, params)\n\n              // If the request is for a segment prefetch, we need to update the\n              // segment prefetch request path to include the interpolated\n              // params.\n              let segmentPrefetchRSCRequest = getRequestMeta(\n                req,\n                'segmentPrefetchRSCRequest'\n              )\n              if (\n                segmentPrefetchRSCRequest &&\n                isDynamicRoute(segmentPrefetchRSCRequest, false)\n              ) {\n                segmentPrefetchRSCRequest = utils.interpolateDynamicPath(\n                  segmentPrefetchRSCRequest,\n                  params\n                )\n\n                req.headers[NEXT_ROUTER_SEGMENT_PREFETCH_HEADER] =\n                  segmentPrefetchRSCRequest\n                addRequestMeta(\n                  req,\n                  'segmentPrefetchRSCRequest',\n                  segmentPrefetchRSCRequest\n                )\n              }\n            }\n          }\n\n          if (pageIsDynamic || didRewrite) {\n            utils.normalizeCdnUrl(req, [\n              ...rewriteParamKeys,\n              ...Object.keys(utils.defaultRouteRegex?.groups || {}),\n            ])\n          }\n\n          // Remove the route `params` keys from `parsedUrl.query` if they are\n          // not in the original query params.\n          // If it's used in both route `params` and query `searchParams`, it should be kept.\n          for (const key of routeParamKeys) {\n            if (!(key in originQueryParams)) {\n              delete parsedUrl.query[key]\n            }\n          }\n\n          parsedUrl.pathname = matchedPath\n          url.pathname = parsedUrl.pathname\n\n          // For Pages Router routes, use the normalized queryParams from\n          // handleRewrites to ensure catch-all routes get proper array values.\n          // App Router routes should not include rewrite query params as they\n          // affect RSC payload.\n          if (\n            match?.definition.kind === RouteKind.PAGES ||\n            match?.definition.kind === RouteKind.PAGES_API\n          ) {\n            parsedUrl.query = rewrittenQueryParams\n          }\n\n          finished = await this.normalizeAndAttachMetadata(req, res, parsedUrl)\n          if (finished) return\n        } catch (err) {\n          if (err instanceof DecodeError || err instanceof NormalizeError) {\n            res.statusCode = 400\n            return this.renderError(null, req, res, '/_error', {})\n          }\n          throw err\n        }\n      }\n\n      addRequestMeta(req, 'isLocaleDomain', Boolean(domainLocale))\n\n      if (pathnameInfo.locale) {\n        req.url = formatUrl(url)\n        addRequestMeta(req, 'didStripLocale', true)\n      }\n\n      // If we aren't in minimal mode or there is no locale in the query\n      // string, add the locale to the query string.\n      if (!this.minimalMode || !getRequestMeta(req, 'locale')) {\n        // If the locale is in the pathname, add it to the query string.\n        if (pathnameInfo.locale) {\n          addRequestMeta(req, 'locale', pathnameInfo.locale)\n        }\n        // If the default locale is available, add it to the query string and\n        // mark it as inferred rather than implicit.\n        else if (defaultLocale) {\n          addRequestMeta(req, 'locale', defaultLocale)\n          addRequestMeta(req, 'localeInferredFromDefault', true)\n        }\n      }\n\n      // set incremental cache to request meta so it can\n      // be passed down for edge functions and the fetch disk\n      // cache can be leveraged locally\n      if (\n        !(this.serverOptions as any).webServerConfig &&\n        !getRequestMeta(req, 'incrementalCache')\n      ) {\n        const incrementalCache = await this.getIncrementalCache({\n          requestHeaders: Object.assign({}, req.headers),\n        })\n\n        incrementalCache.resetRequestCache()\n        addRequestMeta(req, 'incrementalCache', incrementalCache)\n        // This is needed for pages router to leverage unstable_cache\n        // TODO: re-work this handling to not use global and use a AsyncStore\n        ;(globalThis as any).__incrementalCache = incrementalCache\n      }\n\n      // set server components HMR cache to request meta so it can be passed\n      // down for edge functions\n      if (!getRequestMeta(req, 'serverComponentsHmrCache')) {\n        addRequestMeta(\n          req,\n          'serverComponentsHmrCache',\n          this.getServerComponentsHmrCache()\n        )\n      }\n\n      // when invokePath is specified we can short short circuit resolving\n      // we only honor this header if we are inside of a render worker to\n      // prevent external users coercing the routing path\n      const invokePath = getRequestMeta(req, 'invokePath')\n      const useInvokePath = !useMatchedPathHeader && invokePath\n\n      if (useInvokePath) {\n        const invokeStatus = getRequestMeta(req, 'invokeStatus')\n        if (invokeStatus) {\n          const invokeQuery = getRequestMeta(req, 'invokeQuery')\n\n          if (invokeQuery) {\n            Object.assign(parsedUrl.query, invokeQuery)\n          }\n\n          res.statusCode = invokeStatus\n          let err: Error | null = getRequestMeta(req, 'invokeError') || null\n\n          return this.renderError(err, req, res, '/_error', parsedUrl.query)\n        }\n\n        const parsedMatchedPath = new URL(invokePath || '/', 'http://n')\n        const invokePathnameInfo = getNextPathnameInfo(\n          parsedMatchedPath.pathname,\n          {\n            nextConfig: this.nextConfig,\n            parseData: false,\n          }\n        )\n\n        if (invokePathnameInfo.locale) {\n          addRequestMeta(req, 'locale', invokePathnameInfo.locale)\n        }\n\n        if (parsedUrl.pathname !== parsedMatchedPath.pathname) {\n          parsedUrl.pathname = parsedMatchedPath.pathname\n          addRequestMeta(req, 'rewroteURL', invokePathnameInfo.pathname)\n        }\n        const normalizeResult = normalizeLocalePath(\n          removePathPrefix(parsedUrl.pathname, this.nextConfig.basePath || ''),\n          this.nextConfig.i18n?.locales\n        )\n\n        if (normalizeResult.detectedLocale) {\n          addRequestMeta(req, 'locale', normalizeResult.detectedLocale)\n        }\n        parsedUrl.pathname = normalizeResult.pathname\n\n        for (const key of Object.keys(parsedUrl.query)) {\n          delete parsedUrl.query[key]\n        }\n        const invokeQuery = getRequestMeta(req, 'invokeQuery')\n\n        if (invokeQuery) {\n          Object.assign(parsedUrl.query, invokeQuery)\n        }\n\n        finished = await this.normalizeAndAttachMetadata(req, res, parsedUrl)\n        if (finished) return\n\n        await this.handleCatchallRenderRequest(req, res, parsedUrl)\n        return\n      }\n\n      if (getRequestMeta(req, 'middlewareInvoke')) {\n        finished = await this.normalizeAndAttachMetadata(req, res, parsedUrl)\n        if (finished) return\n\n        finished = await this.handleCatchallMiddlewareRequest(\n          req,\n          res,\n          parsedUrl\n        )\n        if (finished) return\n\n        const err = new Error()\n        ;(err as any).result = {\n          response: new Response(null, {\n            headers: {\n              'x-middleware-next': '1',\n            },\n          }),\n        }\n        ;(err as any).bubble = true\n        throw err\n      }\n\n      // This wasn't a request via the matched path or the invoke path, so\n      // prepare for a legacy run by removing the base path.\n\n      // ensure we strip the basePath when not using an invoke header\n      if (!useMatchedPathHeader && pathnameInfo.basePath) {\n        parsedUrl.pathname = removePathPrefix(\n          parsedUrl.pathname,\n          pathnameInfo.basePath\n        )\n      }\n\n      res.statusCode = 200\n      return await this.run(req, res, parsedUrl)\n    } catch (err: any) {\n      if (err instanceof NoFallbackError) {\n        throw err\n      }\n\n      if (\n        (err && typeof err === 'object' && err.code === 'ERR_INVALID_URL') ||\n        err instanceof DecodeError ||\n        err instanceof NormalizeError\n      ) {\n        res.statusCode = 400\n        return this.renderError(null, req, res, '/_error', {})\n      }\n\n      if (\n        this.minimalMode ||\n        this.renderOpts.dev ||\n        (isBubbledError(err) && err.bubble)\n      ) {\n        throw err\n      }\n      this.logError(getProperError(err))\n      res.statusCode = 500\n      res.body('Internal Server Error').send()\n    }\n  }\n\n  /**\n   * Normalizes a pathname without attaching any metadata from any matched\n   * normalizer.\n   *\n   * @param pathname the pathname to normalize\n   * @returns the normalized pathname\n   */\n  private normalize = (pathname: string) => {\n    const normalizers: Array<PathnameNormalizer> = []\n\n    if (this.normalizers.data) {\n      normalizers.push(this.normalizers.data)\n    }\n\n    // We have to put the segment prefetch normalizer before the RSC normalizer\n    // because the RSC normalizer will match the prefetch RSC routes too.\n    if (this.normalizers.segmentPrefetchRSC) {\n      normalizers.push(this.normalizers.segmentPrefetchRSC)\n    }\n\n    // We have to put the prefetch normalizer before the RSC normalizer\n    // because the RSC normalizer will match the prefetch RSC routes too.\n    if (this.normalizers.prefetchRSC) {\n      normalizers.push(this.normalizers.prefetchRSC)\n    }\n\n    if (this.normalizers.rsc) {\n      normalizers.push(this.normalizers.rsc)\n    }\n\n    for (const normalizer of normalizers) {\n      if (!normalizer.match(pathname)) continue\n\n      return normalizer.normalize(pathname, true)\n    }\n\n    return pathname\n  }\n\n  private normalizeAndAttachMetadata: RouteHandler<\n    ServerRequest,\n    ServerResponse\n  > = async (req, res, url) => {\n    let finished = await this.handleNextImageRequest(req, res, url)\n    if (finished) return true\n\n    if (this.enabledDirectories.pages) {\n      finished = await this.handleNextDataRequest(req, res, url)\n      if (finished) return true\n    }\n\n    return false\n  }\n\n  /**\n   * @internal - this method is internal to Next.js and should not be used directly by end-users\n   */\n  public getRequestHandlerWithMetadata(\n    meta: RequestMeta\n  ): BaseRequestHandler<ServerRequest, ServerResponse> {\n    const handler = this.getRequestHandler()\n    return (req, res, parsedUrl) => {\n      setRequestMeta(req, meta)\n      return handler(req, res, parsedUrl)\n    }\n  }\n\n  public getRequestHandler(): BaseRequestHandler<\n    ServerRequest,\n    ServerResponse\n  > {\n    return this.handleRequest.bind(this)\n  }\n\n  protected abstract handleUpgrade(\n    req: ServerRequest,\n    socket: any,\n    head?: any\n  ): Promise<void>\n\n  public setAssetPrefix(prefix?: string): void {\n    this.nextConfig.assetPrefix = prefix ? prefix.replace(/\\/$/, '') : ''\n  }\n\n  protected prepared: boolean = false\n  protected preparedPromise: Promise<void> | null = null\n  /**\n   * Runs async initialization of server.\n   * It is idempotent, won't fire underlying initialization more than once.\n   */\n  public async prepare(): Promise<void> {\n    if (this.prepared) return\n\n    // Get instrumentation module\n    if (!this.instrumentation) {\n      this.instrumentation = await this.loadInstrumentationModule()\n    }\n    if (this.preparedPromise === null) {\n      this.preparedPromise = this.prepareImpl().then(() => {\n        this.prepared = true\n        this.preparedPromise = null\n      })\n    }\n    return this.preparedPromise\n  }\n  protected async prepareImpl(): Promise<void> {}\n  protected async loadInstrumentationModule(): Promise<any> {}\n\n  public async close(): Promise<void> {}\n\n  protected getAppPathRoutes(): Record<string, string[]> {\n    const appPathRoutes: Record<string, string[]> = {}\n\n    Object.keys(this.appPathsManifest || {}).forEach((entry) => {\n      const normalizedPath = normalizeAppPath(entry)\n      if (!appPathRoutes[normalizedPath]) {\n        appPathRoutes[normalizedPath] = []\n      }\n      appPathRoutes[normalizedPath].push(entry)\n    })\n    return appPathRoutes\n  }\n\n  protected async run(\n    req: ServerRequest,\n    res: ServerResponse,\n    parsedUrl: UrlWithParsedQuery\n  ): Promise<void> {\n    return getTracer().trace(BaseServerSpan.run, async () =>\n      this.runImpl(req, res, parsedUrl)\n    )\n  }\n\n  private async runImpl(\n    req: ServerRequest,\n    res: ServerResponse,\n    parsedUrl: UrlWithParsedQuery\n  ): Promise<void> {\n    await this.handleCatchallRenderRequest(req, res, parsedUrl)\n  }\n\n  private async pipe(\n    fn: (\n      ctx: RequestContext<ServerRequest, ServerResponse>\n    ) => Promise<ResponsePayload | null>,\n    partialContext: Omit<\n      RequestContext<ServerRequest, ServerResponse>,\n      'renderOpts'\n    >\n  ): Promise<void> {\n    return getTracer().trace(BaseServerSpan.pipe, async () =>\n      this.pipeImpl(fn, partialContext)\n    )\n  }\n\n  private async pipeImpl(\n    fn: (\n      ctx: RequestContext<ServerRequest, ServerResponse>\n    ) => Promise<ResponsePayload | null>,\n    partialContext: Omit<\n      RequestContext<ServerRequest, ServerResponse>,\n      'renderOpts'\n    >\n  ): Promise<void> {\n    const ua = partialContext.req.headers['user-agent'] || ''\n\n    const ctx: RequestContext<ServerRequest, ServerResponse> = {\n      ...partialContext,\n      renderOpts: {\n        ...this.renderOpts,\n        // `renderOpts.botType` is accumulated in `this.renderImpl()`\n        supportsDynamicResponse: !this.renderOpts.botType,\n        serveStreamingMetadata: shouldServeStreamingMetadata(\n          ua,\n          this.nextConfig.htmlLimitedBots\n        ),\n      },\n    }\n\n    const payload = await fn(ctx)\n    if (payload === null) {\n      return\n    }\n    const { req, res } = ctx\n    const originalStatus = res.statusCode\n    const { body } = payload\n    let { cacheControl } = payload\n    if (!res.sent) {\n      const { generateEtags, poweredByHeader, dev } = this.renderOpts\n\n      // In dev, we should not cache pages for any reason.\n      if (dev) {\n        res.setHeader('Cache-Control', 'no-store, must-revalidate')\n        cacheControl = undefined\n      }\n\n      if (cacheControl && cacheControl.expire === undefined) {\n        cacheControl.expire = this.nextConfig.expireTime\n      }\n\n      await this.sendRenderResult(req, res, {\n        result: body,\n        generateEtags,\n        poweredByHeader,\n        cacheControl,\n      })\n      res.statusCode = originalStatus\n    }\n  }\n\n  private async getStaticHTML(\n    fn: (\n      ctx: RequestContext<ServerRequest, ServerResponse>\n    ) => Promise<ResponsePayload | null>,\n    partialContext: Omit<\n      RequestContext<ServerRequest, ServerResponse>,\n      'renderOpts'\n    >\n  ): Promise<string | null> {\n    const ctx: RequestContext<ServerRequest, ServerResponse> = {\n      ...partialContext,\n      renderOpts: {\n        ...this.renderOpts,\n        supportsDynamicResponse: false,\n      },\n    }\n    const payload = await fn(ctx)\n    if (payload === null) {\n      return null\n    }\n    return payload.body.toUnchunkedString()\n  }\n\n  public async render(\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: NextParsedUrlQuery = {},\n    parsedUrl?: NextUrlWithParsedQuery,\n    internalRender = false\n  ): Promise<void> {\n    return getTracer().trace(BaseServerSpan.render, async () =>\n      this.renderImpl(req, res, pathname, query, parsedUrl, internalRender)\n    )\n  }\n\n  protected getWaitUntil(): WaitUntil | undefined {\n    const builtinRequestContext = getBuiltinRequestContext()\n    if (builtinRequestContext) {\n      // the platform provided a request context.\n      // use the `waitUntil` from there, whether actually present or not --\n      // if not present, `after` will error.\n\n      // NOTE: if we're in an edge runtime sandbox, this context will be used to forward the outer waitUntil.\n      return builtinRequestContext.waitUntil\n    }\n\n    if (this.minimalMode) {\n      // we're built for a serverless environment, and `waitUntil` is not available,\n      // but using a noop would likely lead to incorrect behavior,\n      // because we have no way of keeping the invocation alive.\n      // return nothing, and `after` will error if used.\n      //\n      // NOTE: for edge functions, `NextWebServer` always runs in minimal mode.\n      //\n      // NOTE: if we're in an edge runtime sandbox, waitUntil will be passed in using \"@next/request-context\",\n      // so we won't get here.\n      return undefined\n    }\n\n    return this.getInternalWaitUntil()\n  }\n\n  protected getInternalWaitUntil(): WaitUntil | undefined {\n    return undefined\n  }\n\n  private async renderImpl(\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: NextParsedUrlQuery = {},\n    parsedUrl?: NextUrlWithParsedQuery,\n    internalRender = false\n  ): Promise<void> {\n    if (!pathname.startsWith('/')) {\n      console.warn(\n        `Cannot render page with path \"${pathname}\", did you mean \"/${pathname}\"?. See more info here: https://nextjs.org/docs/messages/render-no-starting-slash`\n      )\n    }\n\n    if (\n      this.serverOptions.customServer &&\n      pathname === '/index' &&\n      !(await this.hasPage('/index'))\n    ) {\n      // maintain backwards compatibility for custom server\n      // (see custom-server integration tests)\n      pathname = '/'\n    }\n\n    const ua = req.headers['user-agent'] || ''\n    this.renderOpts.botType = getBotType(ua)\n\n    // we allow custom servers to call render for all URLs\n    // so check if we need to serve a static _next file or not.\n    // we don't modify the URL for _next/data request but still\n    // call render so we special case this to prevent an infinite loop\n    if (\n      !internalRender &&\n      !this.minimalMode &&\n      !getRequestMeta(req, 'isNextDataReq') &&\n      (req.url?.match(/^\\/_next\\//) ||\n        (this.hasStaticDir && req.url!.match(/^\\/static\\//)))\n    ) {\n      return this.handleRequest(req, res, parsedUrl)\n    }\n\n    if (isBlockedPage(pathname)) {\n      return this.render404(req, res, parsedUrl)\n    }\n\n    return this.pipe((ctx) => this.renderToResponse(ctx), {\n      req,\n      res,\n      pathname,\n      query,\n    })\n  }\n\n  protected async getStaticPaths({\n    pathname,\n  }: {\n    pathname: string\n    urlPathname: string\n    requestHeaders: import('./lib/incremental-cache').IncrementalCache['requestHeaders']\n    page: string\n    isAppPath: boolean\n  }): Promise<{\n    staticPaths?: string[]\n    prerenderedRoutes?: PrerenderedRoute[]\n    fallbackMode?: FallbackMode\n  }> {\n    // Read whether or not fallback should exist from the manifest.\n    const fallbackField =\n      this.getPrerenderManifest().dynamicRoutes[pathname]?.fallback\n\n    return {\n      // `staticPaths` is intentionally set to `undefined` as it should've\n      // been caught when checking disk data.\n      staticPaths: undefined,\n      fallbackMode: parseFallbackField(fallbackField),\n    }\n  }\n\n  private async renderToResponseWithComponents(\n    requestContext: RequestContext<ServerRequest, ServerResponse>,\n    findComponentsResult: FindComponentsResult\n  ): Promise<ResponsePayload | null> {\n    return getTracer().trace(\n      BaseServerSpan.renderToResponseWithComponents,\n      async () =>\n        this.renderToResponseWithComponentsImpl(\n          requestContext,\n          findComponentsResult\n        )\n    )\n  }\n\n  protected pathCouldBeIntercepted(resolvedPathname: string): boolean {\n    return (\n      isInterceptionRouteAppPath(resolvedPathname) ||\n      this.interceptionRoutePatterns.some((regexp) => {\n        return regexp.test(resolvedPathname)\n      })\n    )\n  }\n\n  protected setVaryHeader(\n    req: ServerRequest,\n    res: ServerResponse,\n    isAppPath: boolean,\n    resolvedPathname: string\n  ): void {\n    const baseVaryHeader = `${RSC_HEADER}, ${NEXT_ROUTER_STATE_TREE_HEADER}, ${NEXT_ROUTER_PREFETCH_HEADER}, ${NEXT_ROUTER_SEGMENT_PREFETCH_HEADER}`\n    const isRSCRequest = getRequestMeta(req, 'isRSCRequest') ?? false\n\n    let addedNextUrlToVary = false\n\n    if (isAppPath && this.pathCouldBeIntercepted(resolvedPathname)) {\n      // Interception route responses can vary based on the `Next-URL` header.\n      // We use the Vary header to signal this behavior to the client to properly cache the response.\n      res.appendHeader('vary', `${baseVaryHeader}, ${NEXT_URL}`)\n      addedNextUrlToVary = true\n    } else if (isAppPath || isRSCRequest) {\n      // We don't need to include `Next-URL` in the Vary header for non-interception routes since it won't affect the response.\n      // We also set this header for pages to avoid caching issues when navigating between pages and app.\n      res.appendHeader('vary', baseVaryHeader)\n    }\n\n    if (!addedNextUrlToVary) {\n      // Remove `Next-URL` from the request headers we determined it wasn't necessary to include in the Vary header.\n      // This is to avoid any dependency on the `Next-URL` header being present when preparing the response.\n      delete req.headers[NEXT_URL]\n    }\n  }\n\n  private async renderToResponseWithComponentsImpl(\n    {\n      req,\n      res,\n      pathname,\n      renderOpts: opts,\n    }: RequestContext<ServerRequest, ServerResponse>,\n    { components, query }: FindComponentsResult\n  ): Promise<ResponsePayload | null> {\n    if (pathname === UNDERSCORE_NOT_FOUND_ROUTE) {\n      pathname = '/404'\n    }\n    const isErrorPathname = pathname === '/_error'\n    const is404Page =\n      pathname === '/404' || (isErrorPathname && res.statusCode === 404)\n    const is500Page =\n      pathname === '/500' || (isErrorPathname && res.statusCode === 500)\n    const isAppPath = components.isAppPath === true\n\n    const hasServerProps = !!components.getServerSideProps\n    const isPossibleServerAction = getIsPossibleServerAction(req)\n    let isSSG = !!components.getStaticProps\n    // NOTE: Don't delete headers[RSC] yet, it still needs to be used in renderToHTML later\n    const isRSCRequest = getRequestMeta(req, 'isRSCRequest') ?? false\n\n    // Not all CDNs respect the Vary header when caching. We must assume that\n    // only the URL is used to vary the responses. The Next client computes a\n    // hash of the header values and sends it as a search param. Before\n    // responding to a request, we must verify that the hash matches the\n    // expected value. Neglecting to do this properly can lead to cache\n    // poisoning attacks on certain CDNs.\n    if (\n      !this.minimalMode &&\n      this.nextConfig.experimental.validateRSCRequestHeaders &&\n      isRSCRequest &&\n      // In the event that we're serving a NoFallbackError, the headers will\n      // already be stripped so this comparison will always fail, resulting in\n      // a redirect loop.\n      !is404Page\n    ) {\n      const headers = req.headers\n\n      const prefetchHeaderValue = headers[NEXT_ROUTER_PREFETCH_HEADER]\n      const routerPrefetch =\n        prefetchHeaderValue !== undefined\n          ? // We only recognize '1' and '2'. Strip all other values here.\n            prefetchHeaderValue === '1' || prefetchHeaderValue === '2'\n            ? prefetchHeaderValue\n            : undefined\n          : // For runtime prefetches, we always perform a dynamic request,\n            // so we don't expect the header to be stripped by an intermediate layer.\n            // This should only happen for static prefetches, so we only handle those here.\n            getRequestMeta(req, 'isPrefetchRSCRequest')\n            ? '1'\n            : undefined\n\n      const segmentPrefetchRSCRequest =\n        headers[NEXT_ROUTER_SEGMENT_PREFETCH_HEADER] ||\n        getRequestMeta(req, 'segmentPrefetchRSCRequest')\n\n      const expectedHash = computeCacheBustingSearchParam(\n        routerPrefetch,\n        segmentPrefetchRSCRequest,\n        headers[NEXT_ROUTER_STATE_TREE_HEADER],\n        headers[NEXT_URL]\n      )\n      const actualHash =\n        getRequestMeta(req, 'cacheBustingSearchParam') ??\n        new URL(req.url || '', 'http://localhost').searchParams.get(\n          NEXT_RSC_UNION_QUERY\n        )\n\n      if (expectedHash !== actualHash) {\n        // The hash sent by the client does not match the expected value.\n        // Redirect to the URL with the correct cache-busting search param.\n        // This prevents cache poisoning attacks on CDNs that don't respect Vary headers.\n        // Note: When no headers are present, expectedHash is empty string and client\n        // must send `_rsc` param, otherwise actualHash is null and hash check fails.\n        const url = new URL(req.url || '', 'http://localhost')\n        setCacheBustingSearchParamWithHash(url, expectedHash)\n        res.statusCode = 307\n        res.setHeader('location', `${url.pathname}${url.search}`)\n        res.body('').send()\n        return null\n      }\n    }\n\n    // Compute the iSSG cache key. We use the rewroteUrl since\n    // pages with fallback: false are allowed to be rewritten to\n    // and we need to look up the path by the rewritten path\n    let urlPathname = parseUrl(req.url || '').pathname || '/'\n\n    let resolvedUrlPathname = getRequestMeta(req, 'rewroteURL') || urlPathname\n\n    this.setVaryHeader(req, res, isAppPath, resolvedUrlPathname)\n\n    let staticPaths: string[] | undefined\n    let hasFallback = false\n\n    const prerenderManifest = this.getPrerenderManifest()\n\n    if (\n      hasFallback ||\n      staticPaths?.includes(resolvedUrlPathname) ||\n      // this signals revalidation in deploy environments\n      // TODO: make this more generic\n      req.headers['x-now-route-matches']\n    ) {\n      isSSG = true\n    } else if (!this.renderOpts.dev) {\n      isSSG ||= !!prerenderManifest.routes[toRoute(pathname)]\n    }\n\n    // Toggle whether or not this is a Data request\n    const isNextDataRequest =\n      !!(\n        getRequestMeta(req, 'isNextDataReq') ||\n        (req.headers['x-nextjs-data'] &&\n          (this.serverOptions as any).webServerConfig)\n      ) &&\n      (isSSG || hasServerProps)\n\n    // when we are handling a middleware prefetch and it doesn't\n    // resolve to a static data route we bail early to avoid\n    // unexpected SSR invocations\n    if (\n      !isSSG &&\n      req.headers['x-middleware-prefetch'] &&\n      !(is404Page || pathname === '/_error')\n    ) {\n      res.setHeader(MATCHED_PATH_HEADER, pathname)\n      res.setHeader('x-middleware-skip', '1')\n      res.setHeader(\n        'cache-control',\n        'private, no-cache, no-store, max-age=0, must-revalidate'\n      )\n      res.body('{}').send()\n      return null\n    }\n\n    // normalize req.url for SSG paths as it is not exposed\n    // to getStaticProps and the asPath should not expose /_next/data\n    if (\n      isSSG &&\n      this.minimalMode &&\n      req.headers[MATCHED_PATH_HEADER] &&\n      req.url.startsWith('/_next/data')\n    ) {\n      req.url = this.stripNextDataPath(req.url)\n    }\n\n    const locale = getRequestMeta(req, 'locale')\n\n    if (\n      !!req.headers['x-nextjs-data'] &&\n      (!res.statusCode || res.statusCode === 200)\n    ) {\n      res.setHeader(\n        'x-nextjs-matched-path',\n        `${locale ? `/${locale}` : ''}${pathname}`\n      )\n    }\n\n    let routeModule: RouteModule | undefined\n    if (components.routeModule) {\n      routeModule = components.routeModule\n    }\n\n    /**\n     * If the route being rendered is an app page, and the ppr feature has been\n     * enabled, then the given route _could_ support PPR.\n     */\n    const couldSupportPPR: boolean =\n      this.isAppPPREnabled &&\n      typeof routeModule !== 'undefined' &&\n      isAppPageRouteModule(routeModule)\n\n    // When enabled, this will allow the use of the `?__nextppronly` query to\n    // enable debugging of the static shell.\n    const hasDebugStaticShellQuery =\n      process.env.__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING === '1' &&\n      typeof query.__nextppronly !== 'undefined' &&\n      couldSupportPPR\n\n    // This page supports PPR if it is marked as being `PARTIALLY_STATIC` in the\n    // prerender manifest and this is an app page.\n    const isRoutePPREnabled: boolean =\n      couldSupportPPR &&\n      ((\n        prerenderManifest.routes[pathname] ??\n        prerenderManifest.dynamicRoutes[pathname]\n      )?.renderingMode === 'PARTIALLY_STATIC' ||\n        // Ideally we'd want to check the appConfig to see if this page has PPR\n        // enabled or not, but that would require plumbing the appConfig through\n        // to the server during development. We assume that the page supports it\n        // but only during development.\n        (hasDebugStaticShellQuery &&\n          (this.renderOpts.dev === true ||\n            this.experimentalTestProxy === true)))\n\n    // If we're in minimal mode, then try to get the postponed information from\n    // the request metadata. If available, use it for resuming the postponed\n    // render.\n    const minimalPostponed = isRoutePPREnabled\n      ? getRequestMeta(req, 'postponed')\n      : undefined\n\n    // we need to ensure the status code if /404 is visited directly\n    if (is404Page && !isNextDataRequest && !isRSCRequest) {\n      res.statusCode = 404\n    }\n\n    // ensure correct status is set when visiting a status page\n    // directly e.g. /500\n    if (STATIC_STATUS_PAGES.includes(pathname)) {\n      res.statusCode = parseInt(pathname.slice(1), 10)\n    }\n\n    if (\n      // Server actions can use non-GET/HEAD methods.\n      !isPossibleServerAction &&\n      // Resume can use non-GET/HEAD methods.\n      !minimalPostponed &&\n      !is404Page &&\n      !is500Page &&\n      pathname !== '/_error' &&\n      req.method !== 'HEAD' &&\n      req.method !== 'GET' &&\n      (typeof components.Component === 'string' || isSSG)\n    ) {\n      res.statusCode = 405\n      res.setHeader('Allow', ['GET', 'HEAD'])\n      res.body('Method Not Allowed').send()\n      return null\n    }\n\n    // handle static page\n    if (typeof components.Component === 'string') {\n      return {\n        body: RenderResult.fromStatic(\n          components.Component,\n          HTML_CONTENT_TYPE_HEADER\n        ),\n      }\n    }\n\n    if (opts.supportsDynamicResponse === true) {\n      const ua = req.headers['user-agent'] || ''\n      const isBotRequest = isBot(ua)\n      const isSupportedDocument =\n        typeof components.Document?.getInitialProps !== 'function' ||\n        // The built-in `Document` component also supports dynamic HTML for concurrent mode.\n        NEXT_BUILTIN_DOCUMENT in components.Document\n\n      // Disable dynamic HTML in cases that we know it won't be generated,\n      // so that we can continue generating a cache key when possible.\n      // TODO-APP: should the first render for a dynamic app path\n      // be static so we can collect revalidate and populate the\n      // cache if there are no dynamic data requirements\n      opts.supportsDynamicResponse =\n        !isSSG && !isBotRequest && isSupportedDocument\n    }\n\n    // In development, we always want to generate dynamic HTML.\n    if (!isNextDataRequest && isAppPath && opts.dev) {\n      opts.supportsDynamicResponse = true\n    }\n\n    if (isSSG && this.minimalMode && req.headers[MATCHED_PATH_HEADER]) {\n      // the url value is already correct when the matched-path header is set\n      resolvedUrlPathname = urlPathname\n    }\n\n    urlPathname = removeTrailingSlash(urlPathname)\n    resolvedUrlPathname = removeTrailingSlash(resolvedUrlPathname)\n    if (this.localeNormalizer) {\n      resolvedUrlPathname = this.localeNormalizer.normalize(resolvedUrlPathname)\n    }\n\n    // remove /_next/data prefix from urlPathname so it matches\n    // for direct page visit and /_next/data visit\n    if (isNextDataRequest) {\n      resolvedUrlPathname = this.stripNextDataPath(resolvedUrlPathname)\n      urlPathname = this.stripNextDataPath(urlPathname)\n    }\n\n    // use existing incrementalCache instance if available\n    const incrementalCache: import('./lib/incremental-cache').IncrementalCache =\n      await this.getIncrementalCache({\n        requestHeaders: Object.assign({}, req.headers),\n      })\n\n    // TODO: investigate, this is not safe across multiple concurrent requests\n    incrementalCache.resetRequestCache()\n\n    if (\n      routeModule?.isDev &&\n      isDynamicRoute(pathname) &&\n      (components.getStaticPaths || isAppPath)\n    ) {\n      const pathsResults = await this.getStaticPaths({\n        pathname,\n        urlPathname,\n        requestHeaders: req.headers,\n        page: components.page,\n        isAppPath,\n      })\n      if (isAppPath && this.nextConfig.cacheComponents) {\n        if (pathsResults.prerenderedRoutes?.length) {\n          let smallestFallbackRouteParams = null\n          for (const route of pathsResults.prerenderedRoutes) {\n            const fallbackRouteParams = route.fallbackRouteParams\n            if (!fallbackRouteParams || fallbackRouteParams.length === 0) {\n              // There are no fallback route params so we don't need to continue\n              smallestFallbackRouteParams = null\n              break\n            }\n            if (\n              smallestFallbackRouteParams === null ||\n              fallbackRouteParams.length < smallestFallbackRouteParams.length\n            ) {\n              smallestFallbackRouteParams = fallbackRouteParams\n            }\n          }\n          if (smallestFallbackRouteParams) {\n            addRequestMeta(\n              req,\n              'devValidatingFallbackParams',\n              createOpaqueFallbackRouteParams(smallestFallbackRouteParams)!\n            )\n          }\n        }\n      }\n    }\n\n    // An OPTIONS request to a page handler is invalid.\n    if (\n      req.method === 'OPTIONS' &&\n      !is404Page &&\n      (!routeModule || !isAppRouteRouteModule(routeModule))\n    ) {\n      await sendResponse(req, res, new Response(null, { status: 400 }))\n      return null\n    }\n\n    const request = isNodeNextRequest(req) ? req.originalRequest : req\n    const response = isNodeNextResponse(res) ? res.originalResponse : res\n\n    const parsedInitUrl = parseUrl(getRequestMeta(req, 'initURL') || req.url)\n    let initPathname = parsedInitUrl.pathname || '/'\n\n    for (const normalizer of [\n      this.normalizers.segmentPrefetchRSC,\n      this.normalizers.prefetchRSC,\n      this.normalizers.rsc,\n    ]) {\n      if (normalizer?.match(initPathname)) {\n        initPathname = normalizer.normalize(initPathname)\n      }\n    }\n\n    // On minimal mode, the request url of dynamic route can be a\n    // literal dynamic route ('/[slug]') instead of actual URL, so overwriting to initPathname\n    // will transform back the resolved url to the dynamic route pathname.\n    if (!(this.minimalMode && isErrorPathname)) {\n      request.url = `${initPathname}${parsedInitUrl.search || ''}`\n    }\n\n    // propagate the request context for dev\n    setRequestMeta(request, getRequestMeta(req))\n    addRequestMeta(request, 'distDir', this.distDir)\n    addRequestMeta(request, 'query', query)\n    addRequestMeta(request, 'params', opts.params)\n    addRequestMeta(request, 'minimalMode', this.minimalMode)\n\n    if (opts.err) {\n      addRequestMeta(request, 'invokeError', opts.err)\n    }\n\n    const handler: (\n      req: ServerRequest | IncomingMessage,\n      res: ServerResponse | HTTPServerResponse,\n      ctx: {\n        waitUntil: ReturnType<Server['getWaitUntil']>\n      }\n    ) => Promise<void> = components.ComponentMod.handler\n\n    const maybeDevRequest =\n      // we need to capture fetch metrics when they are set\n      // and can't wait for handler to resolve as the fetch\n      // metrics are logged on response close which happens\n      // before handler resolves\n      process.env.NODE_ENV === 'development'\n        ? new Proxy(request, {\n            get(target: any, prop) {\n              if (typeof target[prop] === 'function') {\n                return target[prop].bind(target)\n              }\n              return target[prop]\n            },\n            set(target: any, prop, value) {\n              if (prop === 'fetchMetrics') {\n                ;(req as any).fetchMetrics = value\n              }\n              target[prop] = value\n              return true\n            },\n          })\n        : request\n\n    await handler(maybeDevRequest, response, {\n      waitUntil: this.getWaitUntil(),\n    })\n\n    // response is handled fully in handler\n    return null\n  }\n\n  private stripNextDataPath(filePath: string, stripLocale = true) {\n    if (filePath.includes(this.buildId)) {\n      const splitPath = filePath.substring(\n        filePath.indexOf(this.buildId) + this.buildId.length\n      )\n\n      filePath = denormalizePagePath(splitPath.replace(/\\.json$/, ''))\n    }\n\n    if (this.localeNormalizer && stripLocale) {\n      return this.localeNormalizer.normalize(filePath)\n    }\n    return filePath\n  }\n\n  // map the route to the actual bundle name\n  protected getOriginalAppPaths(route: string) {\n    if (this.enabledDirectories.app) {\n      const originalAppPath = this.appPathRoutes?.[route]\n\n      if (!originalAppPath) {\n        return null\n      }\n\n      return originalAppPath\n    }\n    return null\n  }\n\n  protected async renderPageComponent(\n    ctx: RequestContext<ServerRequest, ServerResponse>,\n    bubbleNoFallback: boolean\n  ) {\n    const { query, pathname } = ctx\n\n    const appPaths = this.getOriginalAppPaths(pathname)\n    const isAppPath = Array.isArray(appPaths)\n\n    let page = pathname\n    if (isAppPath) {\n      // the last item in the array is the root page, if there are parallel routes\n      page = appPaths[appPaths.length - 1]\n    }\n\n    const result = await this.findPageComponents({\n      locale: getRequestMeta(ctx.req, 'locale'),\n      page,\n      query,\n      params: ctx.renderOpts.params || {},\n      isAppPath,\n      sriEnabled: !!this.nextConfig.experimental.sri?.algorithm,\n      appPaths,\n      // Ensuring for loading page component routes is done via the matcher.\n      shouldEnsure: false,\n    })\n    if (result) {\n      getTracer().setRootSpanAttribute('next.route', pathname)\n      try {\n        return await this.renderToResponseWithComponents(ctx, result)\n      } catch (err) {\n        const isNoFallbackError = err instanceof NoFallbackError\n\n        if (!isNoFallbackError || (isNoFallbackError && bubbleNoFallback)) {\n          throw err\n        }\n      }\n    }\n    return false\n  }\n\n  private async renderToResponse(\n    ctx: RequestContext<ServerRequest, ServerResponse>\n  ): Promise<ResponsePayload | null> {\n    return getTracer().trace(\n      BaseServerSpan.renderToResponse,\n      {\n        spanName: `rendering page`,\n        attributes: {\n          'next.route': ctx.pathname,\n        },\n      },\n      async () => {\n        return this.renderToResponseImpl(ctx)\n      }\n    )\n  }\n\n  protected abstract getMiddleware(): Promise<MiddlewareRoutingItem | undefined>\n  protected abstract getFallbackErrorComponents(\n    url?: string\n  ): Promise<LoadComponentsReturnType | null>\n  protected abstract getRoutesManifest(): NormalizedRouteManifest | undefined\n\n  private async renderToResponseImpl(\n    ctx: RequestContext<ServerRequest, ServerResponse>\n  ): Promise<ResponsePayload | null> {\n    const { req, res, query, pathname } = ctx\n    let page = pathname\n    const bubbleNoFallback =\n      getRequestMeta(ctx.req, 'bubbleNoFallback') ?? false\n\n    if (\n      !this.minimalMode &&\n      this.nextConfig.experimental.validateRSCRequestHeaders\n    ) {\n      addRequestMeta(\n        ctx.req,\n        'cacheBustingSearchParam',\n        query[NEXT_RSC_UNION_QUERY]\n      )\n    }\n    delete query[NEXT_RSC_UNION_QUERY]\n\n    const options: MatchOptions = {\n      i18n: this.i18nProvider?.fromRequest(req, pathname),\n    }\n\n    const existingMatch = getRequestMeta(ctx.req, 'match')\n\n    let fastPath = true\n    // when a specific invoke-output is meant to be matched\n    // ensure a prior dynamic route/page doesn't take priority\n    const invokeOutput = getRequestMeta(ctx.req, 'invokeOutput')\n\n    if (\n      (!this.minimalMode &&\n        typeof invokeOutput === 'string' &&\n        isDynamicRoute(invokeOutput || '') &&\n        invokeOutput !== existingMatch?.definition.pathname) ||\n      // Parallel routes are matched in `existingMatch` but since currently\n      // there can be multiple matches it's not guaranteed to be the right match\n      // therefor we need to opt-out of the fast path for parallel routes.\n      existingMatch?.definition.page.includes('/@')\n    ) {\n      fastPath = false\n    }\n\n    try {\n      for await (const match of fastPath && existingMatch\n        ? [existingMatch]\n        : this.matchers.matchAll(pathname, options)) {\n        if (\n          !this.minimalMode &&\n          typeof invokeOutput === 'string' &&\n          isDynamicRoute(invokeOutput || '') &&\n          invokeOutput !== match.definition.pathname\n        ) {\n          continue\n        }\n\n        const result = await this.renderPageComponent(\n          {\n            ...ctx,\n            pathname: match.definition.pathname,\n            renderOpts: {\n              ...ctx.renderOpts,\n              params: match.params,\n            },\n          },\n          bubbleNoFallback\n        )\n        if (result !== false) return result\n      }\n\n      // currently edge functions aren't receiving the x-matched-path\n      // header so we need to fallback to matching the current page\n      // when we weren't able to match via dynamic route to handle\n      // the rewrite case\n      // @ts-expect-error extended in child class web-server\n      if (this.serverOptions.webServerConfig) {\n        // @ts-expect-error extended in child class web-server\n        ctx.pathname = this.serverOptions.webServerConfig.page\n        const result = await this.renderPageComponent(ctx, bubbleNoFallback)\n        if (result !== false) return result\n      }\n    } catch (error) {\n      const err = getProperError(error)\n\n      if (error instanceof MissingStaticPage) {\n        console.error(\n          'Invariant: failed to load static page',\n          JSON.stringify(\n            {\n              page,\n              url: ctx.req.url,\n              matchedPath: ctx.req.headers[MATCHED_PATH_HEADER],\n              initUrl: getRequestMeta(ctx.req, 'initURL'),\n              didRewrite: !!getRequestMeta(ctx.req, 'rewroteURL'),\n              rewroteUrl: getRequestMeta(ctx.req, 'rewroteURL'),\n            },\n            null,\n            2\n          )\n        )\n        throw err\n      }\n\n      if (err instanceof NoFallbackError && bubbleNoFallback) {\n        throw err\n      }\n      if (err instanceof DecodeError || err instanceof NormalizeError) {\n        res.statusCode = 400\n        return await this.renderErrorToResponse(ctx, err)\n      }\n\n      res.statusCode = 500\n\n      // if pages/500 is present we still need to trigger\n      // /_error `getInitialProps` to allow reporting error\n      if (await this.hasPage('/500')) {\n        addRequestMeta(ctx.req, 'customErrorRender', true)\n        await this.renderErrorToResponse(ctx, err)\n        removeRequestMeta(ctx.req, 'customErrorRender')\n      }\n\n      const isWrappedError = err instanceof WrappedBuildError\n\n      if (!isWrappedError) {\n        if (this.minimalMode || this.renderOpts.dev) {\n          if (isError(err)) err.page = page\n          throw err\n        }\n        this.logError(getProperError(err))\n      }\n      const response = await this.renderErrorToResponse(\n        ctx,\n        isWrappedError ? (err as WrappedBuildError).innerError : err\n      )\n      return response\n    }\n\n    const middleware = await this.getMiddleware()\n    if (\n      middleware &&\n      !!ctx.req.headers['x-nextjs-data'] &&\n      (!res.statusCode || res.statusCode === 200 || res.statusCode === 404)\n    ) {\n      const locale = getRequestMeta(req, 'locale')\n\n      res.setHeader(\n        'x-nextjs-matched-path',\n        `${locale ? `/${locale}` : ''}${pathname}`\n      )\n      res.statusCode = 200\n      res.setHeader('Content-Type', JSON_CONTENT_TYPE_HEADER)\n      res.body('{}')\n      res.send()\n      return null\n    }\n\n    res.statusCode = 404\n    return this.renderErrorToResponse(ctx, null)\n  }\n\n  public async renderToHTML(\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: ParsedUrlQuery = {}\n  ): Promise<string | null> {\n    return getTracer().trace(BaseServerSpan.renderToHTML, async () => {\n      return this.renderToHTMLImpl(req, res, pathname, query)\n    })\n  }\n\n  private async renderToHTMLImpl(\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: ParsedUrlQuery = {}\n  ): Promise<string | null> {\n    return this.getStaticHTML((ctx) => this.renderToResponse(ctx), {\n      req,\n      res,\n      pathname,\n      query,\n    })\n  }\n\n  public async renderError(\n    err: Error | null,\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: NextParsedUrlQuery = {},\n    setHeaders = true\n  ): Promise<void> {\n    return getTracer().trace(BaseServerSpan.renderError, async () => {\n      return this.renderErrorImpl(err, req, res, pathname, query, setHeaders)\n    })\n  }\n\n  private async renderErrorImpl(\n    err: Error | null,\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: NextParsedUrlQuery = {},\n    setHeaders = true\n  ): Promise<void> {\n    if (setHeaders) {\n      res.setHeader(\n        'Cache-Control',\n        'private, no-cache, no-store, max-age=0, must-revalidate'\n      )\n    }\n\n    return this.pipe(\n      async (ctx) => {\n        const response = await this.renderErrorToResponse(ctx, err)\n        if (this.minimalMode && res.statusCode === 500) {\n          throw err\n        }\n        return response\n      },\n      { req, res, pathname, query }\n    )\n  }\n\n  private customErrorNo404Warn = execOnce(() => {\n    Log.warn(\n      `You have added a custom /_error page without a custom /404 page. This prevents the 404 page from being auto statically optimized.\\nSee here for info: https://nextjs.org/docs/messages/custom-error-no-custom-404`\n    )\n  })\n\n  private async renderErrorToResponse(\n    ctx: RequestContext<ServerRequest, ServerResponse>,\n    err: Error | null\n  ): Promise<ResponsePayload | null> {\n    return getTracer().trace(BaseServerSpan.renderErrorToResponse, async () => {\n      return this.renderErrorToResponseImpl(ctx, err)\n    })\n  }\n\n  protected async renderErrorToResponseImpl(\n    ctx: RequestContext<ServerRequest, ServerResponse>,\n    err: Error | null\n  ): Promise<ResponsePayload | null> {\n    // Short-circuit favicon.ico in development to avoid compiling 404 page when the app has no favicon.ico.\n    // Since favicon.ico is automatically requested by the browser.\n    if (this.renderOpts.dev && ctx.pathname === '/favicon.ico') {\n      return {\n        body: RenderResult.EMPTY,\n      }\n    }\n    const { res, query } = ctx\n\n    try {\n      let result: null | FindComponentsResult = null\n\n      const is404 = res.statusCode === 404\n      let using404Page = false\n      const hasAppDir = this.enabledDirectories.app\n\n      if (is404) {\n        if (hasAppDir) {\n          // Use the not-found entry in app directory\n          result = await this.findPageComponents({\n            locale: getRequestMeta(ctx.req, 'locale'),\n            page: UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n            query,\n            params: {},\n            isAppPath: true,\n            shouldEnsure: true,\n            url: ctx.req.url,\n          })\n          using404Page = result !== null\n        }\n\n        if (!result && (await this.hasPage('/404'))) {\n          result = await this.findPageComponents({\n            locale: getRequestMeta(ctx.req, 'locale'),\n            page: '/404',\n            query,\n            params: {},\n            isAppPath: false,\n            // Ensuring can't be done here because you never \"match\" a 404 route.\n            shouldEnsure: true,\n            url: ctx.req.url,\n          })\n          using404Page = result !== null\n        }\n      }\n      let statusPage = `/${res.statusCode}`\n\n      if (\n        !getRequestMeta(ctx.req, 'customErrorRender') &&\n        !result &&\n        STATIC_STATUS_PAGES.includes(statusPage)\n      ) {\n        // skip ensuring /500 in dev mode as it isn't used and the\n        // dev overlay is used instead\n        if (statusPage !== '/500' || !this.renderOpts.dev) {\n          if (!result && hasAppDir) {\n            // Otherwise if app router present, load app router built-in 500 page\n            result = await this.findPageComponents({\n              locale: getRequestMeta(ctx.req, 'locale'),\n              page: statusPage,\n              query,\n              params: {},\n              isAppPath: true,\n              // Ensuring can't be done here because you never \"match\" a 500\n              // route.\n              shouldEnsure: true,\n              url: ctx.req.url,\n            })\n          }\n          // If the above App Router result is empty, fallback to pages router 500 page\n          result = await this.findPageComponents({\n            locale: getRequestMeta(ctx.req, 'locale'),\n            page: statusPage,\n            query,\n            params: {},\n            isAppPath: false,\n            // Ensuring can't be done here because you never \"match\" a 500\n            // route.\n            shouldEnsure: true,\n            url: ctx.req.url,\n          })\n        }\n      }\n\n      if (!result) {\n        result = await this.findPageComponents({\n          locale: getRequestMeta(ctx.req, 'locale'),\n          page: '/_error',\n          query,\n          params: {},\n          isAppPath: false,\n          // Ensuring can't be done here because you never \"match\" an error\n          // route.\n          shouldEnsure: true,\n          url: ctx.req.url,\n        })\n        statusPage = '/_error'\n      }\n\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        !using404Page &&\n        (await this.hasPage('/_error')) &&\n        !(await this.hasPage('/404'))\n      ) {\n        this.customErrorNo404Warn()\n      }\n\n      if (!result) {\n        // this can occur when a project directory has been moved/deleted\n        // which is handled in the parent process in development\n        if (this.renderOpts.dev) {\n          return {\n            // wait for dev-server to restart before refreshing\n            body: RenderResult.fromStatic(\n              `\n              <pre>missing required error components, refreshing...</pre>\n              <script>\n                async function check() {\n                  const res = await fetch(location.href).catch(() => ({}))\n\n                  if (res.status === 200) {\n                    location.reload()\n                  } else {\n                    setTimeout(check, 1000)\n                  }\n                }\n                check()\n              </script>`,\n              HTML_CONTENT_TYPE_HEADER\n            ),\n          }\n        }\n\n        throw new WrappedBuildError(\n          new Error('missing required error components')\n        )\n      }\n\n      // If the page has a route module, use it for the new match. If it doesn't\n      // have a route module, remove the match.\n      if (result.components.routeModule) {\n        addRequestMeta(ctx.req, 'match', {\n          definition: result.components.routeModule.definition,\n          params: undefined,\n        })\n      } else {\n        removeRequestMeta(ctx.req, 'match')\n      }\n\n      try {\n        return await this.renderToResponseWithComponents(\n          {\n            ...ctx,\n            pathname: statusPage,\n            renderOpts: {\n              ...ctx.renderOpts,\n              err,\n            },\n          },\n          result\n        )\n      } catch (maybeFallbackError) {\n        if (maybeFallbackError instanceof NoFallbackError) {\n          throw new Error('invariant: failed to render error page')\n        }\n        throw maybeFallbackError\n      }\n    } catch (error) {\n      const renderToHtmlError = getProperError(error)\n      const isWrappedError = renderToHtmlError instanceof WrappedBuildError\n      if (!isWrappedError) {\n        this.logError(renderToHtmlError)\n      }\n      res.statusCode = 500\n      const fallbackComponents = await this.getFallbackErrorComponents(\n        ctx.req.url\n      )\n\n      if (fallbackComponents) {\n        // There was an error, so use it's definition from the route module\n        // to add the match to the request.\n        addRequestMeta(ctx.req, 'match', {\n          definition: fallbackComponents.routeModule!.definition,\n          params: undefined,\n        })\n\n        return this.renderToResponseWithComponents(\n          {\n            ...ctx,\n            pathname: '/_error',\n            renderOpts: {\n              ...ctx.renderOpts,\n              // We render `renderToHtmlError` here because `err` is\n              // already captured in the stacktrace.\n              err: isWrappedError\n                ? renderToHtmlError.innerError\n                : renderToHtmlError,\n            },\n          },\n          {\n            query,\n            components: fallbackComponents,\n          }\n        )\n      }\n      return {\n        body: RenderResult.fromStatic('Internal Server Error', 'text/plain'),\n      }\n    }\n  }\n\n  public async renderErrorToHTML(\n    err: Error | null,\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: ParsedUrlQuery = {}\n  ): Promise<string | null> {\n    return this.getStaticHTML((ctx) => this.renderErrorToResponse(ctx, err), {\n      req,\n      res,\n      pathname,\n      query,\n    })\n  }\n\n  public async render404(\n    req: ServerRequest,\n    res: ServerResponse,\n    parsedUrl?: Pick<NextUrlWithParsedQuery, 'pathname' | 'query'>,\n    setHeaders = true\n  ): Promise<void> {\n    const { pathname, query } = parsedUrl ? parsedUrl : parseUrl(req.url!, true)\n\n    // Ensure the locales are provided on the request meta.\n    if (this.nextConfig.i18n) {\n      if (!getRequestMeta(req, 'locale')) {\n        addRequestMeta(req, 'locale', this.nextConfig.i18n.defaultLocale)\n      }\n      addRequestMeta(req, 'defaultLocale', this.nextConfig.i18n.defaultLocale)\n    }\n\n    res.statusCode = 404\n    return this.renderError(null, req, res, pathname!, query, setHeaders)\n  }\n}\n"],"names":["WrappedBuildError","Server","Error","constructor","innerError","getServerComponentsHmrCache","nextConfig","experimental","serverComponentsHmrCache","globalThis","__serverComponentsHmrCache","undefined","options","handleRSCRequest","req","_res","parsedUrl","pathname","normalizers","segmentPrefetchRSC","match","result","extract","originalPathname","segmentPath","headers","RSC_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_ROUTER_SEGMENT_PREFETCH_HEADER","addRequestMeta","prefetchRSC","normalize","rsc","stripFlightHeaders","segmentPrefetchRSCRequest","url","parsed","parseUrl","formatUrl","handleNextDataRequest","res","middleware","getMiddleware","params","matchNextDataPathname","path","buildId","getRequestMeta","render404","shift","lastParam","length","endsWith","join","getRouteFromAssetPath","trailingSlash","substring","i18nProvider","hostname","host","split","toLowerCase","domainLocale","detectDomainLocale","defaultLocale","config","localePathResult","analyze","detectedLocale","removeRequestMeta","handleNextImageRequest","handleCatchallRenderRequest","handleCatchallMiddlewareRequest","data","push","normalizer","normalizeAndAttachMetadata","finished","enabledDirectories","pages","prepared","preparedPromise","customErrorNo404Warn","execOnce","Log","warn","dir","quiet","conf","dev","minimalMode","port","experimentalTestProxy","serverOptions","resolve","loadEnvConfig","forceReload","fetchHostname","formatHostname","distDir","publicDir","getPublicDir","hasStaticDir","getHasStaticDir","i18n","locales","I18NProvider","localeNormalizer","LocaleRouteNormalizer","assetPrefix","generateEtags","getBuildId","minimalModeKey","process","env","NEXT_PRIVATE_MINIMAL_MODE","getEnabledDirectories","isAppPPREnabled","app","checkIsAppPPREnabled","ppr","isAppSegmentPrefetchEnabled","clientSegmentCache","RSCPathnameNormalizer","PrefetchRSCPathnameNormalizer","SegmentPrefixRSCPathnameNormalizer","NextDataPathnameNormalizer","nextFontManifest","getNextFontManifest","NEXT_DEPLOYMENT_ID","deploymentId","renderOpts","supportsDynamicResponse","poweredByHeader","previewProps","getPrerenderManifest","preview","basePath","images","optimizeCss","nextConfigOutput","output","nextScriptWorkers","disableOptimizedLoading","domainLocales","domains","serverComponents","cacheLifeProfiles","cacheLife","enableTainting","taint","crossOrigin","largePageDataBytes","isExperimentalCompile","htmlLimitedBots","cacheComponents","expireTime","staleTimes","clientTraceMetadata","Boolean","clientParamParsingOrigins","dynamicOnHover","inlineCss","authInterrupts","onInstrumentationRequestError","instrumentationOnRequestError","bind","reactMaxHeadersLength","pagesManifest","getPagesManifest","appPathsManifest","getAppPathsManifest","appPathRoutes","getAppPathRoutes","interceptionRoutePatterns","getinterceptionRoutePatterns","matchers","getRouteMatchers","reload","setAssetPrefix","responseCache","getResponseCache","reloadMatchers","manifestLoader","ServerManifestLoader","name","PAGES_MANIFEST","APP_PATHS_MANIFEST","DefaultRouteMatcherManager","PagesRouteMatcherProvider","PagesAPIRouteMatcherProvider","AppPageRouteMatcherProvider","AppRouteRouteMatcherProvider","args","err","ctx","instrumentation","onRequestError","method","NextRequestHint","Object","fromEntries","entries","handlerErr","console","error","logError","handleRequest","prepare","toUpperCase","tracer","getTracer","withPropagatedContext","trace","BaseServerSpan","spanName","kind","SpanKind","SERVER","attributes","span","handleRequestImpl","finally","isRSCRequest","setAttributes","statusCode","setStatus","code","SpanStatusCode","ERROR","setAttribute","toString","rootSpanAttributes","getRootSpanAttributes","get","route","updateName","originalRequest","waitTillReady","patchSetHeaderWithCookieSupport","isNodeNextResponse","originalResponse","urlParts","urlNoQuery","cleanUrl","normalizeRepeatedSlashes","redirect","body","send","query","URLSearchParams","isNodeNextRequest","xForwardedProto","isHttps","socket","encrypted","remoteAddress","attachRequestMeta","getHostname","parseUrlUtil","replace","pathnameInfo","getNextPathnameInfo","removePathPrefix","useMatchedPathHeader","MATCHED_PATH_HEADER","matchedPath","URL","fixMojibake","urlPathname","NEXT_RESUME_HEADER","chunk","postponed","Buffer","concat","normalizedUrlPath","stripNextDataPath","denormalizePagePath","localeAnalysisResult","inferredFromDefault","srcPathname","pageIsDynamic","isDynamicRoute","paramsResult","hasValidParams","definition","utils","getServerUtils","page","rewrites","getRoutesManifest","beforeFiles","afterFiles","fallback","caseSensitive","caseSensitiveRoutes","locale","originQueryParams","pathnameBeforeRewrite","rewriteParams","rewrittenParsedUrl","handleRewrites","rewriteParamKeys","keys","rewrittenQueryParams","didRewrite","routeParamKeys","Set","key","value","normalizedKey","normalizeNextQueryParam","add","Array","isArray","map","v","decodeQueryPathParameter","normalizeDynamicRouteParams","matcherParams","dynamicRouteMatcher","assign","curParamsResult","routeMatchesHeader","routeMatches","getParamsFromRouteMatches","defaultRouteMatches","interpolateDynamicPath","normalizeCdnUrl","defaultRouteRegex","groups","RouteKind","PAGES","PAGES_API","DecodeError","NormalizeError","renderError","webServerConfig","incrementalCache","getIncrementalCache","requestHeaders","resetRequestCache","__incrementalCache","invokePath","useInvokePath","invokeStatus","invokeQuery","parsedMatchedPath","invokePathnameInfo","parseData","normalizeResult","normalizeLocalePath","response","Response","bubble","run","NoFallbackError","isBubbledError","getProperError","getRequestHandlerWithMetadata","meta","handler","getRequestHandler","setRequestMeta","prefix","loadInstrumentationModule","prepareImpl","then","close","forEach","entry","normalizedPath","normalizeAppPath","runImpl","pipe","fn","partialContext","pipeImpl","ua","botType","serveStreamingMetadata","shouldServeStreamingMetadata","payload","originalStatus","cacheControl","sent","setHeader","expire","sendRenderResult","getStaticHTML","toUnchunkedString","render","internalRender","renderImpl","getWaitUntil","builtinRequestContext","getBuiltinRequestContext","waitUntil","getInternalWaitUntil","startsWith","customServer","hasPage","getBotType","isBlockedPage","renderToResponse","getStaticPaths","fallbackField","dynamicRoutes","staticPaths","fallbackMode","parseFallbackField","renderToResponseWithComponents","requestContext","findComponentsResult","renderToResponseWithComponentsImpl","pathCouldBeIntercepted","resolvedPathname","isInterceptionRouteAppPath","some","regexp","test","setVaryHeader","isAppPath","baseVaryHeader","NEXT_ROUTER_STATE_TREE_HEADER","addedNextUrlToVary","appendHeader","NEXT_URL","opts","components","prerenderManifest","UNDERSCORE_NOT_FOUND_ROUTE","isErrorPathname","is404Page","is500Page","hasServerProps","getServerSideProps","isPossibleServerAction","getIsPossibleServerAction","isSSG","getStaticProps","validateRSCRequestHeaders","prefetchHeaderValue","routerPrefetch","expectedHash","computeCacheBustingSearchParam","actualHash","searchParams","NEXT_RSC_UNION_QUERY","setCacheBustingSearchParamWithHash","search","resolvedUrlPathname","hasFallback","includes","routes","toRoute","isNextDataRequest","routeModule","couldSupportPPR","isAppPageRouteModule","hasDebugStaticShellQuery","__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING","__nextppronly","isRoutePPREnabled","renderingMode","minimalPostponed","STATIC_STATUS_PAGES","parseInt","slice","Component","RenderResult","fromStatic","HTML_CONTENT_TYPE_HEADER","isBotRequest","isBot","isSupportedDocument","Document","getInitialProps","NEXT_BUILTIN_DOCUMENT","removeTrailingSlash","isDev","pathsResults","prerenderedRoutes","smallestFallbackRouteParams","fallbackRouteParams","createOpaqueFallbackRouteParams","isAppRouteRouteModule","sendResponse","status","request","parsedInitUrl","initPathname","ComponentMod","maybeDevRequest","NODE_ENV","Proxy","target","prop","set","fetchMetrics","filePath","stripLocale","splitPath","indexOf","getOriginalAppPaths","originalAppPath","renderPageComponent","bubbleNoFallback","appPaths","findPageComponents","sriEnabled","sri","algorithm","shouldEnsure","setRootSpanAttribute","isNoFallbackError","renderToResponseImpl","fromRequest","existingMatch","fastPath","invokeOutput","matchAll","MissingStaticPage","JSON","stringify","initUrl","rewroteUrl","renderErrorToResponse","isWrappedError","isError","JSON_CONTENT_TYPE_HEADER","renderToHTML","renderToHTMLImpl","setHeaders","renderErrorImpl","renderErrorToResponseImpl","EMPTY","is404","using404Page","hasAppDir","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","statusPage","maybeFallbackError","renderToHtmlError","fallbackComponents","getFallbackErrorComponents","renderErrorToHTML"],"mappings":"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","ignoreList":[0]}
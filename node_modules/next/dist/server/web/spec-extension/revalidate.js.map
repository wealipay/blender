{"version":3,"sources":["../../../../src/server/web/spec-extension/revalidate.ts"],"sourcesContent":["import {\n  abortAndThrowOnSynchronousRequestDataAccess,\n  postponeWithTracking,\n} from '../../app-render/dynamic-rendering'\nimport { isDynamicRoute } from '../../../shared/lib/router/utils'\nimport {\n  NEXT_CACHE_IMPLICIT_TAG_ID,\n  NEXT_CACHE_SOFT_TAG_MAX_LENGTH,\n} from '../../../lib/constants'\nimport { workAsyncStorage } from '../../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../../app-render/work-unit-async-storage.external'\nimport { DynamicServerError } from '../../../client/components/hooks-server-context'\nimport { InvariantError } from '../../../shared/lib/invariant-error'\n\ntype CacheLifeConfig = {\n  expire?: number\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific cache tag.\n *\n * Read more: [Next.js Docs: `revalidateTag`](https://nextjs.org/docs/app/api-reference/functions/revalidateTag)\n */\nexport function revalidateTag(tag: string, profile: string | CacheLifeConfig) {\n  if (!profile) {\n    console.warn(\n      '\"revalidateTag\" without the second argument is now deprecated, add second argument of \"max\" or use \"updateTag\". See more info here: https://nextjs.org/docs/messages/revalidate-tag-single-arg'\n    )\n  }\n  return revalidate([tag], `revalidateTag ${tag}`, profile)\n}\n\n/**\n * This function allows you to update [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific cache tag.\n * This can only be called from within a Server Action to enable read-your-own-writes semantics.\n *\n * Read more: [Next.js Docs: `updateTag`](https://nextjs.org/docs/app/api-reference/functions/updateTag)\n */\nexport function updateTag(tag: string) {\n  const workStore = workAsyncStorage.getStore()\n\n  // TODO: change this after investigating why phase: 'action' is\n  // set for route handlers\n  if (!workStore || workStore.page.endsWith('/route')) {\n    throw new Error(\n      'updateTag can only be called from within a Server Action. ' +\n        'To invalidate cache tags in Route Handlers or other contexts, use revalidateTag instead. ' +\n        'See more info here: https://nextjs.org/docs/app/api-reference/functions/updateTag'\n    )\n  }\n  // updateTag uses immediate expiration (no profile) without deprecation warning\n  return revalidate([tag], `updateTag ${tag}`, undefined)\n}\n\n/**\n * This function allows you to refresh client cache from server actions.\n * It's useful as dynamic data can be cached on the client which won't\n * be refreshed by expireTag\n */\nexport function refresh() {\n  const workStore = workAsyncStorage.getStore()\n  const workUnitStore = workUnitAsyncStorage.getStore()\n\n  if (\n    !workStore ||\n    workStore.page.endsWith('/route') ||\n    workUnitStore?.phase !== 'action'\n  ) {\n    throw new Error(\n      'refresh can only be called from within a Server Action. ' +\n        'See more info here: https://nextjs.org/docs/app/api-reference/functions/refresh'\n    )\n  }\n\n  if (workStore) {\n    // TODO: break this to it's own field\n    workStore.pathWasRevalidated = true\n  }\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific path.\n *\n * Read more: [Next.js Docs: `revalidatePath`](https://nextjs.org/docs/app/api-reference/functions/revalidatePath)\n */\nexport function revalidatePath(originalPath: string, type?: 'layout' | 'page') {\n  if (originalPath.length > NEXT_CACHE_SOFT_TAG_MAX_LENGTH) {\n    console.warn(\n      `Warning: revalidatePath received \"${originalPath}\" which exceeded max length of ${NEXT_CACHE_SOFT_TAG_MAX_LENGTH}. See more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath`\n    )\n    return\n  }\n\n  let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath || '/'}`\n\n  if (type) {\n    normalizedPath += `${normalizedPath.endsWith('/') ? '' : '/'}${type}`\n  } else if (isDynamicRoute(originalPath)) {\n    console.warn(\n      `Warning: a dynamic page path \"${originalPath}\" was passed to \"revalidatePath\", but the \"type\" parameter is missing. This has no effect by default, see more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath`\n    )\n  }\n\n  const tags = [normalizedPath]\n  if (normalizedPath === `${NEXT_CACHE_IMPLICIT_TAG_ID}/`) {\n    tags.push(`${NEXT_CACHE_IMPLICIT_TAG_ID}/index`)\n  } else if (normalizedPath === `${NEXT_CACHE_IMPLICIT_TAG_ID}/index`) {\n    tags.push(`${NEXT_CACHE_IMPLICIT_TAG_ID}/`)\n  }\n\n  return revalidate(tags, `revalidatePath ${originalPath}`)\n}\n\nfunction revalidate(\n  tags: string[],\n  expression: string,\n  profile?: string | CacheLifeConfig\n) {\n  const store = workAsyncStorage.getStore()\n  if (!store || !store.incrementalCache) {\n    throw new Error(\n      `Invariant: static generation store missing in ${expression}`\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    if (workUnitStore.phase === 'render') {\n      throw new Error(\n        `Route ${store.route} used \"${expression}\" during render which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n      )\n    }\n\n    switch (workUnitStore.type) {\n      case 'cache':\n      case 'private-cache':\n        throw new Error(\n          `Route ${store.route} used \"${expression}\" inside a \"use cache\" which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n        )\n      case 'unstable-cache':\n        throw new Error(\n          `Route ${store.route} used \"${expression}\" inside a function cached with \"unstable_cache(...)\" which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n        )\n      case 'prerender':\n      case 'prerender-runtime':\n        // cacheComponents Prerender\n        const error = new Error(\n          `Route ${store.route} used ${expression} without first calling \\`await connection()\\`.`\n        )\n        return abortAndThrowOnSynchronousRequestDataAccess(\n          store.route,\n          expression,\n          error,\n          workUnitStore\n        )\n      case 'prerender-client':\n        throw new InvariantError(\n          `${expression} must not be used within a client component. Next.js should be preventing ${expression} from being included in client components statically, but did not in this case.`\n        )\n      case 'prerender-ppr':\n        return postponeWithTracking(\n          store.route,\n          expression,\n          workUnitStore.dynamicTracking\n        )\n      case 'prerender-legacy':\n        workUnitStore.revalidate = 0\n\n        const err = new DynamicServerError(\n          `Route ${store.route} couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n        )\n        store.dynamicUsageDescription = expression\n        store.dynamicUsageStack = err.stack\n\n        throw err\n      case 'request':\n        if (process.env.NODE_ENV !== 'production') {\n          // TODO: This is most likely incorrect. It would lead to the ISR\n          // status being flipped when revalidating a static page with a server\n          // action.\n          workUnitStore.usedDynamic = true\n        }\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n\n  if (!store.pendingRevalidatedTags) {\n    store.pendingRevalidatedTags = []\n  }\n\n  for (const tag of tags) {\n    const existingIndex = store.pendingRevalidatedTags.findIndex((item) => {\n      if (item.tag !== tag) return false\n      // Compare profiles: both strings, both objects, or both undefined\n      if (typeof item.profile === 'string' && typeof profile === 'string') {\n        return item.profile === profile\n      }\n      if (typeof item.profile === 'object' && typeof profile === 'object') {\n        return JSON.stringify(item.profile) === JSON.stringify(profile)\n      }\n      return item.profile === profile\n    })\n    if (existingIndex === -1) {\n      store.pendingRevalidatedTags.push({\n        tag,\n        profile,\n      })\n    }\n  }\n\n  // if profile is provided and this is a stale-while-revalidate\n  // update we do not mark the path as revalidated so that server\n  // actions don't pull their own writes\n  const cacheLife =\n    profile && typeof profile === 'object'\n      ? profile\n      : profile &&\n          typeof profile === 'string' &&\n          store?.cacheLifeProfiles?.[profile]\n        ? store.cacheLifeProfiles[profile]\n        : undefined\n\n  if (!profile || cacheLife?.expire === 0) {\n    // TODO: only revalidate if the path matches\n    store.pathWasRevalidated = true\n  }\n}\n"],"names":["refresh","revalidatePath","revalidateTag","updateTag","tag","profile","console","warn","revalidate","workStore","workAsyncStorage","getStore","page","endsWith","Error","undefined","workUnitStore","workUnitAsyncStorage","phase","pathWasRevalidated","originalPath","type","length","NEXT_CACHE_SOFT_TAG_MAX_LENGTH","normalizedPath","NEXT_CACHE_IMPLICIT_TAG_ID","isDynamicRoute","tags","push","expression","store","incrementalCache","route","error","abortAndThrowOnSynchronousRequestDataAccess","InvariantError","postponeWithTracking","dynamicTracking","err","DynamicServerError","dynamicUsageDescription","dynamicUsageStack","stack","process","env","NODE_ENV","usedDynamic","pendingRevalidatedTags","existingIndex","findIndex","item","JSON","stringify","cacheLife","cacheLifeProfiles","expire"],"mappings":"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","ignoreList":[0]}
{"version":3,"sources":["../../../src/trace/report/to-json-build.ts"],"sourcesContent":["import { traceGlobals, traceId } from '../shared'\nimport fs from 'fs'\nimport path from 'path'\nimport {\n  PHASE_DEVELOPMENT_SERVER,\n  PHASE_PRODUCTION_BUILD,\n} from '../../shared/lib/constants'\nimport type { TraceEvent } from '../types'\nimport { batcher } from './to-json'\n\nlet writeStream: RotatingWriteStream\nlet batch: ReturnType<typeof batcher> | undefined\n\nconst writeStreamOptions = {\n  flags: 'a',\n  encoding: 'utf8' as const,\n}\nclass RotatingWriteStream {\n  file: string\n  writeStream!: fs.WriteStream\n  size: number\n  sizeLimit: number\n  private rotatePromise: Promise<void> | undefined\n  private drainPromise: Promise<void> | undefined\n  constructor(file: string, sizeLimit: number) {\n    this.file = file\n    this.size = 0\n    this.sizeLimit = sizeLimit\n    this.createWriteStream()\n  }\n  private createWriteStream() {\n    this.writeStream = fs.createWriteStream(this.file, writeStreamOptions)\n  }\n  // Recreate the file\n  private async rotate() {\n    await this.end()\n    try {\n      fs.unlinkSync(this.file)\n    } catch (err: any) {\n      // It's fine if the file does not exist yet\n      if (err.code !== 'ENOENT') {\n        throw err\n      }\n    }\n    this.size = 0\n    this.createWriteStream()\n    this.rotatePromise = undefined\n  }\n  async write(data: string): Promise<void> {\n    if (this.rotatePromise) await this.rotatePromise\n\n    this.size += data.length\n    if (this.size > this.sizeLimit) {\n      await (this.rotatePromise = this.rotate())\n    }\n\n    if (!this.writeStream.write(data, 'utf8')) {\n      if (this.drainPromise === undefined) {\n        this.drainPromise = new Promise<void>((resolve, _reject) => {\n          this.writeStream.once('drain', () => {\n            this.drainPromise = undefined\n            resolve()\n          })\n        })\n      }\n      await this.drainPromise\n    }\n  }\n\n  end(): Promise<void> {\n    return new Promise((resolve) => {\n      this.writeStream.end(resolve)\n    })\n  }\n}\n\nconst allowlistedEvents = new Set([\n  'next-build',\n  'run-turbopack',\n  'run-webpack',\n  'run-typescript',\n  'run-eslint',\n  'static-check',\n  'collect-build-traces',\n  'static-generation',\n  'output-export-full-static-export',\n  'adapter-handle-build-complete',\n  'output-standalone',\n  'telemetry-flush',\n])\n\nfunction reportToJsonBuild(event: TraceEvent) {\n  if (!allowlistedEvents.has(event.name)) {\n    return\n  }\n\n  const distDir = traceGlobals.get('distDir')\n  const phase = traceGlobals.get('phase')\n  if (!distDir || !phase) {\n    return\n  }\n\n  // Only report in production builds\n  if (phase !== PHASE_PRODUCTION_BUILD) {\n    return\n  }\n\n  if (!batch) {\n    batch = batcher(async (events: TraceEvent[]) => {\n      if (!writeStream) {\n        await fs.promises.mkdir(distDir, { recursive: true })\n        const file = path.join(distDir, 'trace-build')\n        writeStream = new RotatingWriteStream(\n          file,\n          // Development is limited to 50MB, production is unlimited\n          phase === PHASE_DEVELOPMENT_SERVER ? 52428800 : Infinity\n        )\n      }\n      const eventsJson = JSON.stringify(events)\n      try {\n        await writeStream.write(eventsJson + '\\n')\n      } catch (err) {\n        console.log(err)\n      }\n    })\n  }\n\n  batch.report({\n    ...event,\n    traceId,\n  })\n}\n\nexport default {\n  flushAll: (opts?: { end: boolean }) =>\n    batch\n      ? batch.flushAll().then(() => {\n          const phase = traceGlobals.get('phase')\n          // Only end writeStream when manually flushing in production\n          if (opts?.end || phase !== PHASE_DEVELOPMENT_SERVER) {\n            return writeStream.end()\n          }\n        })\n      : undefined,\n  report: reportToJsonBuild,\n}\n"],"names":["writeStream","batch","writeStreamOptions","flags","encoding","RotatingWriteStream","constructor","file","sizeLimit","size","createWriteStream","fs","rotate","end","unlinkSync","err","code","rotatePromise","undefined","write","data","length","drainPromise","Promise","resolve","_reject","once","allowlistedEvents","Set","reportToJsonBuild","event","has","name","distDir","traceGlobals","get","phase","PHASE_PRODUCTION_BUILD","batcher","events","promises","mkdir","recursive","path","join","PHASE_DEVELOPMENT_SERVER","Infinity","eventsJson","JSON","stringify","console","log","report","traceId","flushAll","opts","then"],"mappings":"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","ignoreList":[0]}
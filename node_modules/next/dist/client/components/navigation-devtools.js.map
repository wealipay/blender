{"version":3,"sources":["../../../src/client/components/navigation-devtools.ts"],"sourcesContent":["import type { FlightRouterState } from '../../shared/lib/app-router-types'\nimport type { Params } from '../../server/request/params'\nimport {\n  createDevToolsInstrumentedPromise,\n  type InstrumentedPromise,\n  type NavigationPromises,\n} from '../../shared/lib/hooks-client-context.shared-runtime'\nimport {\n  computeSelectedLayoutSegment,\n  getSelectedLayoutSegmentPath,\n} from '../../shared/lib/segment'\nimport { ReadonlyURLSearchParams } from './readonly-url-search-params'\n\n/**\n * Promises are cached by tree to ensure stability across suspense retries.\n */\ntype LayoutSegmentPromisesCache = {\n  selectedLayoutSegmentPromises: Map<string, InstrumentedPromise<string | null>>\n  selectedLayoutSegmentsPromises: Map<string, InstrumentedPromise<string[]>>\n}\n\nconst layoutSegmentPromisesCache = new WeakMap<\n  FlightRouterState,\n  LayoutSegmentPromisesCache\n>()\n\n/**\n * Creates instrumented promises for layout segment hooks at a given tree level.\n * This is dev-only code for React Suspense DevTools instrumentation.\n */\nexport function createLayoutSegmentPromises(\n  tree: FlightRouterState\n): LayoutSegmentPromisesCache | null {\n  if (process.env.NODE_ENV === 'production') {\n    return null\n  }\n\n  // Check if we already have cached promises for this tree\n  const cached = layoutSegmentPromisesCache.get(tree)\n  if (cached) {\n    return cached\n  }\n\n  // Create new promises and cache them\n  const segmentPromises = new Map<string, InstrumentedPromise<string | null>>()\n  const segmentsPromises = new Map<string, InstrumentedPromise<string[]>>()\n\n  const parallelRoutes = tree[1]\n  for (const parallelRouteKey of Object.keys(parallelRoutes)) {\n    const segments = getSelectedLayoutSegmentPath(tree, parallelRouteKey)\n\n    // Use the shared logic to compute the segment value\n    const segment = computeSelectedLayoutSegment(segments, parallelRouteKey)\n\n    segmentPromises.set(\n      parallelRouteKey,\n      createDevToolsInstrumentedPromise('useSelectedLayoutSegment', segment)\n    )\n    segmentsPromises.set(\n      parallelRouteKey,\n      createDevToolsInstrumentedPromise('useSelectedLayoutSegments', segments)\n    )\n  }\n\n  const result: LayoutSegmentPromisesCache = {\n    selectedLayoutSegmentPromises: segmentPromises,\n    selectedLayoutSegmentsPromises: segmentsPromises,\n  }\n\n  // Cache the result for future renders\n  layoutSegmentPromisesCache.set(tree, result)\n\n  return result\n}\n\nconst rootNavigationPromisesCache = new WeakMap<\n  FlightRouterState,\n  Map<string, NavigationPromises>\n>()\n\n/**\n * Creates instrumented navigation promises for the root app-router.\n */\nexport function createRootNavigationPromises(\n  tree: FlightRouterState,\n  pathname: string,\n  searchParams: URLSearchParams,\n  pathParams: Params\n): NavigationPromises | null {\n  if (process.env.NODE_ENV === 'production') {\n    return null\n  }\n\n  // Create stable cache keys from the values\n  const searchParamsString = searchParams.toString()\n  const pathParamsString = JSON.stringify(pathParams)\n  const cacheKey = `${pathname}:${searchParamsString}:${pathParamsString}`\n\n  // Get or create the cache for this tree\n  let treeCache = rootNavigationPromisesCache.get(tree)\n  if (!treeCache) {\n    treeCache = new Map<string, NavigationPromises>()\n    rootNavigationPromisesCache.set(tree, treeCache)\n  }\n\n  // Check if we have cached promises for this combination\n  const cached = treeCache.get(cacheKey)\n  if (cached) {\n    return cached\n  }\n\n  const readonlySearchParams = new ReadonlyURLSearchParams(searchParams)\n\n  const layoutSegmentPromises = createLayoutSegmentPromises(tree)\n\n  const promises: NavigationPromises = {\n    pathname: createDevToolsInstrumentedPromise('usePathname', pathname),\n    searchParams: createDevToolsInstrumentedPromise(\n      'useSearchParams',\n      readonlySearchParams\n    ),\n    params: createDevToolsInstrumentedPromise('useParams', pathParams),\n    ...layoutSegmentPromises,\n  }\n\n  treeCache.set(cacheKey, promises)\n\n  return promises\n}\n\nconst nestedLayoutPromisesCache = new WeakMap<\n  FlightRouterState,\n  Map<NavigationPromises | null, NavigationPromises>\n>()\n\n/**\n * Creates merged navigation promises for nested layouts.\n * Merges parent promises with layout-specific segment promises.\n */\nexport function createNestedLayoutNavigationPromises(\n  tree: FlightRouterState,\n  parentNavPromises: NavigationPromises | null\n): NavigationPromises | null {\n  if (process.env.NODE_ENV === 'production') {\n    return null\n  }\n\n  const parallelRoutes = tree[1]\n  const parallelRouteKeys = Object.keys(parallelRoutes)\n\n  // Only create promises if there are parallel routes at this level\n  if (parallelRouteKeys.length === 0) {\n    return null\n  }\n\n  // Get or create the cache for this tree\n  let treeCache = nestedLayoutPromisesCache.get(tree)\n  if (!treeCache) {\n    treeCache = new Map<NavigationPromises | null, NavigationPromises>()\n    nestedLayoutPromisesCache.set(tree, treeCache)\n  }\n\n  // Check if we have cached promises for this parent combination\n  const cached = treeCache.get(parentNavPromises)\n  if (cached) {\n    return cached\n  }\n\n  // Create merged promises\n  const layoutSegmentPromises = createLayoutSegmentPromises(tree)\n  const promises: NavigationPromises = {\n    ...parentNavPromises!,\n    ...layoutSegmentPromises,\n  }\n\n  treeCache.set(parentNavPromises, promises)\n\n  return promises\n}\n"],"names":["createLayoutSegmentPromises","createNestedLayoutNavigationPromises","createRootNavigationPromises","layoutSegmentPromisesCache","WeakMap","tree","process","env","NODE_ENV","cached","get","segmentPromises","Map","segmentsPromises","parallelRoutes","parallelRouteKey","Object","keys","segments","getSelectedLayoutSegmentPath","segment","computeSelectedLayoutSegment","set","createDevToolsInstrumentedPromise","result","selectedLayoutSegmentPromises","selectedLayoutSegmentsPromises","rootNavigationPromisesCache","pathname","searchParams","pathParams","searchParamsString","toString","pathParamsString","JSON","stringify","cacheKey","treeCache","readonlySearchParams","ReadonlyURLSearchParams","layoutSegmentPromises","promises","params","nestedLayoutPromisesCache","parentNavPromises","parallelRouteKeys","length"],"mappings":"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","ignoreList":[0]}
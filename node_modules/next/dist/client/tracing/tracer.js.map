{"version":3,"sources":["../../../src/client/tracing/tracer.ts"],"sourcesContent":["import mitt from '../../shared/lib/mitt'\nimport type { MittEmitter } from '../../shared/lib/mitt'\n\nexport type SpanOptions = {\n  startTime?: number\n  attributes?: Record<string, unknown>\n}\n\nexport type SpanState =\n  | {\n      state: 'inprogress'\n    }\n  | {\n      state: 'ended'\n      endTime: number\n    }\n\ninterface ISpan {\n  name: string\n  startTime: number\n  attributes: Record<string, unknown>\n  state: SpanState\n  end(endTime?: number): void\n}\n\nclass Span implements ISpan {\n  name: string\n  startTime: number\n  onSpanEnd: (span: Span) => void\n  state: SpanState\n  attributes: Record<string, unknown>\n\n  constructor(\n    name: string,\n    options: SpanOptions,\n    onSpanEnd: (span: Span) => void\n  ) {\n    this.name = name\n    this.attributes = options.attributes ?? {}\n    this.startTime = options.startTime ?? Date.now()\n    this.onSpanEnd = onSpanEnd\n    this.state = { state: 'inprogress' }\n  }\n\n  end(endTime?: number) {\n    if (this.state.state === 'ended') {\n      throw new Error('Span has already ended')\n    }\n\n    this.state = {\n      state: 'ended',\n      endTime: endTime ?? Date.now(),\n    }\n\n    this.onSpanEnd(this)\n  }\n}\n\nclass Tracer {\n  _emitter: MittEmitter<string> = mitt()\n\n  private handleSpanEnd = (span: Span) => {\n    this._emitter.emit('spanend', span)\n  }\n\n  startSpan(name: string, options: SpanOptions) {\n    return new Span(name, options, this.handleSpanEnd)\n  }\n\n  onSpanEnd(cb: (span: ISpan) => void): () => void {\n    this._emitter.on('spanend', cb)\n    return () => {\n      this._emitter.off('spanend', cb)\n    }\n  }\n}\n\nexport type { ISpan as Span }\nexport default new Tracer()\n"],"names":["Span","constructor","name","options","onSpanEnd","attributes","startTime","Date","now","state","end","endTime","Error","Tracer","startSpan","handleSpanEnd","cb","_emitter","on","off","mitt","span","emit"],"mappings":";;;;+BA8EA;;;eAAA;;;;+DA9EiB;AAyBjB,MAAMA;IAOJC,YACEC,IAAY,EACZC,OAAoB,EACpBC,SAA+B,CAC/B;QACA,IAAI,CAACF,IAAI,GAAGA;QACZ,IAAI,CAACG,UAAU,GAAGF,QAAQE,UAAU,IAAI,CAAC;QACzC,IAAI,CAACC,SAAS,GAAGH,QAAQG,SAAS,IAAIC,KAAKC,GAAG;QAC9C,IAAI,CAACJ,SAAS,GAAGA;QACjB,IAAI,CAACK,KAAK,GAAG;YAAEA,OAAO;QAAa;IACrC;IAEAC,IAAIC,OAAgB,EAAE;QACpB,IAAI,IAAI,CAACF,KAAK,CAACA,KAAK,KAAK,SAAS;YAChC,MAAM,qBAAmC,CAAnC,IAAIG,MAAM,2BAAV,qBAAA;uBAAA;4BAAA;8BAAA;YAAkC;QAC1C;QAEA,IAAI,CAACH,KAAK,GAAG;YACXA,OAAO;YACPE,SAASA,WAAWJ,KAAKC,GAAG;QAC9B;QAEA,IAAI,CAACJ,SAAS,CAAC,IAAI;IACrB;AACF;AAEA,MAAMS;IAOJC,UAAUZ,IAAY,EAAEC,OAAoB,EAAE;QAC5C,OAAO,IAAIH,KAAKE,MAAMC,SAAS,IAAI,CAACY,aAAa;IACnD;IAEAX,UAAUY,EAAyB,EAAc;QAC/C,IAAI,CAACC,QAAQ,CAACC,EAAE,CAAC,WAAWF;QAC5B,OAAO;YACL,IAAI,CAACC,QAAQ,CAACE,GAAG,CAAC,WAAWH;QAC/B;IACF;;aAfAC,WAAgCG,IAAAA,aAAI;aAE5BL,gBAAgB,CAACM;YACvB,IAAI,CAACJ,QAAQ,CAACK,IAAI,CAAC,WAAWD;QAChC;;AAYF;MAGA,WAAe,IAAIR","ignoreList":[0]}
{"version":3,"sources":["../../src/client/app-index.tsx"],"sourcesContent":["import './app-globals'\nimport ReactDOMClient from 'react-dom/client'\nimport React from 'react'\n// TODO: Explicitly import from client.browser\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  createFromReadableStream as createFromReadableStreamBrowser,\n  createFromFetch as createFromFetchBrowser,\n} from 'react-server-dom-webpack/client'\nimport { HeadManagerContext } from '../shared/lib/head-manager-context.shared-runtime'\nimport { onRecoverableError } from './react-client-callbacks/on-recoverable-error'\nimport {\n  onCaughtError,\n  onUncaughtError,\n} from './react-client-callbacks/error-boundary-callbacks'\nimport { callServer } from './app-call-server'\nimport { findSourceMapURL } from './app-find-source-map-url'\nimport {\n  type AppRouterActionQueue,\n  createMutableActionQueue,\n} from './components/app-router-instance'\nimport AppRouter from './components/app-router'\nimport type { InitialRSCPayload } from '../shared/lib/app-router-types'\nimport { createInitialRouterState } from './components/router-reducer/create-initial-router-state'\nimport { MissingSlotContext } from '../shared/lib/app-router-context.shared-runtime'\nimport { setAppBuildId } from './app-build-id'\nimport type { StaticIndicatorState } from './dev/hot-reloader/app/hot-reloader-app'\nimport { createInitialRSCPayloadFromFallbackPrerender } from './flight-data-helpers'\n\n/// <reference types=\"react-dom/experimental\" />\n\nconst createFromReadableStream =\n  createFromReadableStreamBrowser as (typeof import('react-server-dom-webpack/client.browser'))['createFromReadableStream']\nconst createFromFetch =\n  createFromFetchBrowser as (typeof import('react-server-dom-webpack/client.browser'))['createFromFetch']\n\nconst appElement: HTMLElement | Document = document\n\nconst encoder = new TextEncoder()\n\nlet initialServerDataBuffer: (string | Uint8Array)[] | undefined = undefined\nlet initialServerDataWriter: ReadableStreamDefaultController | undefined =\n  undefined\nlet initialServerDataLoaded = false\nlet initialServerDataFlushed = false\n\nlet initialFormStateData: null | any = null\n\ntype FlightSegment =\n  | [isBootStrap: 0]\n  | [isNotBootstrap: 1, responsePartial: string]\n  | [isFormState: 2, formState: any]\n  | [isBinary: 3, responseBase64Partial: string]\n\ntype NextFlight = Omit<Array<FlightSegment>, 'push'> & {\n  push: (seg: FlightSegment) => void\n}\n\ndeclare global {\n  // If you're working in a browser environment\n  interface Window {\n    /**\n     * request ID, dev-only\n     */\n    __next_r?: string\n    __next_f: NextFlight\n  }\n}\n\nfunction nextServerDataCallback(seg: FlightSegment): void {\n  if (seg[0] === 0) {\n    initialServerDataBuffer = []\n  } else if (seg[0] === 1) {\n    if (!initialServerDataBuffer)\n      throw new Error('Unexpected server data: missing bootstrap script.')\n\n    if (initialServerDataWriter) {\n      initialServerDataWriter.enqueue(encoder.encode(seg[1]))\n    } else {\n      initialServerDataBuffer.push(seg[1])\n    }\n  } else if (seg[0] === 2) {\n    initialFormStateData = seg[1]\n  } else if (seg[0] === 3) {\n    if (!initialServerDataBuffer)\n      throw new Error('Unexpected server data: missing bootstrap script.')\n\n    // Decode the base64 string back to binary data.\n    const binaryString = atob(seg[1])\n    const decodedChunk = new Uint8Array(binaryString.length)\n    for (var i = 0; i < binaryString.length; i++) {\n      decodedChunk[i] = binaryString.charCodeAt(i)\n    }\n\n    if (initialServerDataWriter) {\n      initialServerDataWriter.enqueue(decodedChunk)\n    } else {\n      initialServerDataBuffer.push(decodedChunk)\n    }\n  }\n}\n\nfunction isStreamErrorOrUnfinished(ctr: ReadableStreamDefaultController) {\n  // If `desiredSize` is null, it means the stream is closed or errored. If it is lower than 0, the stream is still unfinished.\n  return ctr.desiredSize === null || ctr.desiredSize < 0\n}\n\n// There might be race conditions between `nextServerDataRegisterWriter` and\n// `DOMContentLoaded`. The former will be called when React starts to hydrate\n// the root, the latter will be called when the DOM is fully loaded.\n// For streaming, the former is called first due to partial hydration.\n// For non-streaming, the latter can be called first.\n// Hence, we use two variables `initialServerDataLoaded` and\n// `initialServerDataFlushed` to make sure the writer will be closed and\n// `initialServerDataBuffer` will be cleared in the right time.\nfunction nextServerDataRegisterWriter(ctr: ReadableStreamDefaultController) {\n  if (initialServerDataBuffer) {\n    initialServerDataBuffer.forEach((val) => {\n      ctr.enqueue(typeof val === 'string' ? encoder.encode(val) : val)\n    })\n    if (initialServerDataLoaded && !initialServerDataFlushed) {\n      if (isStreamErrorOrUnfinished(ctr)) {\n        ctr.error(\n          new Error(\n            'The connection to the page was unexpectedly closed, possibly due to the stop button being clicked, loss of Wi-Fi, or an unstable internet connection.'\n          )\n        )\n      } else {\n        ctr.close()\n      }\n      initialServerDataFlushed = true\n      initialServerDataBuffer = undefined\n    }\n  }\n\n  initialServerDataWriter = ctr\n}\n\n// When `DOMContentLoaded`, we can close all pending writers to finish hydration.\nconst DOMContentLoaded = function () {\n  if (initialServerDataWriter && !initialServerDataFlushed) {\n    initialServerDataWriter.close()\n    initialServerDataFlushed = true\n    initialServerDataBuffer = undefined\n  }\n  initialServerDataLoaded = true\n}\n\n// It's possible that the DOM is already loaded.\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', DOMContentLoaded, false)\n} else {\n  // Delayed in marco task to ensure it's executed later than hydration\n  setTimeout(DOMContentLoaded)\n}\n\nconst nextServerDataLoadingGlobal = (self.__next_f = self.__next_f || [])\nnextServerDataLoadingGlobal.forEach(nextServerDataCallback)\nnextServerDataLoadingGlobal.push = nextServerDataCallback\n\nconst readable = new ReadableStream({\n  start(controller) {\n    nextServerDataRegisterWriter(controller)\n  },\n})\nif (process.env.NODE_ENV !== 'production') {\n  // @ts-expect-error\n  readable.name = 'hydration'\n}\n\nlet debugChannel:\n  | { readable?: ReadableStream; writable?: WritableStream }\n  | undefined\n\nif (\n  process.env.NODE_ENV !== 'production' &&\n  process.env.__NEXT_REACT_DEBUG_CHANNEL &&\n  typeof window !== 'undefined'\n) {\n  const { createDebugChannel } =\n    require('./dev/debug-channel') as typeof import('./dev/debug-channel')\n\n  debugChannel = createDebugChannel(undefined)\n}\n\nconst clientResumeFetch: Promise<Response> | undefined =\n  // @ts-expect-error\n  window.__NEXT_CLIENT_RESUME\n\nlet initialServerResponse: Promise<InitialRSCPayload>\nif (clientResumeFetch) {\n  initialServerResponse = Promise.resolve(\n    createFromFetch<InitialRSCPayload>(clientResumeFetch, {\n      callServer,\n      findSourceMapURL,\n      debugChannel,\n    })\n  ).then(async (fallbackInitialRSCPayload) =>\n    createInitialRSCPayloadFromFallbackPrerender(\n      await clientResumeFetch,\n      fallbackInitialRSCPayload\n    )\n  )\n} else {\n  initialServerResponse = createFromReadableStream<InitialRSCPayload>(\n    readable,\n    {\n      callServer,\n      findSourceMapURL,\n      debugChannel,\n      // @ts-expect-error This is not yet part of the React types\n      startTime: 0,\n    }\n  )\n}\n\nfunction ServerRoot({\n  initialRSCPayload,\n  actionQueue,\n  webSocket,\n  staticIndicatorState,\n}: {\n  initialRSCPayload: InitialRSCPayload\n  actionQueue: AppRouterActionQueue\n  webSocket: WebSocket | undefined\n  staticIndicatorState: StaticIndicatorState | undefined\n}): React.ReactNode {\n  const router = (\n    <AppRouter\n      actionQueue={actionQueue}\n      globalErrorState={initialRSCPayload.G}\n      webSocket={webSocket}\n      staticIndicatorState={staticIndicatorState}\n    />\n  )\n\n  if (process.env.NODE_ENV === 'development' && initialRSCPayload.m) {\n    // We provide missing slot information in a context provider only during development\n    // as we log some additional information about the missing slots in the console.\n    return (\n      <MissingSlotContext value={initialRSCPayload.m}>\n        {router}\n      </MissingSlotContext>\n    )\n  }\n\n  return router\n}\n\nconst StrictModeIfEnabled = process.env.__NEXT_STRICT_MODE_APP\n  ? React.StrictMode\n  : React.Fragment\n\nfunction Root({ children }: React.PropsWithChildren<{}>) {\n  if (process.env.__NEXT_TEST_MODE) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      window.__NEXT_HYDRATED = true\n      window.__NEXT_HYDRATED_AT = performance.now()\n      window.__NEXT_HYDRATED_CB?.()\n    }, [])\n  }\n\n  return children\n}\n\nfunction onDefaultTransitionIndicator() {\n  // TODO: Compose default with user-configureable (e.g. nprogress)\n  // TODO: Use React's default once we figure out hanging indicators: https://codesandbox.io/p/sandbox/charming-moon-hktkp6?file=%2Fsrc%2Findex.js%3A106%2C30\n  return () => {}\n}\n\nconst reactRootOptions: ReactDOMClient.RootOptions = {\n  onDefaultTransitionIndicator: onDefaultTransitionIndicator,\n  onRecoverableError,\n  onCaughtError,\n  onUncaughtError,\n}\n\nexport type ClientInstrumentationHooks = {\n  onRouterTransitionStart?: (\n    url: string,\n    navigationType: 'push' | 'replace' | 'traverse'\n  ) => void\n}\n\nexport async function hydrate(\n  instrumentationHooks: ClientInstrumentationHooks | null,\n  assetPrefix: string\n) {\n  let staticIndicatorState: StaticIndicatorState | undefined\n  let webSocket: WebSocket | undefined\n\n  if (process.env.NODE_ENV !== 'production') {\n    const { createWebSocket } =\n      require('./dev/hot-reloader/app/web-socket') as typeof import('./dev/hot-reloader/app/web-socket')\n\n    staticIndicatorState = { pathname: null, appIsrManifest: null }\n    webSocket = createWebSocket(assetPrefix, staticIndicatorState)\n  }\n  const initialRSCPayload = await initialServerResponse\n  // setAppBuildId should be called only once, during JS initialization\n  // and before any components have hydrated.\n  setAppBuildId(initialRSCPayload.b)\n\n  const initialTimestamp = Date.now()\n  const actionQueue: AppRouterActionQueue = createMutableActionQueue(\n    createInitialRouterState({\n      navigatedAt: initialTimestamp,\n      initialFlightData: initialRSCPayload.f,\n      initialCanonicalUrlParts: initialRSCPayload.c,\n      initialRenderedSearch: initialRSCPayload.q,\n      initialParallelRoutes: new Map(),\n      location: window.location,\n    }),\n    instrumentationHooks\n  )\n\n  const reactEl = (\n    <StrictModeIfEnabled>\n      <HeadManagerContext.Provider value={{ appDir: true }}>\n        <Root>\n          <ServerRoot\n            initialRSCPayload={initialRSCPayload}\n            actionQueue={actionQueue}\n            webSocket={webSocket}\n            staticIndicatorState={staticIndicatorState}\n          />\n        </Root>\n      </HeadManagerContext.Provider>\n    </StrictModeIfEnabled>\n  )\n\n  if (document.documentElement.id === '__next_error__') {\n    let element = reactEl\n    // Server rendering failed, fall back to client-side rendering\n    if (process.env.NODE_ENV !== 'production') {\n      const { RootLevelDevOverlayElement } =\n        require('../next-devtools/userspace/app/client-entry') as typeof import('../next-devtools/userspace/app/client-entry')\n\n      // Note this won't cause hydration mismatch because we are doing CSR w/o hydration\n      element = (\n        <RootLevelDevOverlayElement>{element}</RootLevelDevOverlayElement>\n      )\n    }\n\n    ReactDOMClient.createRoot(appElement, reactRootOptions).render(element)\n  } else {\n    React.startTransition(() => {\n      ReactDOMClient.hydrateRoot(appElement, reactEl, {\n        ...reactRootOptions,\n        formState: initialFormStateData,\n      })\n    })\n  }\n\n  // TODO-APP: Remove this logic when Float has GC built-in in development.\n  if (process.env.NODE_ENV !== 'production') {\n    const { linkGc } =\n      require('./app-link-gc') as typeof import('./app-link-gc')\n    linkGc()\n  }\n}\n"],"names":["hydrate","createFromReadableStream","createFromReadableStreamBrowser","createFromFetch","createFromFetchBrowser","appElement","document","encoder","TextEncoder","initialServerDataBuffer","undefined","initialServerDataWriter","initialServerDataLoaded","initialServerDataFlushed","initialFormStateData","nextServerDataCallback","seg","Error","enqueue","encode","push","binaryString","atob","decodedChunk","Uint8Array","length","i","charCodeAt","isStreamErrorOrUnfinished","ctr","desiredSize","nextServerDataRegisterWriter","forEach","val","error","close","DOMContentLoaded","readyState","addEventListener","setTimeout","nextServerDataLoadingGlobal","self","__next_f","readable","ReadableStream","start","controller","process","env","NODE_ENV","name","debugChannel","__NEXT_REACT_DEBUG_CHANNEL","window","createDebugChannel","require","clientResumeFetch","__NEXT_CLIENT_RESUME","initialServerResponse","Promise","resolve","callServer","findSourceMapURL","then","fallbackInitialRSCPayload","createInitialRSCPayloadFromFallbackPrerender","startTime","ServerRoot","initialRSCPayload","actionQueue","webSocket","staticIndicatorState","router","AppRouter","globalErrorState","G","m","MissingSlotContext","value","StrictModeIfEnabled","__NEXT_STRICT_MODE_APP","React","StrictMode","Fragment","Root","children","__NEXT_TEST_MODE","useEffect","__NEXT_HYDRATED","__NEXT_HYDRATED_AT","performance","now","__NEXT_HYDRATED_CB","onDefaultTransitionIndicator","reactRootOptions","onRecoverableError","onCaughtError","onUncaughtError","instrumentationHooks","assetPrefix","createWebSocket","pathname","appIsrManifest","setAppBuildId","b","initialTimestamp","Date","createMutableActionQueue","createInitialRouterState","navigatedAt","initialFlightData","f","initialCanonicalUrlParts","c","initialRenderedSearch","q","initialParallelRoutes","Map","location","reactEl","HeadManagerContext","Provider","appDir","documentElement","id","element","RootLevelDevOverlayElement","ReactDOMClient","createRoot","render","startTransition","hydrateRoot","formState","linkGc"],"mappings":"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","ignoreList":[0]}
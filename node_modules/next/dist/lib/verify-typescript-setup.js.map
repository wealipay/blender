{"version":3,"sources":["../../src/lib/verify-typescript-setup.ts"],"sourcesContent":["import { bold, cyan, red, yellow } from './picocolors'\nimport path, { join } from 'path'\n\nimport { hasNecessaryDependencies } from './has-necessary-dependencies'\nimport type { NecessaryDependencies } from './has-necessary-dependencies'\nimport semver from 'next/dist/compiled/semver'\nimport { CompileError } from './compile-error'\nimport * as log from '../build/output/log'\n\nimport { getTypeScriptIntent } from './typescript/getTypeScriptIntent'\nimport type { TypeCheckResult } from './typescript/runTypeCheck'\nimport { writeAppTypeDeclarations } from './typescript/writeAppTypeDeclarations'\nimport { writeConfigurationDefaults } from './typescript/writeConfigurationDefaults'\nimport { installDependencies } from './install-dependencies'\nimport { isCI } from '../server/ci-info'\nimport { missingDepsError } from './typescript/missingDependencyError'\n\nconst requiredPackages = [\n  {\n    file: 'typescript/lib/typescript.js',\n    pkg: 'typescript',\n    exportsRestrict: true,\n  },\n  {\n    file: '@types/react/index.d.ts',\n    pkg: '@types/react',\n    exportsRestrict: true,\n  },\n  {\n    file: '@types/node/index.d.ts',\n    pkg: '@types/node',\n    exportsRestrict: true,\n  },\n]\n\nexport async function verifyTypeScriptSetup({\n  dir,\n  distDir,\n  cacheDir,\n  intentDirs,\n  tsconfigPath,\n  typeCheckPreflight,\n  disableStaticImages,\n  hasAppDir,\n  hasPagesDir,\n  isolatedDevBuild,\n}: {\n  dir: string\n  distDir: string\n  cacheDir?: string\n  tsconfigPath: string | undefined\n  intentDirs: string[]\n  typeCheckPreflight: boolean\n  disableStaticImages: boolean\n  hasAppDir: boolean\n  hasPagesDir: boolean\n  isolatedDevBuild: boolean | undefined\n}): Promise<{ result?: TypeCheckResult; version: string | null }> {\n  const tsConfigFileName = tsconfigPath || 'tsconfig.json'\n  const resolvedTsConfigPath = path.join(dir, tsConfigFileName)\n\n  try {\n    // Check if the project uses TypeScript:\n    const intent = await getTypeScriptIntent(dir, intentDirs, tsConfigFileName)\n    if (!intent) {\n      return { version: null }\n    }\n\n    // Ensure TypeScript and necessary `@types/*` are installed:\n    let deps: NecessaryDependencies = hasNecessaryDependencies(\n      dir,\n      requiredPackages\n    )\n\n    if (deps.missing?.length > 0) {\n      if (isCI) {\n        // we don't attempt auto install in CI to avoid side-effects\n        // and instead log the error for installing needed packages\n        missingDepsError(dir, deps.missing)\n      }\n      console.log(\n        bold(\n          yellow(\n            `It looks like you're trying to use TypeScript but do not have the required package(s) installed.`\n          )\n        ) +\n          '\\n' +\n          'Installing dependencies' +\n          '\\n\\n' +\n          bold(\n            'If you are not trying to use TypeScript, please remove the ' +\n              cyan('tsconfig.json') +\n              ' file from your package root (and any TypeScript files in your app and pages directories).'\n          ) +\n          '\\n'\n      )\n      await installDependencies(dir, deps.missing, true).catch((err) => {\n        if (err && typeof err === 'object' && 'command' in err) {\n          console.error(\n            `Failed to install required TypeScript dependencies, please install them manually to continue:\\n` +\n              (err as any).command +\n              '\\n'\n          )\n        }\n        throw err\n      })\n      deps = hasNecessaryDependencies(dir, requiredPackages)\n    }\n\n    // Load TypeScript after we're sure it exists:\n    const tsPackageJsonPath = deps.resolved.get(\n      join('typescript', 'package.json')\n    )!\n    const typescriptPackageJson = require(tsPackageJsonPath)\n\n    const typescriptVersion = typescriptPackageJson.version\n\n    if (semver.lt(typescriptVersion, '5.1.0')) {\n      log.warn(\n        `Minimum recommended TypeScript version is v5.1.0, older versions can potentially be incompatible with Next.js. Detected: ${typescriptVersion}`\n      )\n    }\n\n    // Reconfigure (or create) the user's `tsconfig.json` for them:\n    await writeConfigurationDefaults(\n      typescriptVersion,\n      resolvedTsConfigPath,\n      intent.firstTimeSetup,\n      hasAppDir,\n      distDir,\n      hasPagesDir,\n      isolatedDevBuild\n    )\n    // Write out the necessary `next-env.d.ts` file to correctly register\n    // Next.js' types:\n    await writeAppTypeDeclarations({\n      baseDir: dir,\n      distDir,\n      imageImportsEnabled: !disableStaticImages,\n      hasPagesDir,\n      hasAppDir,\n    })\n\n    let result\n    if (typeCheckPreflight) {\n      const { runTypeCheck } =\n        require('./typescript/runTypeCheck') as typeof import('./typescript/runTypeCheck')\n\n      const tsPath = deps.resolved.get('typescript')!\n      const typescript = (await Promise.resolve(\n        require(tsPath)\n      )) as typeof import('typescript')\n\n      // Verify the project passes type-checking before we go to webpack phase:\n      result = await runTypeCheck(\n        typescript,\n        dir,\n        distDir,\n        resolvedTsConfigPath,\n        cacheDir,\n        hasAppDir\n      )\n    }\n    return { result, version: typescriptVersion }\n  } catch (err) {\n    // These are special errors that should not show a stack trace:\n    if (err instanceof CompileError) {\n      console.error(red('Failed to compile.\\n'))\n      console.error(err.message)\n      process.exit(1)\n    }\n\n    /**\n     * verifyTypeScriptSetup can be either invoked directly in the main thread (during next dev / next lint)\n     * or run in a worker (during next build). In the latter case, we need to print the error message, as the\n     * parent process will only receive an `Jest worker encountered 1 child process exceptions, exceeding retry limit`.\n     */\n\n    // we are in a worker, print the error message and exit the process\n    if (process.env.IS_NEXT_WORKER) {\n      if (err instanceof Error) {\n        console.error(err.message)\n      } else {\n        console.error(err)\n      }\n      process.exit(1)\n    }\n    // we are in the main thread, throw the error and it will be handled by the caller\n    throw err\n  }\n}\n"],"names":["verifyTypeScriptSetup","requiredPackages","file","pkg","exportsRestrict","dir","distDir","cacheDir","intentDirs","tsconfigPath","typeCheckPreflight","disableStaticImages","hasAppDir","hasPagesDir","isolatedDevBuild","tsConfigFileName","resolvedTsConfigPath","path","join","deps","intent","getTypeScriptIntent","version","hasNecessaryDependencies","missing","length","isCI","missingDepsError","console","log","bold","yellow","cyan","installDependencies","catch","err","error","command","tsPackageJsonPath","resolved","get","typescriptPackageJson","require","typescriptVersion","semver","lt","warn","writeConfigurationDefaults","firstTimeSetup","writeAppTypeDeclarations","baseDir","imageImportsEnabled","result","runTypeCheck","tsPath","typescript","Promise","resolve","CompileError","red","message","process","exit","env","IS_NEXT_WORKER","Error"],"mappings":"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","ignoreList":[0]}
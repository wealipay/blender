{"version":3,"sources":["../../src/cli/next-build.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport '../server/lib/cpu-profile'\nimport { existsSync } from 'fs'\nimport { italic } from '../lib/picocolors'\nimport build from '../build'\nimport { warn } from '../build/output/log'\nimport { printAndExit } from '../server/lib/utils'\nimport isError from '../lib/is-error'\nimport { getProjectDir } from '../lib/get-project-dir'\nimport { enableMemoryDebuggingMode } from '../lib/memory/startup'\nimport { disableMemoryDebuggingMode } from '../lib/memory/shutdown'\nimport { parseBundlerArgs } from '../lib/bundler'\nimport {\n  resolveBuildPaths,\n  parseBuildPathsInput,\n} from '../lib/resolve-build-paths'\n\nexport type NextBuildOptions = {\n  debug?: boolean\n  debugPrerender?: boolean\n  profile?: boolean\n  mangling: boolean\n  turbo?: boolean\n  turbopack?: boolean\n  webpack?: boolean\n  experimentalDebugMemoryUsage: boolean\n  experimentalAppOnly?: boolean\n  experimentalTurbo?: boolean\n  experimentalBuildMode: 'default' | 'compile' | 'generate' | 'generate-env'\n  experimentalUploadTrace?: string\n  experimentalNextConfigStripTypes?: boolean\n  debugBuildPaths?: string\n}\n\nconst nextBuild = async (options: NextBuildOptions, directory?: string) => {\n  process.on('SIGTERM', () => process.exit(143))\n  process.on('SIGINT', () => process.exit(130))\n\n  const {\n    debug,\n    debugPrerender,\n    experimentalDebugMemoryUsage,\n    profile,\n    mangling,\n    experimentalAppOnly,\n    experimentalBuildMode,\n    experimentalUploadTrace,\n    debugBuildPaths,\n  } = options\n\n  let traceUploadUrl: string | undefined\n  if (experimentalUploadTrace && !process.env.NEXT_TRACE_UPLOAD_DISABLED) {\n    traceUploadUrl = experimentalUploadTrace\n  }\n\n  if (!mangling) {\n    warn(\n      `Mangling is disabled. ${italic('Note: This may affect performance and should only be used for debugging purposes.')}`\n    )\n  }\n\n  if (profile) {\n    warn(\n      `Profiling is enabled. ${italic('Note: This may affect performance.')}`\n    )\n  }\n\n  if (debugPrerender) {\n    warn(\n      `Prerendering is running in debug mode. ${italic(\n        'Note: This may affect performance and should not be used for production.'\n      )}`\n    )\n  }\n\n  if (experimentalDebugMemoryUsage) {\n    process.env.EXPERIMENTAL_DEBUG_MEMORY_USAGE = '1'\n    enableMemoryDebuggingMode()\n  }\n\n  const dir = getProjectDir(directory)\n\n  if (!existsSync(dir)) {\n    printAndExit(`> No such directory exists as the project root: ${dir}`)\n  }\n\n  const bundler = parseBundlerArgs(options)\n\n  // Resolve selective build paths\n  let resolvedAppPaths: string[] | undefined\n  let resolvedPagePaths: string[] | undefined\n\n  if (debugBuildPaths) {\n    try {\n      const patterns = parseBuildPathsInput(debugBuildPaths)\n\n      if (patterns.length > 0) {\n        const resolved = await resolveBuildPaths(patterns, dir)\n        // Pass empty arrays to indicate \"build nothing\" vs undefined for \"build everything\"\n        resolvedAppPaths = resolved.appPaths\n        resolvedPagePaths = resolved.pagePaths\n      }\n    } catch (err) {\n      printAndExit(\n        `Failed to resolve build paths: ${isError(err) ? err.message : String(err)}`\n      )\n    }\n  }\n\n  return build(\n    dir,\n    profile,\n    debug || Boolean(process.env.NEXT_DEBUG_BUILD),\n    debugPrerender,\n    !mangling,\n    experimentalAppOnly,\n    bundler,\n    experimentalBuildMode,\n    traceUploadUrl,\n    resolvedAppPaths,\n    resolvedPagePaths\n  )\n    .catch((err) => {\n      if (experimentalDebugMemoryUsage) {\n        disableMemoryDebuggingMode()\n      }\n      console.error('')\n      if (\n        isError(err) &&\n        (err.code === 'INVALID_RESOLVE_ALIAS' ||\n          err.code === 'WEBPACK_ERRORS' ||\n          err.code === 'BUILD_OPTIMIZATION_FAILED' ||\n          err.code === 'NEXT_EXPORT_ERROR' ||\n          err.code === 'NEXT_STATIC_GEN_BAILOUT' ||\n          err.code === 'EDGE_RUNTIME_UNSUPPORTED_API')\n      ) {\n        printAndExit(`> ${err.message}`)\n      } else {\n        console.error('> Build error occurred')\n        printAndExit(err)\n      }\n    })\n    .finally(() => {\n      if (experimentalDebugMemoryUsage) {\n        disableMemoryDebuggingMode()\n      }\n    })\n}\n\nexport { nextBuild }\n"],"names":["nextBuild","options","directory","process","on","exit","debug","debugPrerender","experimentalDebugMemoryUsage","profile","mangling","experimentalAppOnly","experimentalBuildMode","experimentalUploadTrace","debugBuildPaths","traceUploadUrl","env","NEXT_TRACE_UPLOAD_DISABLED","warn","italic","EXPERIMENTAL_DEBUG_MEMORY_USAGE","enableMemoryDebuggingMode","dir","getProjectDir","existsSync","printAndExit","bundler","parseBundlerArgs","resolvedAppPaths","resolvedPagePaths","patterns","parseBuildPathsInput","length","resolved","resolveBuildPaths","appPaths","pagePaths","err","isError","message","String","build","Boolean","NEXT_DEBUG_BUILD","catch","disableMemoryDebuggingMode","console","error","code","finally"],"mappings":";;;;;+BAsJSA;;;eAAAA;;;QApJF;oBACoB;4BACJ;8DACL;qBACG;uBACQ;gEACT;+BACU;yBACY;0BACC;yBACV;mCAI1B;;;;;;AAmBP,MAAMA,YAAY,OAAOC,SAA2BC;IAClDC,QAAQC,EAAE,CAAC,WAAW,IAAMD,QAAQE,IAAI,CAAC;IACzCF,QAAQC,EAAE,CAAC,UAAU,IAAMD,QAAQE,IAAI,CAAC;IAExC,MAAM,EACJC,KAAK,EACLC,cAAc,EACdC,4BAA4B,EAC5BC,OAAO,EACPC,QAAQ,EACRC,mBAAmB,EACnBC,qBAAqB,EACrBC,uBAAuB,EACvBC,eAAe,EAChB,GAAGb;IAEJ,IAAIc;IACJ,IAAIF,2BAA2B,CAACV,QAAQa,GAAG,CAACC,0BAA0B,EAAE;QACtEF,iBAAiBF;IACnB;IAEA,IAAI,CAACH,UAAU;QACbQ,IAAAA,SAAI,EACF,CAAC,sBAAsB,EAAEC,IAAAA,kBAAM,EAAC,sFAAsF;IAE1H;IAEA,IAAIV,SAAS;QACXS,IAAAA,SAAI,EACF,CAAC,sBAAsB,EAAEC,IAAAA,kBAAM,EAAC,uCAAuC;IAE3E;IAEA,IAAIZ,gBAAgB;QAClBW,IAAAA,SAAI,EACF,CAAC,uCAAuC,EAAEC,IAAAA,kBAAM,EAC9C,6EACC;IAEP;IAEA,IAAIX,8BAA8B;QAChCL,QAAQa,GAAG,CAACI,+BAA+B,GAAG;QAC9CC,IAAAA,kCAAyB;IAC3B;IAEA,MAAMC,MAAMC,IAAAA,4BAAa,EAACrB;IAE1B,IAAI,CAACsB,IAAAA,cAAU,EAACF,MAAM;QACpBG,IAAAA,mBAAY,EAAC,CAAC,gDAAgD,EAAEH,KAAK;IACvE;IAEA,MAAMI,UAAUC,IAAAA,yBAAgB,EAAC1B;IAEjC,gCAAgC;IAChC,IAAI2B;IACJ,IAAIC;IAEJ,IAAIf,iBAAiB;QACnB,IAAI;YACF,MAAMgB,WAAWC,IAAAA,uCAAoB,EAACjB;YAEtC,IAAIgB,SAASE,MAAM,GAAG,GAAG;gBACvB,MAAMC,WAAW,MAAMC,IAAAA,oCAAiB,EAACJ,UAAUR;gBACnD,oFAAoF;gBACpFM,mBAAmBK,SAASE,QAAQ;gBACpCN,oBAAoBI,SAASG,SAAS;YACxC;QACF,EAAE,OAAOC,KAAK;YACZZ,IAAAA,mBAAY,EACV,CAAC,+BAA+B,EAAEa,IAAAA,gBAAO,EAACD,OAAOA,IAAIE,OAAO,GAAGC,OAAOH,MAAM;QAEhF;IACF;IAEA,OAAOI,IAAAA,cAAK,EACVnB,KACAb,SACAH,SAASoC,QAAQvC,QAAQa,GAAG,CAAC2B,gBAAgB,GAC7CpC,gBACA,CAACG,UACDC,qBACAe,SACAd,uBACAG,gBACAa,kBACAC,mBAECe,KAAK,CAAC,CAACP;QACN,IAAI7B,8BAA8B;YAChCqC,IAAAA,oCAA0B;QAC5B;QACAC,QAAQC,KAAK,CAAC;QACd,IACET,IAAAA,gBAAO,EAACD,QACPA,CAAAA,IAAIW,IAAI,KAAK,2BACZX,IAAIW,IAAI,KAAK,oBACbX,IAAIW,IAAI,KAAK,+BACbX,IAAIW,IAAI,KAAK,uBACbX,IAAIW,IAAI,KAAK,6BACbX,IAAIW,IAAI,KAAK,8BAA6B,GAC5C;YACAvB,IAAAA,mBAAY,EAAC,CAAC,EAAE,EAAEY,IAAIE,OAAO,EAAE;QACjC,OAAO;YACLO,QAAQC,KAAK,CAAC;YACdtB,IAAAA,mBAAY,EAACY;QACf;IACF,GACCY,OAAO,CAAC;QACP,IAAIzC,8BAA8B;YAChCqC,IAAAA,oCAA0B;QAC5B;IACF;AACJ","ignoreList":[0]}
{"version":3,"sources":["../../../src/shared/lib/bloom-filter.ts"],"sourcesContent":["// minimal implementation MurmurHash2 hash function\nfunction murmurhash2(str: string) {\n  let h = 0\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i)\n    h = Math.imul(h ^ c, 0x5bd1e995)\n    h ^= h >>> 13\n    h = Math.imul(h, 0x5bd1e995)\n  }\n  return h >>> 0\n}\n\n// default to 0.01% error rate as the filter compresses very well\nconst DEFAULT_ERROR_RATE = 0.0001\n\nexport class BloomFilter {\n  numItems: number\n  errorRate: number\n  numBits: number\n  numHashes: number\n  bitArray: number[]\n\n  constructor(numItems: number, errorRate: number = DEFAULT_ERROR_RATE) {\n    this.numItems = numItems\n    this.errorRate = errorRate\n    this.numBits = Math.ceil(\n      -(numItems * Math.log(errorRate)) / (Math.log(2) * Math.log(2))\n    )\n    this.numHashes = Math.ceil((this.numBits / numItems) * Math.log(2))\n    this.bitArray = new Array(this.numBits).fill(0)\n  }\n\n  static from(items: string[], errorRate = DEFAULT_ERROR_RATE) {\n    const filter = new BloomFilter(items.length, errorRate)\n\n    for (const item of items) {\n      filter.add(item)\n    }\n    return filter\n  }\n\n  export() {\n    const data = {\n      numItems: this.numItems,\n      errorRate: this.errorRate,\n      numBits: this.numBits,\n      numHashes: this.numHashes,\n      bitArray: this.bitArray,\n    }\n\n    if (process.env.NEXT_RUNTIME === 'nodejs') {\n      if (this.errorRate < DEFAULT_ERROR_RATE) {\n        const filterData = JSON.stringify(data)\n        const gzipSize = (\n          require('next/dist/compiled/gzip-size') as typeof import('next/dist/compiled/gzip-size')\n        ).sync(filterData)\n\n        if (gzipSize > 1024) {\n          console.warn(\n            `Creating filter with error rate less than 0.1% (0.001) can increase the size dramatically proceed with caution. Received error rate ${this.errorRate} resulted in size ${filterData.length} bytes, ${gzipSize} bytes (gzip)`\n          )\n        }\n      }\n    }\n\n    return data\n  }\n\n  import(data: ReturnType<(typeof this)['export']>) {\n    this.numItems = data.numItems\n    this.errorRate = data.errorRate\n    this.numBits = data.numBits\n    this.numHashes = data.numHashes\n    this.bitArray = data.bitArray\n  }\n\n  add(item: string) {\n    const hashValues = this.getHashValues(item)\n    hashValues.forEach((hash) => {\n      this.bitArray[hash] = 1\n    })\n  }\n\n  contains(item: string) {\n    const hashValues = this.getHashValues(item)\n    return hashValues.every((hash) => this.bitArray[hash])\n  }\n\n  getHashValues(item: string) {\n    const hashValues = []\n    for (let i = 1; i <= this.numHashes; i++) {\n      const hash = murmurhash2(`${item}${i}`) % this.numBits\n      hashValues.push(hash)\n    }\n    return hashValues\n  }\n}\n"],"names":["BloomFilter","murmurhash2","str","h","i","length","c","charCodeAt","Math","imul","DEFAULT_ERROR_RATE","constructor","numItems","errorRate","numBits","ceil","log","numHashes","bitArray","Array","fill","from","items","filter","item","add","export","data","process","env","NEXT_RUNTIME","filterData","JSON","stringify","gzipSize","require","sync","console","warn","import","hashValues","getHashValues","forEach","hash","contains","every","push"],"mappings":"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","ignoreList":[0]}
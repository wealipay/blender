{"version":3,"sources":["../../../src/shared/lib/hooks-client-context.shared-runtime.ts"],"sourcesContent":["'use client'\n\nimport { createContext } from 'react'\nimport type { Params } from '../../server/request/params'\n\nexport const SearchParamsContext = createContext<URLSearchParams | null>(null)\nexport const PathnameContext = createContext<string | null>(null)\nexport const PathParamsContext = createContext<Params | null>(null)\n\n// Dev-only context for Suspense DevTools instrumentation\n// These promises are used to track navigation hook usage in React DevTools\nexport type InstrumentedPromise<T> = Promise<T> & {\n  status: 'fulfilled'\n  value: T\n  displayName: string\n}\n\nexport type NavigationPromises = {\n  pathname: InstrumentedPromise<string>\n  searchParams: InstrumentedPromise<any> // ReadonlyURLSearchParams\n  params: InstrumentedPromise<any> // Params\n  // Layout segment hooks (updated at each layout boundary)\n  selectedLayoutSegmentPromises?: Map<\n    string,\n    InstrumentedPromise<string | null>\n  >\n  selectedLayoutSegmentsPromises?: Map<string, InstrumentedPromise<string[]>>\n}\n\nexport const NavigationPromisesContext =\n  createContext<NavigationPromises | null>(null)\n\n// Creates an instrumented promise for Suspense DevTools\n// These promises are always fulfilled and exist purely for\n// tracking in React's Suspense DevTools.\nexport function createDevToolsInstrumentedPromise<T>(\n  displayName: string,\n  value: T\n): InstrumentedPromise<T> {\n  const promise = Promise.resolve(value) as InstrumentedPromise<T>\n  promise.status = 'fulfilled'\n  promise.value = value\n  promise.displayName = `${displayName} (SSR)`\n  return promise\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  SearchParamsContext.displayName = 'SearchParamsContext'\n  PathnameContext.displayName = 'PathnameContext'\n  PathParamsContext.displayName = 'PathParamsContext'\n  NavigationPromisesContext.displayName = 'NavigationPromisesContext'\n}\n"],"names":["NavigationPromisesContext","PathParamsContext","PathnameContext","SearchParamsContext","createDevToolsInstrumentedPromise","createContext","displayName","value","promise","Promise","resolve","status","process","env","NODE_ENV"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;IA6BaA,yBAAyB;eAAzBA;;IAtBAC,iBAAiB;eAAjBA;;IADAC,eAAe;eAAfA;;IADAC,mBAAmB;eAAnBA;;IA8BGC,iCAAiC;eAAjCA;;;uBAjCc;AAGvB,MAAMD,sBAAsBE,IAAAA,oBAAa,EAAyB;AAClE,MAAMH,kBAAkBG,IAAAA,oBAAa,EAAgB;AACrD,MAAMJ,oBAAoBI,IAAAA,oBAAa,EAAgB;AAsBvD,MAAML,4BACXK,IAAAA,oBAAa,EAA4B;AAKpC,SAASD,kCACdE,WAAmB,EACnBC,KAAQ;IAER,MAAMC,UAAUC,QAAQC,OAAO,CAACH;IAChCC,QAAQG,MAAM,GAAG;IACjBH,QAAQD,KAAK,GAAGA;IAChBC,QAAQF,WAAW,GAAG,GAAGA,YAAY,MAAM,CAAC;IAC5C,OAAOE;AACT;AAEA,IAAII,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;IACzCX,oBAAoBG,WAAW,GAAG;IAClCJ,gBAAgBI,WAAW,GAAG;IAC9BL,kBAAkBK,WAAW,GAAG;IAChCN,0BAA0BM,WAAW,GAAG;AAC1C","ignoreList":[0]}
{"version":3,"sources":["../../../../../src/client/dev/hot-reloader/app/hot-reloader-app.tsx"],"sourcesContent":["/// <reference types=\"webpack/module.d.ts\" />\n\nimport type { ReactNode } from 'react'\nimport { useEffect, startTransition } from 'react'\nimport stripAnsi from 'next/dist/compiled/strip-ansi'\nimport formatWebpackMessages from '../../../../shared/lib/format-webpack-messages'\nimport {\n  REACT_REFRESH_FULL_RELOAD,\n  REACT_REFRESH_FULL_RELOAD_FROM_ERROR,\n} from '../shared'\nimport {\n  dispatcher,\n  getSerializedOverlayState,\n  getSegmentTrieData,\n} from 'next/dist/compiled/next-devtools'\nimport { ReplaySsrOnlyErrors } from '../../../../next-devtools/userspace/app/errors/replay-ssr-only-errors'\nimport { AppDevOverlayErrorBoundary } from '../../../../next-devtools/userspace/app/app-dev-overlay-error-boundary'\nimport { useErrorHandler } from '../../../../next-devtools/userspace/app/errors/use-error-handler'\nimport { RuntimeErrorHandler } from '../../runtime-error-handler'\nimport { useWebSocketPing } from './web-socket'\nimport {\n  HMR_MESSAGE_SENT_TO_BROWSER,\n  HMR_MESSAGE_SENT_TO_SERVER,\n} from '../../../../server/dev/hot-reloader-types'\nimport type {\n  HmrMessageSentToBrowser,\n  TurbopackMessageSentToBrowser,\n} from '../../../../server/dev/hot-reloader-types'\nimport type { McpErrorStateResponse } from '../../../../shared/lib/mcp-error-types'\nimport type { McpPageMetadataResponse } from '../../../../shared/lib/mcp-page-metadata-types'\nimport { useUntrackedPathname } from '../../../components/navigation-untracked'\nimport reportHmrLatency from '../../report-hmr-latency'\nimport { TurbopackHmr } from '../turbopack-hot-reloader-common'\nimport { NEXT_HMR_REFRESH_HASH_COOKIE } from '../../../components/app-router-headers'\nimport {\n  publicAppRouterInstance,\n  type GlobalErrorState,\n} from '../../../components/app-router-instance'\nimport { InvariantError } from '../../../../shared/lib/invariant-error'\nimport { getOrCreateDebugChannelReadableWriterPair } from '../../debug-channel'\n\nexport interface StaticIndicatorState {\n  pathname: string | null\n  appIsrManifest: Record<string, boolean> | null\n}\n\nlet mostRecentCompilationHash: any = null\nlet __nextDevClientId = Math.round(Math.random() * 100 + Date.now())\nlet reloading = false\nlet webpackStartMsSinceEpoch: number | null = null\nconst turbopackHmr: TurbopackHmr | null = process.env.TURBOPACK\n  ? new TurbopackHmr()\n  : null\n\nlet pendingHotUpdateWebpack = Promise.resolve()\nlet resolvePendingHotUpdateWebpack: () => void = () => {}\nfunction setPendingHotUpdateWebpack() {\n  pendingHotUpdateWebpack = new Promise((resolve) => {\n    resolvePendingHotUpdateWebpack = () => {\n      resolve()\n    }\n  })\n}\n\nexport function waitForWebpackRuntimeHotUpdate() {\n  return pendingHotUpdateWebpack\n}\n\n// There is a newer version of the code available.\nfunction handleAvailableHash(hash: string) {\n  // Update last known compilation hash.\n  mostRecentCompilationHash = hash\n}\n\n/**\n * Is there a newer version of this code available?\n * For webpack: Check if the hash changed compared to __webpack_hash__\n * For Turbopack: Always true because it doesn't have __webpack_hash__\n */\nfunction isUpdateAvailable() {\n  if (process.env.TURBOPACK) {\n    return true\n  }\n\n  /* globals __webpack_hash__ */\n  // __webpack_hash__ is the hash of the current compilation.\n  // It's a global variable injected by Webpack.\n  return mostRecentCompilationHash !== __webpack_hash__\n}\n\n// Webpack disallows updates in other states.\nfunction canApplyUpdates() {\n  return module.hot.status() === 'idle'\n}\nfunction afterApplyUpdates(fn: any) {\n  if (canApplyUpdates()) {\n    fn()\n  } else {\n    function handler(status: any) {\n      if (status === 'idle') {\n        module.hot.removeStatusHandler(handler)\n        fn()\n      }\n    }\n    module.hot.addStatusHandler(handler)\n  }\n}\n\nexport function performFullReload(\n  err: any,\n  sendMessage: (data: string) => void\n) {\n  const stackTrace =\n    err &&\n    ((err.stack && err.stack.split('\\n').slice(0, 5).join('\\n')) ||\n      err.message ||\n      err + '')\n\n  sendMessage(\n    JSON.stringify({\n      event: 'client-full-reload',\n      stackTrace,\n      hadRuntimeError: !!RuntimeErrorHandler.hadRuntimeError,\n      dependencyChain: err ? err.dependencyChain : undefined,\n    })\n  )\n\n  if (reloading) return\n  reloading = true\n  window.location.reload()\n}\n\n// Attempt to update code on the fly, fall back to a hard reload.\nfunction tryApplyUpdatesWebpack(sendMessage: (message: string) => void) {\n  if (!isUpdateAvailable() || !canApplyUpdates()) {\n    resolvePendingHotUpdateWebpack()\n    dispatcher.onBuildOk()\n    reportHmrLatency(sendMessage, [], webpackStartMsSinceEpoch!, Date.now())\n    return\n  }\n\n  function handleApplyUpdates(\n    err: any,\n    updatedModules: (string | number)[] | null\n  ) {\n    if (err || RuntimeErrorHandler.hadRuntimeError || updatedModules == null) {\n      if (err) {\n        console.warn(REACT_REFRESH_FULL_RELOAD)\n      } else if (RuntimeErrorHandler.hadRuntimeError) {\n        console.warn(REACT_REFRESH_FULL_RELOAD_FROM_ERROR)\n      }\n      performFullReload(err, sendMessage)\n      return\n    }\n\n    dispatcher.onBuildOk()\n\n    if (isUpdateAvailable()) {\n      // While we were updating, there was a new update! Do it again.\n      tryApplyUpdatesWebpack(sendMessage)\n      return\n    }\n\n    dispatcher.onRefresh()\n    resolvePendingHotUpdateWebpack()\n    reportHmrLatency(\n      sendMessage,\n      updatedModules,\n      webpackStartMsSinceEpoch!,\n      Date.now()\n    )\n\n    if (process.env.__NEXT_TEST_MODE) {\n      afterApplyUpdates(() => {\n        if (self.__NEXT_HMR_CB) {\n          self.__NEXT_HMR_CB()\n          self.__NEXT_HMR_CB = null\n        }\n      })\n    }\n  }\n\n  // https://webpack.js.org/api/hot-module-replacement/#check\n  module.hot\n    .check(/* autoApply */ false)\n    .then((updatedModules: (string | number)[] | null) => {\n      if (updatedModules == null) {\n        return null\n      }\n\n      // We should always handle an update, even if updatedModules is empty (but\n      // non-null) for any reason. That's what webpack would normally do:\n      // https://github.com/webpack/webpack/blob/3aa6b6bc3a64/lib/hmr/HotModuleReplacement.runtime.js#L296-L298\n      dispatcher.onBeforeRefresh()\n      // https://webpack.js.org/api/hot-module-replacement/#apply\n      return module.hot.apply()\n    })\n    .then(\n      (updatedModules: (string | number)[] | null) => {\n        handleApplyUpdates(null, updatedModules)\n      },\n      (err: any) => {\n        handleApplyUpdates(err, null)\n      }\n    )\n}\n\n/** Handles messages from the server for the App Router. */\nexport function processMessage(\n  message: HmrMessageSentToBrowser,\n  sendMessage: (message: string) => void,\n  processTurbopackMessage: (msg: TurbopackMessageSentToBrowser) => void,\n  staticIndicatorState: StaticIndicatorState\n) {\n  function handleErrors(errors: ReadonlyArray<unknown>) {\n    // \"Massage\" webpack messages.\n    const formatted = formatWebpackMessages({\n      errors: errors,\n      warnings: [],\n    })\n\n    // Only show the first error.\n    dispatcher.onBuildError(formatted.errors[0])\n\n    // Also log them to the console.\n    for (let i = 0; i < formatted.errors.length; i++) {\n      console.error(stripAnsi(formatted.errors[i]))\n    }\n\n    // Do not attempt to reload now.\n    // We will reload on next success instead.\n    if (process.env.__NEXT_TEST_MODE) {\n      if (self.__NEXT_HMR_CB) {\n        self.__NEXT_HMR_CB(formatted.errors[0])\n        self.__NEXT_HMR_CB = null\n      }\n    }\n  }\n\n  function handleHotUpdate() {\n    if (process.env.TURBOPACK) {\n      const hmrUpdate = turbopackHmr!.onBuilt()\n      if (hmrUpdate != null) {\n        reportHmrLatency(\n          sendMessage,\n          [...hmrUpdate.updatedModules],\n          hmrUpdate.startMsSinceEpoch,\n          hmrUpdate.endMsSinceEpoch,\n          // suppress the `client-hmr-latency` event if the update was a no-op:\n          hmrUpdate.hasUpdates\n        )\n      }\n      dispatcher.onBuildOk()\n    } else {\n      tryApplyUpdatesWebpack(sendMessage)\n    }\n  }\n\n  switch (message.type) {\n    case HMR_MESSAGE_SENT_TO_BROWSER.ISR_MANIFEST: {\n      if (process.env.__NEXT_DEV_INDICATOR) {\n        staticIndicatorState.appIsrManifest = message.data\n\n        // Handle the initial static indicator status on receiving the ISR\n        // manifest. Navigation is handled in an effect inside HotReload for\n        // pathname changes as we'll receive the updated manifest before\n        // usePathname triggers for a new value.\n\n        const isStatic = staticIndicatorState.pathname\n          ? message.data[staticIndicatorState.pathname]\n          : undefined\n\n        dispatcher.onStaticIndicator(\n          isStatic === undefined ? 'pending' : isStatic ? 'static' : 'dynamic'\n        )\n      }\n      break\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.BUILDING: {\n      dispatcher.buildingIndicatorShow()\n\n      if (process.env.TURBOPACK) {\n        turbopackHmr!.onBuilding()\n      } else {\n        webpackStartMsSinceEpoch = Date.now()\n        setPendingHotUpdateWebpack()\n        console.log('[Fast Refresh] rebuilding')\n      }\n      break\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.BUILT:\n    case HMR_MESSAGE_SENT_TO_BROWSER.SYNC: {\n      dispatcher.buildingIndicatorHide()\n\n      if (message.hash) {\n        handleAvailableHash(message.hash)\n      }\n\n      const { errors, warnings } = message\n\n      // Is undefined when it's a 'built' event\n      if ('versionInfo' in message)\n        dispatcher.onVersionInfo(message.versionInfo)\n      if ('debug' in message && message.debug)\n        dispatcher.onDebugInfo(message.debug)\n      if ('devIndicator' in message)\n        dispatcher.onDevIndicator(message.devIndicator)\n      if ('devToolsConfig' in message)\n        dispatcher.onDevToolsConfig(message.devToolsConfig)\n\n      const hasErrors = Boolean(errors && errors.length)\n      // Compilation with errors (e.g. syntax error or missing modules).\n      if (hasErrors) {\n        sendMessage(\n          JSON.stringify({\n            event: 'client-error',\n            errorCount: errors.length,\n            clientId: __nextDevClientId,\n          })\n        )\n\n        handleErrors(errors)\n        return\n      }\n\n      const hasWarnings = Boolean(warnings && warnings.length)\n      if (hasWarnings) {\n        sendMessage(\n          JSON.stringify({\n            event: 'client-warning',\n            warningCount: warnings.length,\n            clientId: __nextDevClientId,\n          })\n        )\n\n        // Print warnings to the console.\n        const formattedMessages = formatWebpackMessages({\n          warnings: warnings,\n          errors: [],\n        })\n\n        for (let i = 0; i < formattedMessages.warnings.length; i++) {\n          if (i === 5) {\n            console.warn(\n              'There were more warnings in other files.\\n' +\n                'You can find a complete log in the terminal.'\n            )\n            break\n          }\n          console.warn(stripAnsi(formattedMessages.warnings[i]))\n        }\n\n        // No early return here as we need to apply modules in the same way between warnings only and compiles without warnings\n      }\n\n      sendMessage(\n        JSON.stringify({\n          event: 'client-success',\n          clientId: __nextDevClientId,\n        })\n      )\n\n      if (message.type === HMR_MESSAGE_SENT_TO_BROWSER.BUILT) {\n        handleHotUpdate()\n      }\n      return\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.TURBOPACK_CONNECTED: {\n      processTurbopackMessage({\n        type: HMR_MESSAGE_SENT_TO_BROWSER.TURBOPACK_CONNECTED,\n        data: {\n          sessionId: message.data.sessionId,\n        },\n      })\n      break\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.TURBOPACK_MESSAGE: {\n      turbopackHmr!.onTurbopackMessage(message)\n      dispatcher.onBeforeRefresh()\n      processTurbopackMessage({\n        type: HMR_MESSAGE_SENT_TO_BROWSER.TURBOPACK_MESSAGE,\n        data: message.data,\n      })\n      if (RuntimeErrorHandler.hadRuntimeError) {\n        console.warn(REACT_REFRESH_FULL_RELOAD_FROM_ERROR)\n        performFullReload(null, sendMessage)\n      }\n      dispatcher.onRefresh()\n      break\n    }\n    // TODO-APP: make server component change more granular\n    case HMR_MESSAGE_SENT_TO_BROWSER.SERVER_COMPONENT_CHANGES: {\n      turbopackHmr?.onServerComponentChanges()\n      sendMessage(\n        JSON.stringify({\n          event: 'server-component-reload-page',\n          clientId: __nextDevClientId,\n          hash: message.hash,\n        })\n      )\n\n      // Store the latest hash in a session cookie so that it's sent back to the\n      // server with any subsequent requests.\n      document.cookie = `${NEXT_HMR_REFRESH_HASH_COOKIE}=${message.hash};path=/`\n\n      if (\n        RuntimeErrorHandler.hadRuntimeError ||\n        document.documentElement.id === '__next_error__'\n      ) {\n        if (reloading) return\n        reloading = true\n        return window.location.reload()\n      }\n\n      startTransition(() => {\n        publicAppRouterInstance.hmrRefresh()\n        dispatcher.onRefresh()\n      })\n\n      if (process.env.__NEXT_TEST_MODE) {\n        if (self.__NEXT_HMR_CB) {\n          self.__NEXT_HMR_CB()\n          self.__NEXT_HMR_CB = null\n        }\n      }\n\n      return\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.RELOAD_PAGE: {\n      turbopackHmr?.onReloadPage()\n      sendMessage(\n        JSON.stringify({\n          event: 'client-reload-page',\n          clientId: __nextDevClientId,\n        })\n      )\n      if (reloading) return\n      reloading = true\n      return window.location.reload()\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.ADDED_PAGE:\n    case HMR_MESSAGE_SENT_TO_BROWSER.REMOVED_PAGE: {\n      turbopackHmr?.onPageAddRemove()\n      // TODO-APP: potentially only refresh if the currently viewed page was added/removed.\n      return publicAppRouterInstance.hmrRefresh()\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.SERVER_ERROR: {\n      const { errorJSON } = message\n      if (errorJSON) {\n        const errorObject = JSON.parse(errorJSON)\n        const error = new Error(errorObject.message)\n        error.stack = errorObject.stack\n        handleErrors([error])\n      }\n      return\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.DEV_PAGES_MANIFEST_UPDATE: {\n      return\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.DEVTOOLS_CONFIG: {\n      dispatcher.onDevToolsConfig(message.data)\n      return\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.REACT_DEBUG_CHUNK: {\n      const { requestId, chunk } = message\n      const { writer } = getOrCreateDebugChannelReadableWriterPair(requestId)\n\n      if (chunk) {\n        writer.ready.then(() => writer.write(chunk)).catch(console.error)\n      } else {\n        // A null chunk signals that no more chunks will be sent, which allows\n        // us to close the writer.\n        // TODO: Revisit this cleanup logic when we integrate the return channel\n        // that keeps the connection open to be able to lazily retrieve debug\n        // objects.\n        writer.ready.then(() => writer.close()).catch(console.error)\n      }\n\n      return\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.REQUEST_CURRENT_ERROR_STATE: {\n      const errorState = getSerializedOverlayState()\n      const response: McpErrorStateResponse = {\n        event: HMR_MESSAGE_SENT_TO_SERVER.MCP_ERROR_STATE_RESPONSE,\n        requestId: message.requestId,\n        errorState,\n        url: window.location.href,\n      }\n      sendMessage(JSON.stringify(response))\n      return\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.REQUEST_PAGE_METADATA: {\n      const segmentTrieData = getSegmentTrieData()\n      const response: McpPageMetadataResponse = {\n        event: HMR_MESSAGE_SENT_TO_SERVER.MCP_PAGE_METADATA_RESPONSE,\n        requestId: message.requestId,\n        segmentTrieData,\n        url: window.location.href,\n      }\n      sendMessage(JSON.stringify(response))\n      return\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.CACHE_INDICATOR: {\n      dispatcher.onCacheIndicator(message.state)\n      return\n    }\n    case HMR_MESSAGE_SENT_TO_BROWSER.MIDDLEWARE_CHANGES:\n    case HMR_MESSAGE_SENT_TO_BROWSER.CLIENT_CHANGES:\n    case HMR_MESSAGE_SENT_TO_BROWSER.SERVER_ONLY_CHANGES:\n      // These action types are handled in src/client/page-bootstrap.ts\n      break\n    default: {\n      message satisfies never\n    }\n  }\n}\n\nexport default function HotReload({\n  children,\n  globalError,\n  webSocket,\n  staticIndicatorState,\n}: {\n  children: ReactNode\n  globalError: GlobalErrorState\n  webSocket: WebSocket | undefined\n  staticIndicatorState: StaticIndicatorState | undefined\n}) {\n  useErrorHandler(dispatcher.onUnhandledError, dispatcher.onUnhandledRejection)\n  useWebSocketPing(webSocket)\n\n  // We don't want access of the pathname for the dev tools to trigger a dynamic\n  // access (as the dev overlay will never be present in production).\n  const pathname = useUntrackedPathname()\n\n  if (process.env.__NEXT_DEV_INDICATOR) {\n    // this conditional is only for dead-code elimination which\n    // isn't a runtime conditional only build-time so ignore hooks rule\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (!staticIndicatorState) {\n        throw new InvariantError(\n          'Expected staticIndicatorState to be defined in dev mode.'\n        )\n      }\n\n      staticIndicatorState.pathname = pathname\n\n      if (staticIndicatorState.appIsrManifest) {\n        const isStatic = pathname\n          ? staticIndicatorState.appIsrManifest[pathname]\n          : undefined\n\n        dispatcher.onStaticIndicator(\n          isStatic === undefined ? 'pending' : isStatic ? 'static' : 'dynamic'\n        )\n      }\n    }, [pathname, staticIndicatorState])\n  }\n\n  return (\n    <AppDevOverlayErrorBoundary globalError={globalError}>\n      <ReplaySsrOnlyErrors onBlockingError={dispatcher.openErrorOverlay} />\n      {children}\n    </AppDevOverlayErrorBoundary>\n  )\n}\n"],"names":["useEffect","startTransition","stripAnsi","formatWebpackMessages","REACT_REFRESH_FULL_RELOAD","REACT_REFRESH_FULL_RELOAD_FROM_ERROR","dispatcher","getSerializedOverlayState","getSegmentTrieData","ReplaySsrOnlyErrors","AppDevOverlayErrorBoundary","useErrorHandler","RuntimeErrorHandler","useWebSocketPing","HMR_MESSAGE_SENT_TO_BROWSER","HMR_MESSAGE_SENT_TO_SERVER","useUntrackedPathname","reportHmrLatency","TurbopackHmr","NEXT_HMR_REFRESH_HASH_COOKIE","publicAppRouterInstance","InvariantError","getOrCreateDebugChannelReadableWriterPair","mostRecentCompilationHash","__nextDevClientId","Math","round","random","Date","now","reloading","webpackStartMsSinceEpoch","turbopackHmr","process","env","TURBOPACK","pendingHotUpdateWebpack","Promise","resolve","resolvePendingHotUpdateWebpack","setPendingHotUpdateWebpack","waitForWebpackRuntimeHotUpdate","handleAvailableHash","hash","isUpdateAvailable","__webpack_hash__","canApplyUpdates","module","hot","status","afterApplyUpdates","fn","handler","removeStatusHandler","addStatusHandler","performFullReload","err","sendMessage","stackTrace","stack","split","slice","join","message","JSON","stringify","event","hadRuntimeError","dependencyChain","undefined","window","location","reload","tryApplyUpdatesWebpack","onBuildOk","handleApplyUpdates","updatedModules","console","warn","onRefresh","__NEXT_TEST_MODE","self","__NEXT_HMR_CB","check","then","onBeforeRefresh","apply","processMessage","processTurbopackMessage","staticIndicatorState","handleErrors","errors","formatted","warnings","onBuildError","i","length","error","handleHotUpdate","hmrUpdate","onBuilt","startMsSinceEpoch","endMsSinceEpoch","hasUpdates","type","ISR_MANIFEST","__NEXT_DEV_INDICATOR","appIsrManifest","data","isStatic","pathname","onStaticIndicator","BUILDING","buildingIndicatorShow","onBuilding","log","BUILT","SYNC","buildingIndicatorHide","onVersionInfo","versionInfo","debug","onDebugInfo","onDevIndicator","devIndicator","onDevToolsConfig","devToolsConfig","hasErrors","Boolean","errorCount","clientId","hasWarnings","warningCount","formattedMessages","TURBOPACK_CONNECTED","sessionId","TURBOPACK_MESSAGE","onTurbopackMessage","SERVER_COMPONENT_CHANGES","onServerComponentChanges","document","cookie","documentElement","id","hmrRefresh","RELOAD_PAGE","onReloadPage","ADDED_PAGE","REMOVED_PAGE","onPageAddRemove","SERVER_ERROR","errorJSON","errorObject","parse","Error","DEV_PAGES_MANIFEST_UPDATE","DEVTOOLS_CONFIG","REACT_DEBUG_CHUNK","requestId","chunk","writer","ready","write","catch","close","REQUEST_CURRENT_ERROR_STATE","errorState","response","MCP_ERROR_STATE_RESPONSE","url","href","REQUEST_PAGE_METADATA","segmentTrieData","MCP_PAGE_METADATA_RESPONSE","CACHE_INDICATOR","onCacheIndicator","state","MIDDLEWARE_CHANGES","CLIENT_CHANGES","SERVER_ONLY_CHANGES","HotReload","children","globalError","webSocket","onUnhandledError","onUnhandledRejection","onBlockingError","openErrorOverlay"],"mappings":"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","ignoreList":[0]}
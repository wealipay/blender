{"version":3,"sources":["../../src/client/webpack.ts"],"sourcesContent":["declare const __webpack_require__: any\ndeclare let __webpack_public_path__: string\n\nimport { getDeploymentIdQueryOrEmptyString } from '../build/deployment-id'\n\n// If we have a deployment ID, we need to append it to the webpack chunk names\n// I am keeping the process check explicit so this can be statically optimized\nif (process.env.NEXT_DEPLOYMENT_ID) {\n  const suffix = getDeploymentIdQueryOrEmptyString()\n  const getChunkScriptFilename = __webpack_require__.u\n  __webpack_require__.u = (...args: any[]) =>\n    // We enode the chunk filename because our static server matches against and encoded\n    // filename path.\n    getChunkScriptFilename(...args) + suffix\n\n  const getChunkCssFilename = __webpack_require__.k\n  __webpack_require__.k = (...args: any[]) =>\n    getChunkCssFilename(...args) + suffix\n\n  const getMiniCssFilename = __webpack_require__.miniCssF\n  __webpack_require__.miniCssF = (...args: any[]) =>\n    getMiniCssFilename(...args) + suffix\n}\n\n// Ignore the module ID transform in client.\n;(self as any).__next_set_public_path__ = (path: string) => {\n  __webpack_public_path__ = path\n}\n\nexport {}\n"],"names":["getDeploymentIdQueryOrEmptyString","process","env","NEXT_DEPLOYMENT_ID","suffix","getChunkScriptFilename","__webpack_require__","u","args","getChunkCssFilename","k","getMiniCssFilename","miniCssF","self","__next_set_public_path__","path","__webpack_public_path__"],"mappings":"AAGA,SAASA,iCAAiC,QAAQ,yBAAwB;AAE1E,8EAA8E;AAC9E,8EAA8E;AAC9E,IAAIC,QAAQC,GAAG,CAACC,kBAAkB,EAAE;IAClC,MAAMC,SAASJ;IACf,MAAMK,yBAAyBC,oBAAoBC,CAAC;IACpDD,oBAAoBC,CAAC,GAAG,CAAC,GAAGC,OAC1B,oFAAoF;QACpF,iBAAiB;QACjBH,0BAA0BG,QAAQJ;IAEpC,MAAMK,sBAAsBH,oBAAoBI,CAAC;IACjDJ,oBAAoBI,CAAC,GAAG,CAAC,GAAGF,OAC1BC,uBAAuBD,QAAQJ;IAEjC,MAAMO,qBAAqBL,oBAAoBM,QAAQ;IACvDN,oBAAoBM,QAAQ,GAAG,CAAC,GAAGJ,OACjCG,sBAAsBH,QAAQJ;AAClC;AAGES,KAAaC,wBAAwB,GAAG,CAACC;IACzCC,0BAA0BD;AAC5B","ignoreList":[0]}
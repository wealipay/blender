{"version":3,"sources":["../../../src/server/app-render/get-layer-assets.tsx"],"sourcesContent":["import { getLinkAndScriptTags } from './get-css-inlined-link-tags'\nimport { getPreloadableFonts } from './get-preloadable-fonts'\nimport type { AppRenderContext } from './app-render'\nimport { getAssetQueryString } from './get-asset-query-string'\nimport { encodeURIPath } from '../../shared/lib/encode-uri-path'\nimport type { PreloadCallbacks } from './types'\nimport { renderCssResource } from './render-css-resource'\n\nexport function getLayerAssets({\n  ctx,\n  layoutOrPagePath,\n  injectedCSS: injectedCSSWithCurrentLayout,\n  injectedJS: injectedJSWithCurrentLayout,\n  injectedFontPreloadTags: injectedFontPreloadTagsWithCurrentLayout,\n  preloadCallbacks,\n}: {\n  layoutOrPagePath: string | undefined\n  injectedCSS: Set<string>\n  injectedJS: Set<string>\n  injectedFontPreloadTags: Set<string>\n  ctx: AppRenderContext\n  preloadCallbacks: PreloadCallbacks\n}): React.ReactNode {\n  const {\n    componentMod: { createElement },\n  } = ctx\n  const { styles: styleTags, scripts: scriptTags } = layoutOrPagePath\n    ? getLinkAndScriptTags(\n        ctx.clientReferenceManifest,\n        layoutOrPagePath,\n        injectedCSSWithCurrentLayout,\n        injectedJSWithCurrentLayout,\n        true\n      )\n    : { styles: [], scripts: [] }\n\n  const preloadedFontFiles = layoutOrPagePath\n    ? getPreloadableFonts(\n        ctx.renderOpts.nextFontManifest,\n        layoutOrPagePath,\n        injectedFontPreloadTagsWithCurrentLayout\n      )\n    : null\n\n  if (preloadedFontFiles) {\n    if (preloadedFontFiles.length) {\n      for (let i = 0; i < preloadedFontFiles.length; i++) {\n        const fontFilename = preloadedFontFiles[i]\n        const ext = /\\.(woff|woff2|eot|ttf|otf)$/.exec(fontFilename)![1]\n        const type = `font/${ext}`\n        const href = `${ctx.assetPrefix}/_next/${encodeURIPath(fontFilename)}`\n\n        preloadCallbacks.push(() => {\n          ctx.componentMod.preloadFont(\n            href,\n            type,\n            ctx.renderOpts.crossOrigin,\n            ctx.nonce\n          )\n        })\n      }\n    } else {\n      try {\n        let url = new URL(ctx.assetPrefix)\n        preloadCallbacks.push(() => {\n          ctx.componentMod.preconnect(url.origin, 'anonymous', ctx.nonce)\n        })\n      } catch (error) {\n        // assetPrefix must not be a fully qualified domain name. We assume\n        // we should preconnect to same origin instead\n        preloadCallbacks.push(() => {\n          ctx.componentMod.preconnect('/', 'anonymous', ctx.nonce)\n        })\n      }\n    }\n  }\n\n  const styles = renderCssResource(styleTags, ctx, preloadCallbacks)\n\n  const scripts = scriptTags\n    ? scriptTags.map((href, index) => {\n        const fullSrc = `${ctx.assetPrefix}/_next/${encodeURIPath(\n          href\n        )}${getAssetQueryString(ctx, true)}`\n\n        return createElement('script', {\n          src: fullSrc,\n          async: true,\n          key: `script-${index}`,\n          nonce: ctx.nonce,\n        })\n      })\n    : []\n\n  return styles.length || scripts.length ? [...styles, ...scripts] : null\n}\n"],"names":["getLinkAndScriptTags","getPreloadableFonts","getAssetQueryString","encodeURIPath","renderCssResource","getLayerAssets","ctx","layoutOrPagePath","injectedCSS","injectedCSSWithCurrentLayout","injectedJS","injectedJSWithCurrentLayout","injectedFontPreloadTags","injectedFontPreloadTagsWithCurrentLayout","preloadCallbacks","componentMod","createElement","styles","styleTags","scripts","scriptTags","clientReferenceManifest","preloadedFontFiles","renderOpts","nextFontManifest","length","i","fontFilename","ext","exec","type","href","assetPrefix","push","preloadFont","crossOrigin","nonce","url","URL","preconnect","origin","error","map","index","fullSrc","src","async","key"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,8BAA6B;AAClE,SAASC,mBAAmB,QAAQ,0BAAyB;AAE7D,SAASC,mBAAmB,QAAQ,2BAA0B;AAC9D,SAASC,aAAa,QAAQ,mCAAkC;AAEhE,SAASC,iBAAiB,QAAQ,wBAAuB;AAEzD,OAAO,SAASC,eAAe,EAC7BC,GAAG,EACHC,gBAAgB,EAChBC,aAAaC,4BAA4B,EACzCC,YAAYC,2BAA2B,EACvCC,yBAAyBC,wCAAwC,EACjEC,gBAAgB,EAQjB;IACC,MAAM,EACJC,cAAc,EAAEC,aAAa,EAAE,EAChC,GAAGV;IACJ,MAAM,EAAEW,QAAQC,SAAS,EAAEC,SAASC,UAAU,EAAE,GAAGb,mBAC/CP,qBACEM,IAAIe,uBAAuB,EAC3Bd,kBACAE,8BACAE,6BACA,QAEF;QAAEM,QAAQ,EAAE;QAAEE,SAAS,EAAE;IAAC;IAE9B,MAAMG,qBAAqBf,mBACvBN,oBACEK,IAAIiB,UAAU,CAACC,gBAAgB,EAC/BjB,kBACAM,4CAEF;IAEJ,IAAIS,oBAAoB;QACtB,IAAIA,mBAAmBG,MAAM,EAAE;YAC7B,IAAK,IAAIC,IAAI,GAAGA,IAAIJ,mBAAmBG,MAAM,EAAEC,IAAK;gBAClD,MAAMC,eAAeL,kBAAkB,CAACI,EAAE;gBAC1C,MAAME,MAAM,8BAA8BC,IAAI,CAACF,aAAc,CAAC,EAAE;gBAChE,MAAMG,OAAO,CAAC,KAAK,EAAEF,KAAK;gBAC1B,MAAMG,OAAO,GAAGzB,IAAI0B,WAAW,CAAC,OAAO,EAAE7B,cAAcwB,eAAe;gBAEtEb,iBAAiBmB,IAAI,CAAC;oBACpB3B,IAAIS,YAAY,CAACmB,WAAW,CAC1BH,MACAD,MACAxB,IAAIiB,UAAU,CAACY,WAAW,EAC1B7B,IAAI8B,KAAK;gBAEb;YACF;QACF,OAAO;YACL,IAAI;gBACF,IAAIC,MAAM,IAAIC,IAAIhC,IAAI0B,WAAW;gBACjClB,iBAAiBmB,IAAI,CAAC;oBACpB3B,IAAIS,YAAY,CAACwB,UAAU,CAACF,IAAIG,MAAM,EAAE,aAAalC,IAAI8B,KAAK;gBAChE;YACF,EAAE,OAAOK,OAAO;gBACd,mEAAmE;gBACnE,8CAA8C;gBAC9C3B,iBAAiBmB,IAAI,CAAC;oBACpB3B,IAAIS,YAAY,CAACwB,UAAU,CAAC,KAAK,aAAajC,IAAI8B,KAAK;gBACzD;YACF;QACF;IACF;IAEA,MAAMnB,SAASb,kBAAkBc,WAAWZ,KAAKQ;IAEjD,MAAMK,UAAUC,aACZA,WAAWsB,GAAG,CAAC,CAACX,MAAMY;QACpB,MAAMC,UAAU,GAAGtC,IAAI0B,WAAW,CAAC,OAAO,EAAE7B,cAC1C4B,QACE7B,oBAAoBI,KAAK,OAAO;QAEpC,OAAOU,cAAc,UAAU;YAC7B6B,KAAKD;YACLE,OAAO;YACPC,KAAK,CAAC,OAAO,EAAEJ,OAAO;YACtBP,OAAO9B,IAAI8B,KAAK;QAClB;IACF,KACA,EAAE;IAEN,OAAOnB,OAAOQ,MAAM,IAAIN,QAAQM,MAAM,GAAG;WAAIR;WAAWE;KAAQ,GAAG;AACrE","ignoreList":[0]}
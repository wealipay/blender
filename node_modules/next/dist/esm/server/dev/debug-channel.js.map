{"version":3,"sources":["../../../src/server/dev/debug-channel.ts"],"sourcesContent":["import { createBufferedTransformStream } from '../stream-utils/node-web-streams-helper'\nimport {\n  HMR_MESSAGE_SENT_TO_BROWSER,\n  type HmrMessageSentToBrowser,\n} from './hot-reloader-types'\n\nexport interface ReactDebugChannelForBrowser {\n  readonly readable: ReadableStream<Uint8Array>\n  // Might also get a writable stream as return channel in the future.\n}\n\nconst reactDebugChannelsByRequestId = new Map<\n  string,\n  ReactDebugChannelForBrowser\n>()\n\nexport function connectReactDebugChannel(\n  requestId: string,\n  sendToClient: (message: HmrMessageSentToBrowser) => void\n) {\n  const debugChannel = reactDebugChannelsByRequestId.get(requestId)\n\n  if (!debugChannel) {\n    return\n  }\n\n  const reader = debugChannel.readable\n    .pipeThrough(\n      // We're sending the chunks in batches to reduce overhead in the browser.\n      createBufferedTransformStream({ maxBufferByteLength: 128 * 1024 })\n    )\n    .getReader()\n\n  const stop = () => {\n    sendToClient({\n      type: HMR_MESSAGE_SENT_TO_BROWSER.REACT_DEBUG_CHUNK,\n      requestId,\n      chunk: null,\n    })\n\n    reactDebugChannelsByRequestId.delete(requestId)\n  }\n\n  const onError = (err: unknown) => {\n    console.error(new Error('React debug channel stream error', { cause: err }))\n    stop()\n  }\n\n  const progress = (entry: ReadableStreamReadResult<Uint8Array>) => {\n    if (entry.done) {\n      stop()\n    } else {\n      sendToClient({\n        type: HMR_MESSAGE_SENT_TO_BROWSER.REACT_DEBUG_CHUNK,\n        requestId,\n        chunk: entry.value,\n      })\n\n      reader.read().then(progress, onError)\n    }\n  }\n\n  reader.read().then(progress, onError)\n}\n\nexport function setReactDebugChannel(\n  requestId: string,\n  debugChannel: ReactDebugChannelForBrowser\n) {\n  reactDebugChannelsByRequestId.set(requestId, debugChannel)\n}\n\nexport function deleteReactDebugChannel(requestId: string) {\n  reactDebugChannelsByRequestId.delete(requestId)\n}\n"],"names":["createBufferedTransformStream","HMR_MESSAGE_SENT_TO_BROWSER","reactDebugChannelsByRequestId","Map","connectReactDebugChannel","requestId","sendToClient","debugChannel","get","reader","readable","pipeThrough","maxBufferByteLength","getReader","stop","type","REACT_DEBUG_CHUNK","chunk","delete","onError","err","console","error","Error","cause","progress","entry","done","value","read","then","setReactDebugChannel","set","deleteReactDebugChannel"],"mappings":"AAAA,SAASA,6BAA6B,QAAQ,0CAAyC;AACvF,SACEC,2BAA2B,QAEtB,uBAAsB;AAO7B,MAAMC,gCAAgC,IAAIC;AAK1C,OAAO,SAASC,yBACdC,SAAiB,EACjBC,YAAwD;IAExD,MAAMC,eAAeL,8BAA8BM,GAAG,CAACH;IAEvD,IAAI,CAACE,cAAc;QACjB;IACF;IAEA,MAAME,SAASF,aAAaG,QAAQ,CACjCC,WAAW,CACV,yEAAyE;IACzEX,8BAA8B;QAAEY,qBAAqB,MAAM;IAAK,IAEjEC,SAAS;IAEZ,MAAMC,OAAO;QACXR,aAAa;YACXS,MAAMd,4BAA4Be,iBAAiB;YACnDX;YACAY,OAAO;QACT;QAEAf,8BAA8BgB,MAAM,CAACb;IACvC;IAEA,MAAMc,UAAU,CAACC;QACfC,QAAQC,KAAK,CAAC,qBAA6D,CAA7D,IAAIC,MAAM,oCAAoC;YAAEC,OAAOJ;QAAI,IAA3D,qBAAA;mBAAA;wBAAA;0BAAA;QAA4D;QAC1EN;IACF;IAEA,MAAMW,WAAW,CAACC;QAChB,IAAIA,MAAMC,IAAI,EAAE;YACdb;QACF,OAAO;YACLR,aAAa;gBACXS,MAAMd,4BAA4Be,iBAAiB;gBACnDX;gBACAY,OAAOS,MAAME,KAAK;YACpB;YAEAnB,OAAOoB,IAAI,GAAGC,IAAI,CAACL,UAAUN;QAC/B;IACF;IAEAV,OAAOoB,IAAI,GAAGC,IAAI,CAACL,UAAUN;AAC/B;AAEA,OAAO,SAASY,qBACd1B,SAAiB,EACjBE,YAAyC;IAEzCL,8BAA8B8B,GAAG,CAAC3B,WAAWE;AAC/C;AAEA,OAAO,SAAS0B,wBAAwB5B,SAAiB;IACvDH,8BAA8BgB,MAAM,CAACb;AACvC","ignoreList":[0]}
{"version":3,"sources":["../../../src/server/dev/hot-reloader-turbopack.ts"],"sourcesContent":["import type { Socket } from 'net'\nimport { mkdir, writeFile } from 'fs/promises'\nimport { join, extname, relative } from 'path'\nimport { pathToFileURL } from 'url'\n\nimport ws from 'next/dist/compiled/ws'\n\nimport type { OutputState } from '../../build/output/store'\nimport { store as consoleStore } from '../../build/output/store'\nimport type {\n  CompilationError,\n  HmrMessageSentToBrowser,\n  NextJsHotReloaderInterface,\n  ReloadPageMessage,\n  SyncMessage,\n  TurbopackConnectedMessage,\n} from './hot-reloader-types'\nimport { HMR_MESSAGE_SENT_TO_BROWSER } from './hot-reloader-types'\nimport type {\n  Update as TurbopackUpdate,\n  Endpoint,\n  WrittenEndpoint,\n  TurbopackResult,\n  Project,\n  Entrypoints,\n} from '../../build/swc/types'\nimport { createDefineEnv } from '../../build/swc'\nimport * as Log from '../../build/output/log'\nimport { BLOCKED_PAGES } from '../../shared/lib/constants'\nimport {\n  getOverlayMiddleware,\n  getSourceMapMiddleware,\n  getOriginalStackFrames,\n} from './middleware-turbopack'\nimport { PageNotFoundError } from '../../shared/lib/utils'\nimport { debounce } from '../utils'\nimport { deleteCache } from './require-cache'\nimport {\n  clearAllModuleContexts,\n  clearModuleContext,\n} from '../lib/render-server'\nimport { denormalizePagePath } from '../../shared/lib/page-path/denormalize-page-path'\nimport { trace } from '../../trace'\nimport {\n  AssetMapper,\n  type ChangeSubscriptions,\n  type ClientState,\n  handleEntrypoints,\n  handlePagesErrorRoute,\n  handleRouteType,\n  hasEntrypointForKey,\n  msToNs,\n  type ReadyIds,\n  type SendHmr,\n  type StartBuilding,\n  processTopLevelIssues,\n  printNonFatalIssue,\n  normalizedPageToTurbopackStructureRoute,\n} from './turbopack-utils'\nimport {\n  propagateServerField,\n  type ServerFields,\n  type SetupOpts,\n} from '../lib/router-utils/setup-dev-bundler'\nimport { TurbopackManifestLoader } from '../../shared/lib/turbopack/manifest-loader'\nimport { findPagePathData } from './on-demand-entry-handler'\nimport type { RouteDefinition } from '../route-definitions/route-definition'\nimport {\n  type EntryKey,\n  getEntryKey,\n  splitEntryKey,\n} from '../../shared/lib/turbopack/entry-key'\nimport {\n  createBinaryHmrMessageData,\n  FAST_REFRESH_RUNTIME_RELOAD,\n} from './messages'\nimport { generateEncryptionKeyBase64 } from '../app-render/encryption-utils-server'\nimport { isAppPageRouteDefinition } from '../route-definitions/app-page-route-definition'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport type { ModernSourceMapPayload } from '../lib/source-maps'\nimport { getNodeDebugType } from '../lib/utils'\nimport { isMetadataRouteFile } from '../../lib/metadata/is-metadata-route'\nimport { setBundlerFindSourceMapImplementation } from '../patch-error-inspect'\nimport { getNextErrorFeedbackMiddleware } from '../../next-devtools/server/get-next-error-feedback-middleware'\nimport {\n  formatIssue,\n  isFileSystemCacheEnabledForDev,\n  isWellKnownError,\n  processIssues,\n  renderStyledStringToErrorAnsi,\n  type EntryIssuesMap,\n  type IssuesMap,\n  type TopLevelIssuesMap,\n} from '../../shared/lib/turbopack/utils'\nimport { getDevOverlayFontMiddleware } from '../../next-devtools/server/font/get-dev-overlay-font-middleware'\nimport { devIndicatorServerState } from './dev-indicator-server-state'\nimport { getDisableDevIndicatorMiddleware } from '../../next-devtools/server/dev-indicator-middleware'\nimport { getRestartDevServerMiddleware } from '../../next-devtools/server/restart-dev-server-middleware'\nimport { backgroundLogCompilationEvents } from '../../shared/lib/turbopack/compilation-events'\nimport { getSupportedBrowsers, printBuildErrors } from '../../build/utils'\nimport {\n  receiveBrowserLogsTurbopack,\n  handleClientFileLogs,\n} from './browser-logs/receive-logs'\nimport { normalizePath } from '../../lib/normalize-path'\nimport {\n  devToolsConfigMiddleware,\n  getDevToolsConfig,\n} from '../../next-devtools/server/devtools-config-middleware'\nimport {\n  connectReactDebugChannel,\n  deleteReactDebugChannel,\n  setReactDebugChannel,\n} from './debug-channel'\nimport {\n  getVersionInfo,\n  matchNextPageBundleRequest,\n} from './hot-reloader-shared-utils'\nimport { getMcpMiddleware } from '../mcp/get-mcp-middleware'\nimport { handleErrorStateResponse } from '../mcp/tools/get-errors'\nimport { handlePageMetadataResponse } from '../mcp/tools/get-page-metadata'\nimport { setStackFrameResolver } from '../mcp/tools/utils/format-errors'\nimport { recordMcpTelemetry } from '../mcp/mcp-telemetry-tracker'\nimport { getFileLogger } from './browser-logs/file-logger'\nimport type { ServerCacheStatus } from '../../next-devtools/dev-overlay/cache-indicator'\nimport type { Lockfile } from '../../build/lockfile'\n\nconst wsServer = new ws.Server({ noServer: true })\nconst isTestMode = !!(\n  process.env.NEXT_TEST_MODE ||\n  process.env.__NEXT_TEST_MODE ||\n  process.env.DEBUG\n)\n\nconst sessionId = Math.floor(Number.MAX_SAFE_INTEGER * Math.random())\n\ndeclare const __next__clear_chunk_cache__: (() => void) | null | undefined\n\n/**\n * Replaces turbopack:///[project] with the specified project in the `source` field.\n */\nfunction rewriteTurbopackSources(\n  projectRoot: string,\n  sourceMap: ModernSourceMapPayload\n): void {\n  if ('sections' in sourceMap) {\n    for (const section of sourceMap.sections) {\n      rewriteTurbopackSources(projectRoot, section.map)\n    }\n  } else {\n    for (let i = 0; i < sourceMap.sources.length; i++) {\n      sourceMap.sources[i] = pathToFileURL(\n        join(\n          projectRoot,\n          sourceMap.sources[i].replace(/turbopack:\\/\\/\\/\\[project\\]/, '')\n        )\n      ).toString()\n    }\n  }\n}\n\nfunction getSourceMapFromTurbopack(\n  project: Project,\n  projectRoot: string,\n  sourceURL: string\n): ModernSourceMapPayload | undefined {\n  let sourceMapJson: string | null = null\n\n  try {\n    sourceMapJson = project.getSourceMapSync(sourceURL)\n  } catch (err) {}\n\n  if (sourceMapJson === null) {\n    return undefined\n  } else {\n    const payload: ModernSourceMapPayload = JSON.parse(sourceMapJson)\n    // The sourcemap from Turbopack is not yet written to disk so its `sources`\n    // are not absolute paths yet. We need to rewrite them to be absolute paths.\n    rewriteTurbopackSources(projectRoot, payload)\n    return payload\n  }\n}\n\nexport async function createHotReloaderTurbopack(\n  opts: SetupOpts & { isSrcDir: boolean },\n  serverFields: ServerFields,\n  distDir: string,\n  resetFetch: () => void,\n  lockfile: Lockfile | undefined\n): Promise<NextJsHotReloaderInterface> {\n  const dev = true\n  const buildId = 'development'\n  const { nextConfig, dir: projectPath } = opts\n\n  const { loadBindings } =\n    require('../../build/swc') as typeof import('../../build/swc')\n\n  let bindings = await loadBindings()\n\n  // For the debugging purpose, check if createNext or equivalent next instance setup in test cases\n  // works correctly. Normally `run-test` hides output so only will be visible when `--debug` flag is used.\n  if (isTestMode) {\n    ;(require('console') as typeof import('console')).log(\n      'Creating turbopack project',\n      {\n        dir: projectPath,\n        testMode: isTestMode,\n      }\n    )\n  }\n\n  const hasRewrites =\n    opts.fsChecker.rewrites.afterFiles.length > 0 ||\n    opts.fsChecker.rewrites.beforeFiles.length > 0 ||\n    opts.fsChecker.rewrites.fallback.length > 0\n\n  const hotReloaderSpan = trace('hot-reloader', undefined, {\n    version: process.env.__NEXT_VERSION as string,\n  })\n  // Ensure the hotReloaderSpan is flushed immediately as it's the parentSpan for all processing\n  // of the current `next dev` invocation.\n  hotReloaderSpan.stop()\n\n  // Initialize log monitor for file logging\n  // Enable logging by default in development mode\n  const mcpServerEnabled = !!nextConfig.experimental.mcpServer\n  const fileLogger = getFileLogger()\n  fileLogger.initialize(distDir, mcpServerEnabled)\n\n  const encryptionKey = await generateEncryptionKeyBase64({\n    isBuild: false,\n    distDir,\n  })\n\n  // TODO: Implement\n  let clientRouterFilters: any\n  if (nextConfig.experimental.clientRouterFilter) {\n    // TODO this need to be set correctly for filesystem cache to work\n  }\n\n  const supportedBrowsers = getSupportedBrowsers(projectPath, dev)\n  const currentNodeJsVersion = process.versions.node\n\n  const rootPath =\n    opts.nextConfig.turbopack?.root ||\n    opts.nextConfig.outputFileTracingRoot ||\n    projectPath\n  const project = await bindings.turbo.createProject(\n    {\n      rootPath,\n      projectPath: normalizePath(relative(rootPath, projectPath) || '.'),\n      distDir,\n      nextConfig: opts.nextConfig,\n      watch: {\n        enable: dev,\n        pollIntervalMs: nextConfig.watchOptions?.pollIntervalMs,\n      },\n      dev,\n      env: process.env as Record<string, string>,\n      defineEnv: createDefineEnv({\n        isTurbopack: true,\n        clientRouterFilters,\n        config: nextConfig,\n        dev,\n        distDir,\n        projectPath,\n        fetchCacheKeyPrefix: opts.nextConfig.experimental.fetchCacheKeyPrefix,\n        hasRewrites,\n        // TODO: Implement\n        middlewareMatchers: undefined,\n        rewrites: opts.fsChecker.rewrites,\n      }),\n      buildId,\n      encryptionKey,\n      previewProps: opts.fsChecker.prerenderManifest.preview,\n      browserslistQuery: supportedBrowsers.join(', '),\n      noMangling: false,\n      currentNodeJsVersion,\n    },\n    {\n      persistentCaching: isFileSystemCacheEnabledForDev(opts.nextConfig),\n      memoryLimit: opts.nextConfig.experimental?.turbopackMemoryLimit,\n      isShortSession: false,\n    }\n  )\n  backgroundLogCompilationEvents(project, {\n    eventTypes: ['StartupCacheInvalidationEvent', 'TimingEvent'],\n  })\n  setBundlerFindSourceMapImplementation(\n    getSourceMapFromTurbopack.bind(null, project, projectPath)\n  )\n  opts.onDevServerCleanup?.(async () => {\n    setBundlerFindSourceMapImplementation(() => undefined)\n    await project.onExit()\n    await lockfile?.unlock()\n  })\n  const entrypointsSubscription = project.entrypointsSubscribe()\n\n  const currentWrittenEntrypoints: Map<EntryKey, WrittenEndpoint> = new Map()\n  const currentEntrypoints: Entrypoints = {\n    global: {\n      app: undefined,\n      document: undefined,\n      error: undefined,\n\n      middleware: undefined,\n      instrumentation: undefined,\n    },\n\n    page: new Map(),\n    app: new Map(),\n  }\n\n  const currentTopLevelIssues: TopLevelIssuesMap = new Map()\n  const currentEntryIssues: EntryIssuesMap = new Map()\n\n  const manifestLoader = new TurbopackManifestLoader({\n    buildId,\n    distDir,\n    encryptionKey,\n  })\n\n  // Dev specific\n  const changeSubscriptions: ChangeSubscriptions = new Map()\n  const serverPathState = new Map<string, string>()\n  const readyIds: ReadyIds = new Set()\n  let currentEntriesHandlingResolve: ((value?: unknown) => void) | undefined\n  let currentEntriesHandling = new Promise(\n    (resolve) => (currentEntriesHandlingResolve = resolve)\n  )\n\n  const assetMapper = new AssetMapper()\n\n  function clearRequireCache(\n    key: EntryKey,\n    writtenEndpoint: WrittenEndpoint,\n    {\n      force,\n    }: {\n      // Always clear the cache, don't check if files have changed\n      force?: boolean\n    } = {}\n  ): boolean {\n    if (force) {\n      for (const { path, contentHash } of writtenEndpoint.serverPaths) {\n        // We ignore source maps\n        if (path.endsWith('.map')) continue\n        const localKey = `${key}:${path}`\n        serverPathState.set(localKey, contentHash)\n        serverPathState.set(path, contentHash)\n      }\n    } else {\n      // Figure out if the server files have changed\n      let hasChange = false\n      for (const { path, contentHash } of writtenEndpoint.serverPaths) {\n        // We ignore source maps\n        if (path.endsWith('.map')) continue\n        const localKey = `${key}:${path}`\n        const localHash = serverPathState.get(localKey)\n        const globalHash = serverPathState.get(path)\n        if (\n          (localHash && localHash !== contentHash) ||\n          (globalHash && globalHash !== contentHash)\n        ) {\n          hasChange = true\n          serverPathState.set(localKey, contentHash)\n          serverPathState.set(path, contentHash)\n        } else {\n          if (!localHash) {\n            serverPathState.set(localKey, contentHash)\n          }\n          if (!globalHash) {\n            serverPathState.set(path, contentHash)\n          }\n        }\n      }\n\n      if (!hasChange) {\n        return false\n      }\n    }\n\n    resetFetch()\n\n    // Not available in:\n    // - Pages Router (no server-side HMR)\n    // - Edge Runtime (uses browser runtime which already disposes chunks individually)\n    if (typeof __next__clear_chunk_cache__ === 'function') {\n      __next__clear_chunk_cache__()\n    }\n\n    const serverPaths = writtenEndpoint.serverPaths.map(({ path: p }) =>\n      join(distDir, p)\n    )\n\n    for (const file of serverPaths) {\n      clearModuleContext(file)\n      deleteCache(file)\n    }\n\n    return true\n  }\n\n  const buildingIds = new Set()\n\n  const startBuilding: StartBuilding = (id, requestUrl, forceRebuild) => {\n    if (!forceRebuild && readyIds.has(id)) {\n      return () => {}\n    }\n    if (buildingIds.size === 0) {\n      consoleStore.setState(\n        {\n          loading: true,\n          trigger: id,\n          url: requestUrl,\n        } as OutputState,\n        true\n      )\n    }\n    buildingIds.add(id)\n    return function finishBuilding() {\n      if (buildingIds.size === 0) {\n        return\n      }\n      readyIds.add(id)\n      buildingIds.delete(id)\n      if (buildingIds.size === 0) {\n        hmrEventHappened = false\n        consoleStore.setState(\n          {\n            loading: false,\n          } as OutputState,\n          true\n        )\n      }\n    }\n  }\n\n  let hmrEventHappened = false\n  let hmrHash = 0\n\n  const clientsWithoutRequestId = new Set<ws>()\n  const clientsByRequestId = new Map<string, ws>()\n  const cacheStatusesByRequestId = new Map<string, ServerCacheStatus>()\n  const clientStates = new WeakMap<ws, ClientState>()\n\n  function sendToClient(client: ws, message: HmrMessageSentToBrowser) {\n    const data =\n      typeof message.type === 'number'\n        ? createBinaryHmrMessageData(message)\n        : JSON.stringify(message)\n\n    client.send(data)\n  }\n\n  function sendEnqueuedMessages() {\n    for (const [, issueMap] of currentEntryIssues) {\n      if (\n        [...issueMap.values()].filter((i) => i.severity !== 'warning').length >\n        0\n      ) {\n        // During compilation errors we want to delay the HMR events until errors are fixed\n        return\n      }\n    }\n\n    for (const client of [\n      ...clientsWithoutRequestId,\n      ...clientsByRequestId.values(),\n    ]) {\n      const state = clientStates.get(client)\n      if (!state) {\n        continue\n      }\n\n      for (const [, issueMap] of state.clientIssues) {\n        if (\n          [...issueMap.values()].filter((i) => i.severity !== 'warning')\n            .length > 0\n        ) {\n          // During compilation errors we want to delay the HMR events until errors are fixed\n          return\n        }\n      }\n\n      for (const message of state.messages.values()) {\n        sendToClient(client, message)\n      }\n      state.messages.clear()\n\n      if (state.turbopackUpdates.length > 0) {\n        sendToClient(client, {\n          type: HMR_MESSAGE_SENT_TO_BROWSER.TURBOPACK_MESSAGE,\n          data: state.turbopackUpdates,\n        })\n        state.turbopackUpdates.length = 0\n      }\n    }\n  }\n  const sendEnqueuedMessagesDebounce = debounce(sendEnqueuedMessages, 2)\n\n  const sendHmr: SendHmr = (id: string, message: HmrMessageSentToBrowser) => {\n    for (const client of [\n      ...clientsWithoutRequestId,\n      ...clientsByRequestId.values(),\n    ]) {\n      clientStates.get(client)?.messages.set(id, message)\n    }\n\n    hmrEventHappened = true\n    sendEnqueuedMessagesDebounce()\n  }\n\n  function sendTurbopackMessage(payload: TurbopackUpdate) {\n    // TODO(PACK-2049): For some reason we end up emitting hundreds of issues messages on bigger apps,\n    //   a lot of which are duplicates.\n    //   They are currently not handled on the client at all, so might as well not send them for now.\n    payload.diagnostics = []\n    payload.issues = []\n\n    for (const client of [\n      ...clientsWithoutRequestId,\n      ...clientsByRequestId.values(),\n    ]) {\n      clientStates.get(client)?.turbopackUpdates.push(payload)\n    }\n\n    hmrEventHappened = true\n    sendEnqueuedMessagesDebounce()\n  }\n\n  async function subscribeToChanges(\n    key: EntryKey,\n    includeIssues: boolean,\n    endpoint: Endpoint,\n    createMessage: (\n      change: TurbopackResult,\n      hash: string\n    ) => Promise<HmrMessageSentToBrowser> | HmrMessageSentToBrowser | void,\n    onError?: (\n      error: Error\n    ) => Promise<HmrMessageSentToBrowser> | HmrMessageSentToBrowser | void\n  ) {\n    if (changeSubscriptions.has(key)) {\n      return\n    }\n\n    const { side } = splitEntryKey(key)\n\n    const changedPromise = endpoint[`${side}Changed`](includeIssues)\n    changeSubscriptions.set(key, changedPromise)\n    try {\n      const changed = await changedPromise\n\n      for await (const change of changed) {\n        processIssues(currentEntryIssues, key, change, false, true)\n        // TODO: Get an actual content hash from Turbopack.\n        const message = await createMessage(change, String(++hmrHash))\n        if (message) {\n          sendHmr(key, message)\n        }\n      }\n    } catch (e) {\n      changeSubscriptions.delete(key)\n      const payload = await onError?.(e as Error)\n      if (payload) {\n        sendHmr(key, payload)\n      }\n      return\n    }\n    changeSubscriptions.delete(key)\n  }\n\n  async function unsubscribeFromChanges(key: EntryKey) {\n    const subscription = await changeSubscriptions.get(key)\n    if (subscription) {\n      await subscription.return?.()\n      changeSubscriptions.delete(key)\n    }\n    currentEntryIssues.delete(key)\n  }\n\n  async function subscribeToHmrEvents(client: ws, id: string) {\n    const key = getEntryKey('assets', 'client', id)\n    if (!hasEntrypointForKey(currentEntrypoints, key, assetMapper)) {\n      // maybe throw an error / force the client to reload?\n      return\n    }\n\n    const state = clientStates.get(client)\n    if (!state || state.subscriptions.has(id)) {\n      return\n    }\n\n    const subscription = project!.hmrEvents(id)\n    state.subscriptions.set(id, subscription)\n\n    // The subscription will always emit once, which is the initial\n    // computation. This is not a change, so swallow it.\n    try {\n      await subscription.next()\n\n      for await (const data of subscription) {\n        processIssues(state.clientIssues, key, data, false, true)\n        if (data.type !== 'issues') {\n          sendTurbopackMessage(data)\n        }\n      }\n    } catch (e) {\n      // The client might be using an HMR session from a previous server, tell them\n      // to fully reload the page to resolve the issue. We can't use\n      // `hotReloader.send` since that would force every connected client to\n      // reload, only this client is out of date.\n      const reloadMessage: ReloadPageMessage = {\n        type: HMR_MESSAGE_SENT_TO_BROWSER.RELOAD_PAGE,\n        data: `error in HMR event subscription for ${id}: ${e}`,\n      }\n      sendToClient(client, reloadMessage)\n      client.close()\n      return\n    }\n  }\n\n  function unsubscribeFromHmrEvents(client: ws, id: string) {\n    const state = clientStates.get(client)\n    if (!state) {\n      return\n    }\n\n    const subscription = state.subscriptions.get(id)\n    subscription?.return!()\n\n    const key = getEntryKey('assets', 'client', id)\n    state.clientIssues.delete(key)\n  }\n\n  async function handleEntrypointsSubscription() {\n    for await (const entrypoints of entrypointsSubscription) {\n      if (!currentEntriesHandlingResolve) {\n        currentEntriesHandling = new Promise(\n          // eslint-disable-next-line no-loop-func\n          (resolve) => (currentEntriesHandlingResolve = resolve)\n        )\n      }\n\n      // Always process issues/diagnostics, even if there are no entrypoints yet\n      processTopLevelIssues(currentTopLevelIssues, entrypoints)\n\n      // Certain crtical issues prevent any entrypoints from being constructed so return early\n      if (!('routes' in entrypoints)) {\n        printBuildErrors(entrypoints, true)\n\n        currentEntriesHandlingResolve!()\n        currentEntriesHandlingResolve = undefined\n        continue\n      }\n\n      const routes = entrypoints.routes\n      const existingRoutes = [\n        ...currentEntrypoints.app.keys(),\n        ...currentEntrypoints.page.keys(),\n      ]\n      const newRoutes = [...routes.keys()]\n\n      const addedRoutes = newRoutes.filter(\n        (route) =>\n          !currentEntrypoints.app.has(route) &&\n          !currentEntrypoints.page.has(route)\n      )\n      const removedRoutes = existingRoutes.filter((route) => !routes.has(route))\n\n      await handleEntrypoints({\n        entrypoints: entrypoints as any,\n\n        currentEntrypoints,\n\n        currentEntryIssues,\n        manifestLoader,\n        devRewrites: opts.fsChecker.rewrites,\n        productionRewrites: undefined,\n        logErrors: true,\n\n        dev: {\n          assetMapper,\n          changeSubscriptions,\n          clients: [...clientsWithoutRequestId, ...clientsByRequestId.values()],\n          clientStates,\n          serverFields,\n\n          hooks: {\n            handleWrittenEndpoint: (id, result, forceDeleteCache) => {\n              currentWrittenEntrypoints.set(id, result)\n              return clearRequireCache(id, result, { force: forceDeleteCache })\n            },\n            propagateServerField: propagateServerField.bind(null, opts),\n            sendHmr,\n            startBuilding,\n            subscribeToChanges,\n            unsubscribeFromChanges,\n            unsubscribeFromHmrEvents,\n          },\n        },\n      })\n\n      // Reload matchers when the files have been compiled\n      await propagateServerField(opts, 'reloadMatchers', undefined)\n\n      if (addedRoutes.length > 0 || removedRoutes.length > 0) {\n        // When the list of routes changes a new manifest should be fetched for Pages Router.\n        hotReloader.send({\n          type: HMR_MESSAGE_SENT_TO_BROWSER.DEV_PAGES_MANIFEST_UPDATE,\n          data: [\n            {\n              devPagesManifest: true,\n            },\n          ],\n        })\n      }\n\n      for (const route of addedRoutes) {\n        hotReloader.send({\n          type: HMR_MESSAGE_SENT_TO_BROWSER.ADDED_PAGE,\n          data: [route],\n        })\n      }\n\n      for (const route of removedRoutes) {\n        hotReloader.send({\n          type: HMR_MESSAGE_SENT_TO_BROWSER.REMOVED_PAGE,\n          data: [route],\n        })\n      }\n\n      currentEntriesHandlingResolve!()\n      currentEntriesHandlingResolve = undefined\n    }\n  }\n\n  await mkdir(join(distDir, 'server'), { recursive: true })\n  await mkdir(join(distDir, 'static', buildId), { recursive: true })\n  await writeFile(\n    join(distDir, 'package.json'),\n    JSON.stringify(\n      {\n        type: 'commonjs',\n      },\n      null,\n      2\n    )\n  )\n\n  const middlewares = [\n    getOverlayMiddleware({\n      project,\n      projectPath,\n      isSrcDir: opts.isSrcDir,\n    }),\n    getSourceMapMiddleware(project),\n    getNextErrorFeedbackMiddleware(opts.telemetry),\n    getDevOverlayFontMiddleware(),\n    getDisableDevIndicatorMiddleware(),\n    getRestartDevServerMiddleware({\n      telemetry: opts.telemetry,\n      turbopackProject: project,\n    }),\n    devToolsConfigMiddleware({\n      distDir,\n      sendUpdateSignal: (data) => {\n        hotReloader.send({\n          type: HMR_MESSAGE_SENT_TO_BROWSER.DEVTOOLS_CONFIG,\n          data,\n        })\n      },\n    }),\n    ...(nextConfig.experimental.mcpServer\n      ? [\n          getMcpMiddleware({\n            projectPath,\n            distDir,\n            sendHmrMessage: (message) => hotReloader.send(message),\n            getActiveConnectionCount: () =>\n              clientsWithoutRequestId.size + clientsByRequestId.size,\n            getDevServerUrl: () => process.env.__NEXT_PRIVATE_ORIGIN,\n          }),\n        ]\n      : []),\n  ]\n\n  setStackFrameResolver(async (request) => {\n    return getOriginalStackFrames({\n      project,\n      projectPath,\n      isServer: request.isServer,\n      isEdgeServer: request.isEdgeServer,\n      isAppDirectory: request.isAppDirectory,\n      frames: request.frames,\n    })\n  })\n\n  let versionInfoCached: ReturnType<typeof getVersionInfo> | undefined\n  // This fetch, even though not awaited, is not kicked off eagerly because the first `fetch()` in\n  // Node.js adds roughly 20ms main-thread blocking to load the SSL certificate cache\n  // We don't want that blocking time to be in the hot path for the `ready in` logging.\n  // Instead, the fetch is kicked off lazily when the first `getVersionInfoCached()` is called.\n  const getVersionInfoCached = (): ReturnType<typeof getVersionInfo> => {\n    if (!versionInfoCached) {\n      versionInfoCached = getVersionInfo()\n    }\n    return versionInfoCached\n  }\n\n  let devtoolsFrontendUrl: string | undefined\n  const nodeDebugType = getNodeDebugType()\n  if (nodeDebugType) {\n    const debugPort = process.debugPort\n    let debugInfo\n    try {\n      // It requires to use 127.0.0.1 instead of localhost for server-side fetching.\n      const debugInfoList = await fetch(\n        `http://127.0.0.1:${debugPort}/json/list`\n      ).then((res) => res.json())\n      debugInfo = debugInfoList[0]\n    } catch {}\n    if (debugInfo) {\n      devtoolsFrontendUrl = debugInfo.devtoolsFrontendUrl\n    }\n  }\n\n  const hotReloader: NextJsHotReloaderInterface = {\n    turbopackProject: project,\n    activeWebpackConfigs: undefined,\n    serverStats: null,\n    edgeServerStats: null,\n    async run(req, res, _parsedUrl) {\n      // intercept page chunks request and ensure them with turbopack\n      if (req.url?.startsWith('/_next/static/chunks/pages/')) {\n        const params = matchNextPageBundleRequest(req.url)\n\n        if (params) {\n          const decodedPagePath = `/${params.path\n            .map((param: string) => decodeURIComponent(param))\n            .join('/')}`\n\n          const denormalizedPagePath = denormalizePagePath(decodedPagePath)\n\n          await hotReloader\n            .ensurePage({\n              page: denormalizedPagePath,\n              clientOnly: false,\n              definition: undefined,\n              url: req.url,\n            })\n            .catch(console.error)\n        }\n      }\n\n      for (const middleware of middlewares) {\n        let calledNext = false\n\n        await middleware(req, res, () => {\n          calledNext = true\n        })\n\n        if (!calledNext) {\n          return { finished: true }\n        }\n      }\n\n      // Request was not finished.\n      return { finished: undefined }\n    },\n\n    // TODO: Figure out if socket type can match the NextJsHotReloaderInterface\n    onHMR(req, socket: Socket, head, onUpgrade) {\n      wsServer.handleUpgrade(req, socket, head, (client) => {\n        const clientIssues: EntryIssuesMap = new Map()\n        const subscriptions: Map<string, AsyncIterator<any>> = new Map()\n\n        const requestId = req.url\n          ? new URL(req.url, 'http://n').searchParams.get('id')\n          : null\n\n        // Clients with a request ID are inferred App Router clients. If Cache\n        // Components is not enabled, we consider those legacy clients. Pages\n        // Router clients are also considered legacy clients. TODO: Maybe mark\n        // clients as App Router / Pages Router clients explicitly, instead of\n        // inferring it from the presence of a request ID.\n        if (requestId) {\n          clientsByRequestId.set(requestId, client)\n          const enableCacheComponents = nextConfig.cacheComponents\n          if (enableCacheComponents) {\n            onUpgrade(client, { isLegacyClient: false })\n            const cacheStatus = cacheStatusesByRequestId.get(requestId)\n            if (cacheStatus !== undefined) {\n              sendToClient(client, {\n                type: HMR_MESSAGE_SENT_TO_BROWSER.CACHE_INDICATOR,\n                state: cacheStatus,\n              })\n              cacheStatusesByRequestId.delete(requestId)\n            }\n          } else {\n            onUpgrade(client, { isLegacyClient: true })\n          }\n        } else {\n          clientsWithoutRequestId.add(client)\n          onUpgrade(client, { isLegacyClient: true })\n        }\n\n        clientStates.set(client, {\n          clientIssues,\n          messages: new Map(),\n          turbopackUpdates: [],\n          subscriptions,\n        })\n\n        client.on('close', () => {\n          // Remove active subscriptions\n          for (const subscription of subscriptions.values()) {\n            subscription.return?.()\n          }\n          clientStates.delete(client)\n\n          if (requestId) {\n            clientsByRequestId.delete(requestId)\n            deleteReactDebugChannel(requestId)\n          } else {\n            clientsWithoutRequestId.delete(client)\n          }\n        })\n\n        client.addEventListener('message', async ({ data }) => {\n          const parsedData = JSON.parse(\n            typeof data !== 'string' ? data.toString() : data\n          )\n\n          // Next.js messages\n          switch (parsedData.event) {\n            case 'span-end': {\n              hotReloaderSpan.manualTraceChild(\n                parsedData.spanName,\n                msToNs(parsedData.startTime),\n                msToNs(parsedData.endTime),\n                parsedData.attributes\n              )\n              break\n            }\n            case 'client-hmr-latency': // { id, startTime, endTime, page, updatedModules, isPageHidden }\n              hotReloaderSpan.manualTraceChild(\n                parsedData.event,\n                msToNs(parsedData.startTime),\n                msToNs(parsedData.endTime),\n                {\n                  updatedModules: parsedData.updatedModules,\n                  page: parsedData.page,\n                  isPageHidden: parsedData.isPageHidden,\n                }\n              )\n              break\n\n            case 'client-error': // { errorCount, clientId }\n            case 'client-warning': // { warningCount, clientId }\n            case 'client-success': // { clientId }\n            case 'server-component-reload-page': // { clientId }\n            case 'client-reload-page': // { clientId }\n            case 'client-removed-page': // { page }\n            case 'client-full-reload': // { stackTrace, hadRuntimeError }\n              const { hadRuntimeError, dependencyChain } = parsedData\n              if (hadRuntimeError) {\n                Log.warn(FAST_REFRESH_RUNTIME_RELOAD)\n              }\n              if (\n                Array.isArray(dependencyChain) &&\n                typeof dependencyChain[0] === 'string'\n              ) {\n                const cleanedModulePath = dependencyChain[0]\n                  .replace(/^\\[project\\]/, '.')\n                  .replace(/ \\[.*\\] \\(.*\\)$/, '')\n                Log.warn(\n                  `Fast Refresh had to perform a full reload when ${cleanedModulePath} changed. Read more: https://nextjs.org/docs/messages/fast-refresh-reload`\n                )\n              }\n              break\n            case 'client-added-page':\n              // TODO\n              break\n            case 'browser-logs': {\n              if (nextConfig.experimental.browserDebugInfoInTerminal) {\n                await receiveBrowserLogsTurbopack({\n                  entries: parsedData.entries,\n                  router: parsedData.router,\n                  sourceType: parsedData.sourceType,\n                  project,\n                  projectPath,\n                  distDir,\n                  config: nextConfig.experimental.browserDebugInfoInTerminal,\n                })\n              }\n              break\n            }\n            case 'client-file-logs': {\n              // Always log to file regardless of terminal flag\n              await handleClientFileLogs(parsedData.logs)\n              break\n            }\n            case 'ping': {\n              // Handle ping events to keep WebSocket connections alive\n              // No-op - just acknowledge the ping\n              break\n            }\n\n            case 'mcp-error-state-response': {\n              handleErrorStateResponse(\n                parsedData.requestId,\n                parsedData.errorState,\n                parsedData.url\n              )\n              break\n            }\n\n            case 'mcp-page-metadata-response': {\n              handlePageMetadataResponse(\n                parsedData.requestId,\n                parsedData.segmentTrieData,\n                parsedData.url\n              )\n              break\n            }\n\n            default:\n              // Might be a Turbopack message...\n              if (!parsedData.type) {\n                throw new Error(`unrecognized HMR message \"${data}\"`)\n              }\n          }\n\n          // Turbopack messages\n          switch (parsedData.type) {\n            case 'turbopack-subscribe':\n              subscribeToHmrEvents(client, parsedData.path)\n              break\n\n            case 'turbopack-unsubscribe':\n              unsubscribeFromHmrEvents(client, parsedData.path)\n              break\n\n            default:\n              if (!parsedData.event) {\n                throw new Error(`unrecognized Turbopack HMR message \"${data}\"`)\n              }\n          }\n        })\n\n        const turbopackConnectedMessage: TurbopackConnectedMessage = {\n          type: HMR_MESSAGE_SENT_TO_BROWSER.TURBOPACK_CONNECTED,\n          data: { sessionId },\n        }\n        sendToClient(client, turbopackConnectedMessage)\n\n        const errors: CompilationError[] = []\n\n        for (const entryIssues of currentEntryIssues.values()) {\n          for (const issue of entryIssues.values()) {\n            if (issue.severity !== 'warning') {\n              errors.push({\n                message: formatIssue(issue),\n              })\n            } else {\n              printNonFatalIssue(issue)\n            }\n          }\n        }\n\n        if (devIndicatorServerState.disabledUntil < Date.now()) {\n          devIndicatorServerState.disabledUntil = 0\n        }\n\n        ;(async function () {\n          const versionInfo = await getVersionInfoCached()\n          const devToolsConfig = await getDevToolsConfig(distDir)\n\n          const syncMessage: SyncMessage = {\n            type: HMR_MESSAGE_SENT_TO_BROWSER.SYNC,\n            errors,\n            warnings: [],\n            hash: '',\n            versionInfo,\n            debug: {\n              devtoolsFrontendUrl,\n            },\n            devIndicator: devIndicatorServerState,\n            devToolsConfig,\n          }\n\n          sendToClient(client, syncMessage)\n\n          if (requestId) {\n            connectReactDebugChannel(requestId, sendToClient.bind(null, client))\n          }\n        })()\n      })\n    },\n\n    send(action) {\n      const payload = JSON.stringify(action)\n\n      for (const client of [\n        ...clientsWithoutRequestId,\n        ...clientsByRequestId.values(),\n      ]) {\n        client.send(payload)\n      }\n    },\n\n    sendToLegacyClients(action) {\n      const payload = JSON.stringify(action)\n\n      // Clients with a request ID are inferred App Router clients. If Cache\n      // Components is not enabled, we consider those legacy clients. Pages\n      // Router clients are also considered legacy clients. TODO: Maybe mark\n      // clients as App Router / Pages Router clients explicitly, instead of\n      // inferring it from the presence of a request ID.\n\n      if (!nextConfig.cacheComponents) {\n        for (const client of clientsByRequestId.values()) {\n          client.send(payload)\n        }\n      }\n\n      for (const client of clientsWithoutRequestId) {\n        client.send(payload)\n      }\n    },\n\n    setCacheStatus(\n      status: ServerCacheStatus,\n      htmlRequestId: string,\n      requestId: string\n    ): void {\n      // Legacy clients don't have Cache Components.\n      const client = clientsByRequestId.get(htmlRequestId)\n      if (client !== undefined) {\n        sendToClient(client, {\n          type: HMR_MESSAGE_SENT_TO_BROWSER.CACHE_INDICATOR,\n          state: status,\n        })\n      } else {\n        // If the client is not connected, store the status so that we can send it\n        // when the client connects.\n        cacheStatusesByRequestId.set(requestId, status)\n      }\n    },\n\n    setReactDebugChannel(debugChannel, htmlRequestId, requestId) {\n      // Store the debug channel, regardless of whether the client is connected.\n      setReactDebugChannel(requestId, debugChannel)\n\n      // If the client is connected, we can connect the debug channel\n      // immediately. Otherwise, we'll do that when the client connects.\n      const client = clientsByRequestId.get(htmlRequestId)\n\n      if (client) {\n        connectReactDebugChannel(requestId, sendToClient.bind(null, client))\n      }\n    },\n\n    setHmrServerError(_error) {\n      // Not implemented yet.\n    },\n    clearHmrServerError() {\n      // Not implemented yet.\n    },\n    async start() {},\n    async getCompilationErrors(page) {\n      const appEntryKey = getEntryKey('app', 'server', page)\n      const pagesEntryKey = getEntryKey('pages', 'server', page)\n\n      const topLevelIssues = currentTopLevelIssues.values()\n\n      const thisEntryIssues =\n        currentEntryIssues.get(appEntryKey) ??\n        currentEntryIssues.get(pagesEntryKey)\n\n      if (thisEntryIssues !== undefined && thisEntryIssues.size > 0) {\n        // If there is an error related to the requesting page we display it instead of the first error\n        return [...topLevelIssues, ...thisEntryIssues.values()]\n          .map((issue) => {\n            const formattedIssue = formatIssue(issue)\n            if (issue.severity === 'warning') {\n              printNonFatalIssue(issue)\n              return null\n            } else if (isWellKnownError(issue)) {\n              Log.error(formattedIssue)\n            }\n\n            return new Error(formattedIssue)\n          })\n          .filter((error) => error !== null)\n      }\n\n      // Otherwise, return all errors across pages\n      const errors = []\n      for (const issue of topLevelIssues) {\n        if (issue.severity !== 'warning') {\n          errors.push(new Error(formatIssue(issue)))\n        }\n      }\n      for (const entryIssues of currentEntryIssues.values()) {\n        for (const issue of entryIssues.values()) {\n          if (issue.severity !== 'warning') {\n            const message = formatIssue(issue)\n            errors.push(new Error(message))\n          } else {\n            printNonFatalIssue(issue)\n          }\n        }\n      }\n      return errors\n    },\n    async invalidate({\n      // .env files or tsconfig/jsconfig change\n      reloadAfterInvalidation,\n    }) {\n      if (reloadAfterInvalidation) {\n        for (const [key, entrypoint] of currentWrittenEntrypoints) {\n          clearRequireCache(key, entrypoint, { force: true })\n        }\n\n        await clearAllModuleContexts()\n        this.send({\n          type: HMR_MESSAGE_SENT_TO_BROWSER.SERVER_COMPONENT_CHANGES,\n          hash: String(++hmrHash),\n        })\n      }\n    },\n    async buildFallbackError() {\n      // Not implemented yet.\n    },\n    async ensurePage({\n      page: inputPage,\n      // Unused parameters\n      // clientOnly,\n      appPaths,\n      definition,\n      isApp,\n      url: requestUrl,\n    }) {\n      // When there is no route definition this is an internal file not a route the user added.\n      // Middleware and instrumentation are handled in turbpack-utils.ts handleEntrypoints instead.\n      if (!definition) {\n        if (inputPage === '/middleware') return\n        if (inputPage === '/src/middleware') return\n        if (inputPage === '/instrumentation') return\n        if (inputPage === '/src/instrumentation') return\n      }\n\n      return hotReloaderSpan\n        .traceChild('ensure-page', {\n          inputPage,\n        })\n        .traceAsyncFn(async () => {\n          if (BLOCKED_PAGES.includes(inputPage) && inputPage !== '/_error') {\n            return\n          }\n\n          await currentEntriesHandling\n\n          // TODO We shouldn't look into the filesystem again. This should use the information from entrypoints\n          let routeDef: Pick<\n            RouteDefinition,\n            'filename' | 'bundlePath' | 'page'\n          > =\n            definition ??\n            (await findPagePathData(\n              projectPath,\n              inputPage,\n              nextConfig.pageExtensions,\n              opts.pagesDir,\n              opts.appDir,\n              !!nextConfig.experimental.globalNotFound\n            ))\n\n          // If the route is actually an app page route, then we should have access\n          // to the app route definition, and therefore, the appPaths from it.\n          if (!appPaths && definition && isAppPageRouteDefinition(definition)) {\n            appPaths = definition.appPaths\n          }\n\n          let page = routeDef.page\n          if (appPaths) {\n            const normalizedPage = normalizeAppPath(page)\n\n            // filter out paths that are not exact matches (e.g. catchall)\n            const matchingAppPaths = appPaths.filter(\n              (path) => normalizeAppPath(path) === normalizedPage\n            )\n\n            // the last item in the array is the root page, if there are parallel routes\n            page = matchingAppPaths[matchingAppPaths.length - 1]\n          }\n\n          const pathname = definition?.pathname ?? inputPage\n\n          if (page === '/_error') {\n            let finishBuilding = startBuilding(pathname, requestUrl, false)\n            try {\n              await handlePagesErrorRoute({\n                currentEntryIssues,\n                entrypoints: currentEntrypoints,\n                manifestLoader,\n                devRewrites: opts.fsChecker.rewrites,\n                productionRewrites: undefined,\n                logErrors: true,\n                hooks: {\n                  subscribeToChanges,\n                  handleWrittenEndpoint: (id, result, forceDeleteCache) => {\n                    currentWrittenEntrypoints.set(id, result)\n                    assetMapper.setPathsForKey(id, result.clientPaths)\n                    return clearRequireCache(id, result, {\n                      force: forceDeleteCache,\n                    })\n                  },\n                },\n              })\n            } finally {\n              finishBuilding()\n            }\n            return\n          }\n\n          const isInsideAppDir = routeDef.bundlePath.startsWith('app/')\n          const isEntryMetadataRouteFile = isMetadataRouteFile(\n            routeDef.filename.replace(opts.appDir || '', ''),\n            nextConfig.pageExtensions,\n            true\n          )\n          const normalizedAppPage = isEntryMetadataRouteFile\n            ? normalizedPageToTurbopackStructureRoute(\n                page,\n                extname(routeDef.filename)\n              )\n            : page\n\n          const route = isInsideAppDir\n            ? currentEntrypoints.app.get(normalizedAppPage)\n            : currentEntrypoints.page.get(page)\n\n          if (!route) {\n            // TODO: why is this entry missing in turbopack?\n            if (page === '/middleware') return\n            if (page === '/src/middleware') return\n            if (page === '/proxy') return\n            if (page === '/src/proxy') return\n            if (page === '/instrumentation') return\n            if (page === '/src/instrumentation') return\n\n            throw new PageNotFoundError(`route not found ${page}`)\n          }\n\n          // We don't throw on ensureOpts.isApp === true for page-api\n          // since this can happen when app pages make\n          // api requests to page API routes.\n          if (isApp && route.type === 'page') {\n            throw new Error(`mis-matched route type: isApp && page for ${page}`)\n          }\n\n          const finishBuilding = startBuilding(pathname, requestUrl, false)\n          try {\n            await handleRouteType({\n              dev,\n              page,\n              pathname,\n              route,\n              currentEntryIssues,\n              entrypoints: currentEntrypoints,\n              manifestLoader,\n              readyIds,\n              devRewrites: opts.fsChecker.rewrites,\n              productionRewrites: undefined,\n              logErrors: true,\n\n              hooks: {\n                subscribeToChanges,\n                handleWrittenEndpoint: (id, result, forceDeleteCache) => {\n                  currentWrittenEntrypoints.set(id, result)\n                  assetMapper.setPathsForKey(id, result.clientPaths)\n                  return clearRequireCache(id, result, {\n                    force: forceDeleteCache,\n                  })\n                },\n              },\n            })\n          } finally {\n            finishBuilding()\n          }\n        })\n    },\n    close() {\n      // Report MCP telemetry if MCP server is enabled\n      recordMcpTelemetry(opts.telemetry)\n\n      for (const wsClient of [\n        ...clientsWithoutRequestId,\n        ...clientsByRequestId.values(),\n      ]) {\n        // it's okay to not cleanly close these websocket connections, this is dev\n        wsClient.terminate()\n      }\n      clientsWithoutRequestId.clear()\n      clientsByRequestId.clear()\n    },\n  }\n\n  handleEntrypointsSubscription().catch((err) => {\n    console.error(err)\n    process.exit(1)\n  })\n\n  // Write empty manifests\n  await currentEntriesHandling\n  await manifestLoader.writeManifests({\n    devRewrites: opts.fsChecker.rewrites,\n    productionRewrites: undefined,\n    entrypoints: currentEntrypoints,\n  })\n\n  async function handleProjectUpdates() {\n    for await (const updateMessage of project.updateInfoSubscribe(30)) {\n      switch (updateMessage.updateType) {\n        case 'start': {\n          hotReloader.send({ type: HMR_MESSAGE_SENT_TO_BROWSER.BUILDING })\n          break\n        }\n        case 'end': {\n          sendEnqueuedMessages()\n\n          function addToErrorsMap(\n            errorsMap: Map<string, CompilationError>,\n            issueMap: IssuesMap\n          ) {\n            for (const [key, issue] of issueMap) {\n              if (issue.severity === 'warning') continue\n              if (errorsMap.has(key)) continue\n\n              const message = formatIssue(issue)\n\n              errorsMap.set(key, {\n                message,\n                details: issue.detail\n                  ? renderStyledStringToErrorAnsi(issue.detail)\n                  : undefined,\n              })\n            }\n          }\n\n          function addErrors(\n            errorsMap: Map<string, CompilationError>,\n            issues: EntryIssuesMap\n          ) {\n            for (const issueMap of issues.values()) {\n              addToErrorsMap(errorsMap, issueMap)\n            }\n          }\n\n          const errors = new Map<string, CompilationError>()\n          addToErrorsMap(errors, currentTopLevelIssues)\n          addErrors(errors, currentEntryIssues)\n\n          for (const client of [\n            ...clientsWithoutRequestId,\n            ...clientsByRequestId.values(),\n          ]) {\n            const state = clientStates.get(client)\n            if (!state) {\n              continue\n            }\n\n            const clientErrors = new Map(errors)\n            addErrors(clientErrors, state.clientIssues)\n\n            sendToClient(client, {\n              type: HMR_MESSAGE_SENT_TO_BROWSER.BUILT,\n              hash: String(++hmrHash),\n              errors: [...clientErrors.values()],\n              warnings: [],\n            })\n          }\n\n          if (hmrEventHappened) {\n            const time = updateMessage.value.duration\n            const timeMessage =\n              time > 2000 ? `${Math.round(time / 100) / 10}s` : `${time}ms`\n            Log.event(`Compiled in ${timeMessage}`)\n            hmrEventHappened = false\n          }\n          break\n        }\n        default:\n      }\n    }\n  }\n\n  handleProjectUpdates().catch((err) => {\n    console.error(err)\n    process.exit(1)\n  })\n\n  return hotReloader\n}\n"],"names":["mkdir","writeFile","join","extname","relative","pathToFileURL","ws","store","consoleStore","HMR_MESSAGE_SENT_TO_BROWSER","createDefineEnv","Log","BLOCKED_PAGES","getOverlayMiddleware","getSourceMapMiddleware","getOriginalStackFrames","PageNotFoundError","debounce","deleteCache","clearAllModuleContexts","clearModuleContext","denormalizePagePath","trace","AssetMapper","handleEntrypoints","handlePagesErrorRoute","handleRouteType","hasEntrypointForKey","msToNs","processTopLevelIssues","printNonFatalIssue","normalizedPageToTurbopackStructureRoute","propagateServerField","TurbopackManifestLoader","findPagePathData","getEntryKey","splitEntryKey","createBinaryHmrMessageData","FAST_REFRESH_RUNTIME_RELOAD","generateEncryptionKeyBase64","isAppPageRouteDefinition","normalizeAppPath","getNodeDebugType","isMetadataRouteFile","setBundlerFindSourceMapImplementation","getNextErrorFeedbackMiddleware","formatIssue","isFileSystemCacheEnabledForDev","isWellKnownError","processIssues","renderStyledStringToErrorAnsi","getDevOverlayFontMiddleware","devIndicatorServerState","getDisableDevIndicatorMiddleware","getRestartDevServerMiddleware","backgroundLogCompilationEvents","getSupportedBrowsers","printBuildErrors","receiveBrowserLogsTurbopack","handleClientFileLogs","normalizePath","devToolsConfigMiddleware","getDevToolsConfig","connectReactDebugChannel","deleteReactDebugChannel","setReactDebugChannel","getVersionInfo","matchNextPageBundleRequest","getMcpMiddleware","handleErrorStateResponse","handlePageMetadataResponse","setStackFrameResolver","recordMcpTelemetry","getFileLogger","wsServer","Server","noServer","isTestMode","process","env","NEXT_TEST_MODE","__NEXT_TEST_MODE","DEBUG","sessionId","Math","floor","Number","MAX_SAFE_INTEGER","random","rewriteTurbopackSources","projectRoot","sourceMap","section","sections","map","i","sources","length","replace","toString","getSourceMapFromTurbopack","project","sourceURL","sourceMapJson","getSourceMapSync","err","undefined","payload","JSON","parse","createHotReloaderTurbopack","opts","serverFields","distDir","resetFetch","lockfile","nextConfig","dev","buildId","dir","projectPath","loadBindings","require","bindings","log","testMode","hasRewrites","fsChecker","rewrites","afterFiles","beforeFiles","fallback","hotReloaderSpan","version","__NEXT_VERSION","stop","mcpServerEnabled","experimental","mcpServer","fileLogger","initialize","encryptionKey","isBuild","clientRouterFilters","clientRouterFilter","supportedBrowsers","currentNodeJsVersion","versions","node","rootPath","turbopack","root","outputFileTracingRoot","turbo","createProject","watch","enable","pollIntervalMs","watchOptions","defineEnv","isTurbopack","config","fetchCacheKeyPrefix","middlewareMatchers","previewProps","prerenderManifest","preview","browserslistQuery","noMangling","persistentCaching","memoryLimit","turbopackMemoryLimit","isShortSession","eventTypes","bind","onDevServerCleanup","onExit","unlock","entrypointsSubscription","entrypointsSubscribe","currentWrittenEntrypoints","Map","currentEntrypoints","global","app","document","error","middleware","instrumentation","page","currentTopLevelIssues","currentEntryIssues","manifestLoader","changeSubscriptions","serverPathState","readyIds","Set","currentEntriesHandlingResolve","currentEntriesHandling","Promise","resolve","assetMapper","clearRequireCache","key","writtenEndpoint","force","path","contentHash","serverPaths","endsWith","localKey","set","hasChange","localHash","get","globalHash","__next__clear_chunk_cache__","p","file","buildingIds","startBuilding","id","requestUrl","forceRebuild","has","size","setState","loading","trigger","url","add","finishBuilding","delete","hmrEventHappened","hmrHash","clientsWithoutRequestId","clientsByRequestId","cacheStatusesByRequestId","clientStates","WeakMap","sendToClient","client","message","data","type","stringify","send","sendEnqueuedMessages","issueMap","values","filter","severity","state","clientIssues","messages","clear","turbopackUpdates","TURBOPACK_MESSAGE","sendEnqueuedMessagesDebounce","sendHmr","sendTurbopackMessage","diagnostics","issues","push","subscribeToChanges","includeIssues","endpoint","createMessage","onError","side","changedPromise","changed","change","String","e","unsubscribeFromChanges","subscription","return","subscribeToHmrEvents","subscriptions","hmrEvents","next","reloadMessage","RELOAD_PAGE","close","unsubscribeFromHmrEvents","handleEntrypointsSubscription","entrypoints","routes","existingRoutes","keys","newRoutes","addedRoutes","route","removedRoutes","devRewrites","productionRewrites","logErrors","clients","hooks","handleWrittenEndpoint","result","forceDeleteCache","hotReloader","DEV_PAGES_MANIFEST_UPDATE","devPagesManifest","ADDED_PAGE","REMOVED_PAGE","recursive","middlewares","isSrcDir","telemetry","turbopackProject","sendUpdateSignal","DEVTOOLS_CONFIG","sendHmrMessage","getActiveConnectionCount","getDevServerUrl","__NEXT_PRIVATE_ORIGIN","request","isServer","isEdgeServer","isAppDirectory","frames","versionInfoCached","getVersionInfoCached","devtoolsFrontendUrl","nodeDebugType","debugPort","debugInfo","debugInfoList","fetch","then","res","json","activeWebpackConfigs","serverStats","edgeServerStats","run","req","_parsedUrl","startsWith","params","decodedPagePath","param","decodeURIComponent","denormalizedPagePath","ensurePage","clientOnly","definition","catch","console","calledNext","finished","onHMR","socket","head","onUpgrade","handleUpgrade","requestId","URL","searchParams","enableCacheComponents","cacheComponents","isLegacyClient","cacheStatus","CACHE_INDICATOR","on","addEventListener","parsedData","event","manualTraceChild","spanName","startTime","endTime","attributes","updatedModules","isPageHidden","hadRuntimeError","dependencyChain","warn","Array","isArray","cleanedModulePath","browserDebugInfoInTerminal","entries","router","sourceType","logs","errorState","segmentTrieData","Error","turbopackConnectedMessage","TURBOPACK_CONNECTED","errors","entryIssues","issue","disabledUntil","Date","now","versionInfo","devToolsConfig","syncMessage","SYNC","warnings","hash","debug","devIndicator","action","sendToLegacyClients","setCacheStatus","status","htmlRequestId","debugChannel","setHmrServerError","_error","clearHmrServerError","start","getCompilationErrors","appEntryKey","pagesEntryKey","topLevelIssues","thisEntryIssues","formattedIssue","invalidate","reloadAfterInvalidation","entrypoint","SERVER_COMPONENT_CHANGES","buildFallbackError","inputPage","appPaths","isApp","traceChild","traceAsyncFn","includes","routeDef","pageExtensions","pagesDir","appDir","globalNotFound","normalizedPage","matchingAppPaths","pathname","setPathsForKey","clientPaths","isInsideAppDir","bundlePath","isEntryMetadataRouteFile","filename","normalizedAppPage","wsClient","terminate","exit","writeManifests","handleProjectUpdates","updateMessage","updateInfoSubscribe","updateType","BUILDING","addToErrorsMap","errorsMap","details","detail","addErrors","clientErrors","BUILT","time","value","duration","timeMessage","round"],"mappings":"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","ignoreList":[0]}
{"version":3,"sources":["../../../../../src/server/mcp/tools/utils/browser-communication.ts"],"sourcesContent":["/**\n * Shared utilities for MCP tools that communicate with the browser.\n * This module provides a common infrastructure for request-response\n * communication between MCP endpoints and browser sessions via HMR.\n */\n\nimport { nanoid } from 'next/dist/compiled/nanoid'\nimport type {\n  HMR_MESSAGE_SENT_TO_BROWSER,\n  HmrMessageSentToBrowser,\n} from '../../../dev/hot-reloader-types'\n\nexport const DEFAULT_BROWSER_REQUEST_TIMEOUT_MS = 5000\n\nexport type BrowserResponse<T> = {\n  url: string\n  data: T\n}\n\ntype PendingRequest<T> = {\n  responses: BrowserResponse<T>[]\n  expectedCount: number\n  resolve: (value: BrowserResponse<T>[]) => void\n  reject: (reason?: unknown) => void\n  timeout: NodeJS.Timeout\n}\n\nconst pendingRequests = new Map<string, PendingRequest<unknown>>()\n\nexport function createBrowserRequest<T>(\n  messageType: HMR_MESSAGE_SENT_TO_BROWSER,\n  sendHmrMessage: (message: HmrMessageSentToBrowser) => void,\n  getActiveConnectionCount: () => number,\n  timeoutMs: number\n): Promise<BrowserResponse<T>[]> {\n  const connectionCount = getActiveConnectionCount()\n  if (connectionCount === 0) {\n    return Promise.resolve([])\n  }\n\n  const requestId = `mcp-${messageType}-${nanoid()}`\n\n  const responsePromise = new Promise<BrowserResponse<T>[]>(\n    (resolve, reject) => {\n      const timeout = setTimeout(() => {\n        const pending = pendingRequests.get(requestId)\n        if (pending && pending.responses.length > 0) {\n          resolve(pending.responses as BrowserResponse<T>[])\n        } else {\n          reject(\n            new Error(\n              `Timeout waiting for response from frontend. The browser may not be responding to HMR messages.`\n            )\n          )\n        }\n        pendingRequests.delete(requestId)\n      }, timeoutMs)\n\n      pendingRequests.set(requestId, {\n        responses: [],\n        expectedCount: connectionCount,\n        resolve: resolve as (value: BrowserResponse<unknown>[]) => void,\n        reject,\n        timeout,\n      })\n    }\n  )\n\n  sendHmrMessage({\n    type: messageType,\n    requestId,\n  } as HmrMessageSentToBrowser)\n\n  return responsePromise\n}\n\nexport function handleBrowserPageResponse<T>(\n  requestId: string,\n  data: T,\n  url: string\n): void {\n  if (!url) {\n    throw new Error(\n      'URL is required in MCP browser response. This is a bug in Next.js.'\n    )\n  }\n\n  const pending = pendingRequests.get(requestId)\n  if (pending) {\n    pending.responses.push({ url, data })\n    if (pending.responses.length >= pending.expectedCount) {\n      clearTimeout(pending.timeout)\n      pending.resolve(pending.responses)\n      pendingRequests.delete(requestId)\n    }\n  }\n}\n"],"names":["nanoid","DEFAULT_BROWSER_REQUEST_TIMEOUT_MS","pendingRequests","Map","createBrowserRequest","messageType","sendHmrMessage","getActiveConnectionCount","timeoutMs","connectionCount","Promise","resolve","requestId","responsePromise","reject","timeout","setTimeout","pending","get","responses","length","Error","delete","set","expectedCount","type","handleBrowserPageResponse","data","url","push","clearTimeout"],"mappings":"AAAA;;;;CAIC,GAED,SAASA,MAAM,QAAQ,4BAA2B;AAMlD,OAAO,MAAMC,qCAAqC,KAAI;AAetD,MAAMC,kBAAkB,IAAIC;AAE5B,OAAO,SAASC,qBACdC,WAAwC,EACxCC,cAA0D,EAC1DC,wBAAsC,EACtCC,SAAiB;IAEjB,MAAMC,kBAAkBF;IACxB,IAAIE,oBAAoB,GAAG;QACzB,OAAOC,QAAQC,OAAO,CAAC,EAAE;IAC3B;IAEA,MAAMC,YAAY,CAAC,IAAI,EAAEP,YAAY,CAAC,EAAEL,UAAU;IAElD,MAAMa,kBAAkB,IAAIH,QAC1B,CAACC,SAASG;QACR,MAAMC,UAAUC,WAAW;YACzB,MAAMC,UAAUf,gBAAgBgB,GAAG,CAACN;YACpC,IAAIK,WAAWA,QAAQE,SAAS,CAACC,MAAM,GAAG,GAAG;gBAC3CT,QAAQM,QAAQE,SAAS;YAC3B,OAAO;gBACLL,OACE,qBAEC,CAFD,IAAIO,MACF,CAAC,8FAA8F,CAAC,GADlG,qBAAA;2BAAA;gCAAA;kCAAA;gBAEA;YAEJ;YACAnB,gBAAgBoB,MAAM,CAACV;QACzB,GAAGJ;QAEHN,gBAAgBqB,GAAG,CAACX,WAAW;YAC7BO,WAAW,EAAE;YACbK,eAAef;YACfE,SAASA;YACTG;YACAC;QACF;IACF;IAGFT,eAAe;QACbmB,MAAMpB;QACNO;IACF;IAEA,OAAOC;AACT;AAEA,OAAO,SAASa,0BACdd,SAAiB,EACjBe,IAAO,EACPC,GAAW;IAEX,IAAI,CAACA,KAAK;QACR,MAAM,qBAEL,CAFK,IAAIP,MACR,uEADI,qBAAA;mBAAA;wBAAA;0BAAA;QAEN;IACF;IAEA,MAAMJ,UAAUf,gBAAgBgB,GAAG,CAACN;IACpC,IAAIK,SAAS;QACXA,QAAQE,SAAS,CAACU,IAAI,CAAC;YAAED;YAAKD;QAAK;QACnC,IAAIV,QAAQE,SAAS,CAACC,MAAM,IAAIH,QAAQO,aAAa,EAAE;YACrDM,aAAab,QAAQF,OAAO;YAC5BE,QAAQN,OAAO,CAACM,QAAQE,SAAS;YACjCjB,gBAAgBoB,MAAM,CAACV;QACzB;IACF;AACF","ignoreList":[0]}
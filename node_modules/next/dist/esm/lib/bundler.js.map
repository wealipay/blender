{"version":3,"sources":["../../src/lib/bundler.ts"],"sourcesContent":["/// Utilties for configuring the bundler to use.\nexport enum Bundler {\n  Turbopack,\n  Webpack,\n  Rspack,\n}\n/**\n * Parse the bundler arguments and potentially sets the `TURBOPACK` environment variable.\n *\n * NOTE: rspack is configured via next config which is chaotic so it is possible for this to be overridden later.\n *\n * @param options The options to parse.\n * @returns The bundler that was configured\n */\nexport function parseBundlerArgs(options: {\n  turbo?: boolean\n  turbopack?: boolean\n  webpack?: boolean\n}): Bundler {\n  const bundlerFlags = new Map<Bundler, string[]>()\n  const setBundlerFlag = (bundler: Bundler, flag: string) => {\n    bundlerFlags.set(bundler, (bundlerFlags.get(bundler) ?? []).concat(flag))\n  }\n  // What turbo flag was set? We allow multiple to be set, which is silly but not ambiguous, just pick the most relevant one.\n  if (options.turbopack) {\n    setBundlerFlag(Bundler.Turbopack, '--turbopack')\n  }\n  if (options.turbo) {\n    setBundlerFlag(Bundler.Turbopack, '--turbo')\n  } else if (process.env.TURBOPACK) {\n    // We don't really want to support this but it is trivial and not really confusing.\n    // If we don't support it and someone sets it, we would have inconsistent behavior\n    // since some parts of next would read the return value of this function and other\n    // parts will read the env variable.\n    setBundlerFlag(Bundler.Turbopack, `TURBOPACK=${process.env.TURBOPACK}`)\n  } else if (process.env.IS_TURBOPACK_TEST) {\n    setBundlerFlag(\n      Bundler.Turbopack,\n      `IS_TURBOPACK_TEST=${process.env.IS_TURBOPACK_TEST}`\n    )\n  }\n  if (options.webpack) {\n    setBundlerFlag(Bundler.Webpack, '--webpack')\n  }\n\n  if (process.env.IS_WEBPACK_TEST) {\n    setBundlerFlag(\n      Bundler.Webpack,\n      `IS_WEBPACK_TEST=${process.env.IS_WEBPACK_TEST}`\n    )\n  }\n\n  // Mostly this is set via the NextConfig but it can also be set via the command line which is\n  // common for testing.\n  if (process.env.NEXT_RSPACK) {\n    setBundlerFlag(Bundler.Rspack, `NEXT_RSPACK=${process.env.NEXT_RSPACK}`)\n  }\n  if (process.env.NEXT_TEST_USE_RSPACK) {\n    setBundlerFlag(\n      Bundler.Rspack,\n      `NEXT_TEST_USE_RSPACK=${process.env.NEXT_TEST_USE_RSPACK}`\n    )\n  }\n\n  if (bundlerFlags.size > 1) {\n    console.error(\n      `Multiple bundler flags set: ${Array.from(bundlerFlags.values()).flat().join(', ')}.\n\nEdit your command or your package.json script to configure only one bundler.`\n    )\n    process.exit(1)\n  }\n  // The default is turbopack when nothing is configured.\n  if (bundlerFlags.size === 0) {\n    process.env.TURBOPACK = 'auto'\n    return Bundler.Turbopack\n  }\n  if (bundlerFlags.has(Bundler.Turbopack)) {\n    // Only conditionally assign to the environment variable, preserving already set values.\n    // If it was set to 'auto' because no flag was set and this function is called a second time we\n    // would upgrade to '1' but we don't really want that.\n    process.env.TURBOPACK ??= '1'\n    return Bundler.Turbopack\n  }\n  // Otherwise it is one of rspack or webpack. At this point there must be exactly one key in the map.\n  return bundlerFlags.keys().next().value!\n}\n\n/**\n * Finalize the bundler based on the config.\n *\n * Rspack is configured via next config by setting an environment variable (yay, side effects)\n * so this should only be called after parsing the config.\n */\nexport function finalizeBundlerFromConfig(fromOptions: Bundler) {\n  // Reading the next config can set NEXT_RSPACK environment variables.\n  if (process.env.NEXT_RSPACK) {\n    return Bundler.Rspack\n  }\n  return fromOptions\n}\n"],"names":["Bundler","parseBundlerArgs","options","bundlerFlags","Map","setBundlerFlag","bundler","flag","set","get","concat","turbopack","turbo","process","env","TURBOPACK","IS_TURBOPACK_TEST","webpack","IS_WEBPACK_TEST","NEXT_RSPACK","NEXT_TEST_USE_RSPACK","size","console","error","Array","from","values","flat","join","exit","has","keys","next","value","finalizeBundlerFromConfig","fromOptions"],"mappings":"AAAA,gDAAgD;AAChD,OAAO,IAAA,AAAKA,iCAAAA;;;;WAAAA;MAIX;AACD;;;;;;;CAOC,GACD,OAAO,SAASC,iBAAiBC,OAIhC;IACC,MAAMC,eAAe,IAAIC;IACzB,MAAMC,iBAAiB,CAACC,SAAkBC;QACxCJ,aAAaK,GAAG,CAACF,SAAS,AAACH,CAAAA,aAAaM,GAAG,CAACH,YAAY,EAAE,AAAD,EAAGI,MAAM,CAACH;IACrE;IACA,2HAA2H;IAC3H,IAAIL,QAAQS,SAAS,EAAE;QACrBN,kBAAkC;IACpC;IACA,IAAIH,QAAQU,KAAK,EAAE;QACjBP,kBAAkC;IACpC,OAAO,IAAIQ,QAAQC,GAAG,CAACC,SAAS,EAAE;QAChC,mFAAmF;QACnF,kFAAkF;QAClF,kFAAkF;QAClF,oCAAoC;QACpCV,kBAAkC,CAAC,UAAU,EAAEQ,QAAQC,GAAG,CAACC,SAAS,EAAE;IACxE,OAAO,IAAIF,QAAQC,GAAG,CAACE,iBAAiB,EAAE;QACxCX,kBAEE,CAAC,kBAAkB,EAAEQ,QAAQC,GAAG,CAACE,iBAAiB,EAAE;IAExD;IACA,IAAId,QAAQe,OAAO,EAAE;QACnBZ,kBAAgC;IAClC;IAEA,IAAIQ,QAAQC,GAAG,CAACI,eAAe,EAAE;QAC/Bb,kBAEE,CAAC,gBAAgB,EAAEQ,QAAQC,GAAG,CAACI,eAAe,EAAE;IAEpD;IAEA,6FAA6F;IAC7F,sBAAsB;IACtB,IAAIL,QAAQC,GAAG,CAACK,WAAW,EAAE;QAC3Bd,kBAA+B,CAAC,YAAY,EAAEQ,QAAQC,GAAG,CAACK,WAAW,EAAE;IACzE;IACA,IAAIN,QAAQC,GAAG,CAACM,oBAAoB,EAAE;QACpCf,kBAEE,CAAC,qBAAqB,EAAEQ,QAAQC,GAAG,CAACM,oBAAoB,EAAE;IAE9D;IAEA,IAAIjB,aAAakB,IAAI,GAAG,GAAG;QACzBC,QAAQC,KAAK,CACX,CAAC,4BAA4B,EAAEC,MAAMC,IAAI,CAACtB,aAAauB,MAAM,IAAIC,IAAI,GAAGC,IAAI,CAAC,MAAM;;4EAEb,CAAC;QAEzEf,QAAQgB,IAAI,CAAC;IACf;IACA,uDAAuD;IACvD,IAAI1B,aAAakB,IAAI,KAAK,GAAG;QAC3BR,QAAQC,GAAG,CAACC,SAAS,GAAG;QACxB;IACF;IACA,IAAIZ,aAAa2B,GAAG,KAAqB;QACvC,wFAAwF;QACxF,+FAA+F;QAC/F,sDAAsD;QACtDjB,QAAQC,GAAG,CAACC,SAAS,KAAK;QAC1B;IACF;IACA,oGAAoG;IACpG,OAAOZ,aAAa4B,IAAI,GAAGC,IAAI,GAAGC,KAAK;AACzC;AAEA;;;;;CAKC,GACD,OAAO,SAASC,0BAA0BC,WAAoB;IAC5D,qEAAqE;IACrE,IAAItB,QAAQC,GAAG,CAACK,WAAW,EAAE;QAC3B;IACF;IACA,OAAOgB;AACT","ignoreList":[0]}
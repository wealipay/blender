{"version":3,"sources":["../../../src/build/babel/preset.ts"],"sourcesContent":["import type { PluginItem } from 'next/dist/compiled/babel/core'\nimport { dirname } from 'path'\n\nconst isLoadIntentTest = process.env.NODE_ENV === 'test'\nconst isLoadIntentDevelopment = process.env.NODE_ENV === 'development'\n\ntype StyledJsxPlugin = [string, any] | string\ntype StyledJsxBabelOptions =\n  | {\n      plugins?: StyledJsxPlugin[]\n      styleModule?: string\n      'babel-test'?: boolean\n    }\n  | undefined\n\n// Resolve styled-jsx plugins\nfunction styledJsxOptions(options: StyledJsxBabelOptions) {\n  options = options || {}\n  options.styleModule = 'styled-jsx/style'\n\n  if (!Array.isArray(options.plugins)) {\n    return options\n  }\n\n  options.plugins = options.plugins.map(\n    (plugin: StyledJsxPlugin): StyledJsxPlugin => {\n      if (Array.isArray(plugin)) {\n        const [name, pluginOptions] = plugin\n        return [require.resolve(name), pluginOptions]\n      }\n\n      return require.resolve(plugin)\n    }\n  )\n\n  return options\n}\n\ntype NextBabelPresetOptions = {\n  'preset-env'?: any\n  'preset-react'?: any\n  'class-properties'?: any\n  'transform-runtime'?: any\n  'styled-jsx'?: StyledJsxBabelOptions\n  /**\n   * `syntax-typescript` is a subset of `preset-typescript`.\n   *\n   * - When babel is used in \"standalone\" mode (e.g. alongside SWC when using\n   *   react-compiler or turbopack) we'll prefer the options in\n   *   'syntax-typescript`, and fall back to `preset-typescript`.\n   *\n   * - When babel is used in \"default\" mode (e.g. with a babel config in\n   *   webpack) we'll prefer the options in `preset-typescript`, and fall back\n   *   to `syntax-typescript`.\n   */\n  'preset-typescript'?: any\n  'syntax-typescript'?: {\n    disallowAmbiguousJSXLike?: boolean\n    dts?: boolean\n    isTSX?: boolean\n    allExtensions?: boolean\n    ignoreExtensions?: boolean\n  }\n}\n\ntype BabelPreset = {\n  presets?: PluginItem[] | null\n  plugins?: PluginItem[] | null\n  sourceType?: 'script' | 'module' | 'unambiguous'\n  overrides?: Array<{ test: RegExp } & Omit<BabelPreset, 'overrides'>>\n}\n\n// Taken from https://github.com/babel/babel/commit/d60c5e1736543a6eac4b549553e107a9ba967051#diff-b4beead8ad9195361b4537601cc22532R158\nfunction supportsStaticESM(caller: any): boolean {\n  return !!caller?.supportsStaticESM\n}\n\n/**\n * HACK: A drop-in replacement for `@babel/preset-typescript` that only enables\n * `@babel/plugin-syntax-typescript` and does not transform the typescript.\n *\n * This is used for standalone mode, where Babel is being used alongside SWC\n * (i.e. Turbopack or with React Compiler on webpack).\n *\n * This should match the logic/behavior here:\n * https://github.com/babel/babel/blob/7f57d3a2e97b7e2800fb82cff9284a3591377971/packages/babel-preset-typescript/src/index.ts#L63\n */\nfunction presetTypescriptSyntaxOnly(_api: unknown, options: any) {\n  const { allExtensions, ignoreExtensions, ...restOptions } = options\n  const disableExtensionDetect = allExtensions || ignoreExtensions\n\n  function getPlugins(isTSX: boolean, disallowAmbiguousJSXLike: boolean) {\n    return [\n      [\n        require('next/dist/compiled/babel/plugin-syntax-typescript') as typeof import('next/dist/compiled/babel/plugin-syntax-typescript'),\n        {\n          isTSX,\n          disallowAmbiguousJSXLike,\n          ...restOptions,\n        },\n      ],\n    ]\n  }\n\n  return {\n    plugins: [],\n    overrides: disableExtensionDetect\n      ? [\n          {\n            plugins: getPlugins(\n              options.isTSX,\n              options.disallowAmbiguousJSXLike\n            ),\n          },\n        ]\n      : // Only set 'test' if explicitly requested, since it requires that\n        // Babel is being called with a filename.\n        [\n          {\n            test: /\\.ts$/,\n            plugins: getPlugins(false, false),\n          },\n          {\n            test: /\\.mts$/,\n            sourceType: 'module',\n            plugins: getPlugins(false, true),\n          },\n          {\n            test: /\\.cts$/,\n            sourceType: 'unambiguous',\n            plugins: getPlugins(false, true),\n          },\n          {\n            test: /\\.tsx$/,\n            plugins: getPlugins(true, false),\n          },\n        ],\n  }\n}\n\nexport default (\n  api: any,\n  options: NextBabelPresetOptions = {}\n): BabelPreset => {\n  const isStandalone = api.caller(\n    // NOTE: `transformMode` may be undefined if the user configured `babel-loader` themselves. In\n    // this case, we should assume we're in 'default' mode.\n    (caller: any) => !!caller && caller.transformMode === 'standalone'\n  )\n  const isServer = api.caller((caller: any) => !!caller && caller.isServer)\n\n  // syntax plugins that are used in both standalone and default modes\n  const sharedSyntaxPlugins = [\n    require('next/dist/compiled/babel/plugin-syntax-dynamic-import') as typeof import('next/dist/compiled/babel/plugin-syntax-dynamic-import'),\n    [\n      require('next/dist/compiled/babel/plugin-syntax-import-attributes') as typeof import('next/dist/compiled/babel/plugin-syntax-import-attributes'),\n      {\n        deprecatedAssertSyntax: true,\n      },\n    ],\n    (isStandalone || isServer) &&\n      (require('next/dist/compiled/babel/plugin-syntax-bigint') as typeof import('next/dist/compiled/babel/plugin-syntax-bigint')),\n  ].filter(Boolean)\n\n  if (isStandalone) {\n    // Just enable a few syntax plugins, we'll let SWC handle any of the downleveling or\n    // next.js-specific transforms.\n    return {\n      sourceType: 'unambiguous',\n      presets: [\n        [\n          presetTypescriptSyntaxOnly,\n          options['syntax-typescript'] ?? options['preset-typescript'] ?? {},\n        ],\n      ],\n      plugins: [\n        require('next/dist/compiled/babel/plugin-syntax-jsx') as typeof import('next/dist/compiled/babel/plugin-syntax-jsx'),\n        ...sharedSyntaxPlugins,\n      ],\n    }\n  }\n\n  const supportsESM = api.caller(supportsStaticESM)\n  const isCallerDevelopment = api.caller((caller: any) => caller?.isDev)\n\n  // Look at external intent if used without a caller (e.g. via Jest):\n  const isTest = isCallerDevelopment == null && isLoadIntentTest\n\n  // Look at external intent if used without a caller (e.g. Storybook):\n  const isDevelopment =\n    isCallerDevelopment === true ||\n    (isCallerDevelopment == null && isLoadIntentDevelopment)\n\n  // Default to production mode if not `test` nor `development`:\n  const isProduction = !(isTest || isDevelopment)\n\n  const isBabelLoader = api.caller(\n    (caller: any) =>\n      !!caller &&\n      (caller.name === 'babel-loader' ||\n        caller.name === 'next-babel-turbo-loader')\n  )\n\n  const useJsxRuntime =\n    options['preset-react']?.runtime === 'automatic' ||\n    (Boolean(api.caller((caller: any) => !!caller && caller.hasJsxRuntime)) &&\n      options['preset-react']?.runtime !== 'classic')\n\n  const presetEnvConfig = {\n    // In the test environment `modules` is often needed to be set to true, babel figures that out by itself using the `'auto'` option\n    // In production/development this option is set to `false` so that webpack can handle import/export with tree-shaking\n    modules: 'auto',\n    exclude: ['transform-typeof-symbol'],\n    ...options['preset-env'],\n  }\n\n  // When transpiling for the server or tests, target the current Node version\n  // if not explicitly specified:\n  if (\n    (isServer || isTest) &&\n    (!presetEnvConfig.targets ||\n      !(\n        typeof presetEnvConfig.targets === 'object' &&\n        'node' in presetEnvConfig.targets\n      ))\n  ) {\n    presetEnvConfig.targets = {\n      // Targets the current process' version of Node. This requires apps be\n      // built and deployed on the same version of Node.\n      // This is the same as using \"current\" but explicit\n      node: process.versions.node,\n    }\n  }\n\n  const runtimeModuleName = isBabelLoader\n    ? 'next/dist/compiled/@babel/runtime'\n    : null\n  return {\n    sourceType: 'unambiguous',\n    presets: [\n      [\n        require('next/dist/compiled/babel/preset-env') as typeof import('next/dist/compiled/babel/preset-env'),\n        presetEnvConfig,\n      ],\n      [\n        require('next/dist/compiled/babel/preset-react') as typeof import('next/dist/compiled/babel/preset-react'),\n        {\n          // This adds @babel/plugin-transform-react-jsx-source and\n          // @babel/plugin-transform-react-jsx-self automatically in development\n          development: isDevelopment || isTest,\n          ...(useJsxRuntime ? { runtime: 'automatic' } : { pragma: '__jsx' }),\n          ...options['preset-react'],\n        },\n      ],\n      [\n        require('next/dist/compiled/babel/preset-typescript') as typeof import('next/dist/compiled/babel/preset-typescript'),\n        {\n          allowNamespaces: true,\n          ...(options['preset-typescript'] || options['syntax-typescript']),\n        },\n      ],\n    ],\n    plugins: [\n      ...sharedSyntaxPlugins,\n      !useJsxRuntime && [\n        require('./plugins/jsx-pragma') as typeof import('./plugins/jsx-pragma'),\n        {\n          // This produces the following injected import for modules containing JSX:\n          //   import React from 'react';\n          //   var __jsx = React.createElement;\n          module: 'react',\n          importAs: 'React',\n          pragma: '__jsx',\n          property: 'createElement',\n        },\n      ],\n      [\n        require('./plugins/optimize-hook-destructuring') as typeof import('./plugins/optimize-hook-destructuring'),\n        {\n          // only optimize hook functions imported from React/Preact\n          lib: true,\n        },\n      ],\n      require('./plugins/react-loadable-plugin') as typeof import('./plugins/react-loadable-plugin'),\n      // only enable this plugin if custom config for it was provided\n      // otherwise we will only enable it if their browserslist triggers\n      // preset-env to pull it in\n      options['class-properties'] && [\n        require('next/dist/compiled/babel/plugin-proposal-class-properties') as typeof import('next/dist/compiled/babel/plugin-proposal-class-properties'),\n        options['class-properties'] || {},\n      ],\n      [\n        require('next/dist/compiled/babel/plugin-proposal-object-rest-spread') as typeof import('next/dist/compiled/babel/plugin-proposal-object-rest-spread'),\n        {\n          useBuiltIns: true,\n        },\n      ],\n      !isServer && [\n        require('next/dist/compiled/babel/plugin-transform-runtime') as typeof import('next/dist/compiled/babel/plugin-transform-runtime'),\n        {\n          corejs: false,\n          helpers: true,\n          regenerator: true,\n          useESModules: supportsESM && presetEnvConfig.modules !== 'commonjs',\n          absoluteRuntime:\n            runtimeModuleName != null\n              ? dirname(require.resolve(`${runtimeModuleName}/package.json`))\n              : undefined,\n          // regenerator needs `moduleName` to be set in addition to\n          // `absoluteRuntime`.\n          moduleName: runtimeModuleName,\n          ...options['transform-runtime'],\n        },\n      ],\n      [\n        isTest && options['styled-jsx'] && options['styled-jsx']['babel-test']\n          ? (require('styled-jsx/babel-test') as typeof import('styled-jsx/babel-test'))\n          : (require('styled-jsx/babel') as typeof import('styled-jsx/babel')),\n        styledJsxOptions(options['styled-jsx']),\n      ],\n      isProduction && [\n        require('next/dist/compiled/babel/plugin-transform-react-remove-prop-types') as typeof import('next/dist/compiled/babel/plugin-transform-react-remove-prop-types'),\n        {\n          removeImport: true,\n        },\n      ],\n      // Always compile numeric separator because the resulting number is\n      // smaller.\n      require('next/dist/compiled/babel/plugin-proposal-numeric-separator') as typeof import('next/dist/compiled/babel/plugin-proposal-numeric-separator'),\n      require('next/dist/compiled/babel/plugin-proposal-export-namespace-from') as typeof import('next/dist/compiled/babel/plugin-proposal-export-namespace-from'),\n    ].filter(Boolean),\n  }\n}\n"],"names":["dirname","isLoadIntentTest","process","env","NODE_ENV","isLoadIntentDevelopment","styledJsxOptions","options","styleModule","Array","isArray","plugins","map","plugin","name","pluginOptions","require","resolve","supportsStaticESM","caller","presetTypescriptSyntaxOnly","_api","allExtensions","ignoreExtensions","restOptions","disableExtensionDetect","getPlugins","isTSX","disallowAmbiguousJSXLike","overrides","test","sourceType","api","isStandalone","transformMode","isServer","sharedSyntaxPlugins","deprecatedAssertSyntax","filter","Boolean","presets","supportsESM","isCallerDevelopment","isDev","isTest","isDevelopment","isProduction","isBabelLoader","useJsxRuntime","runtime","hasJsxRuntime","presetEnvConfig","modules","exclude","targets","node","versions","runtimeModuleName","development","pragma","allowNamespaces","module","importAs","property","lib","useBuiltIns","corejs","helpers","regenerator","useESModules","absoluteRuntime","undefined","moduleName","removeImport"],"mappings":"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","ignoreList":[0]}
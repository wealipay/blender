{"version":3,"sources":["../../../src/build/output/index.ts"],"sourcesContent":["import createStore from 'next/dist/compiled/unistore'\nimport formatWebpackMessages from '../../shared/lib/format-webpack-messages'\nimport { store as consoleStore } from './store'\nimport type { OutputState } from './store'\nimport type { webpack } from 'next/dist/compiled/webpack/webpack'\nimport { COMPILER_NAMES } from '../../shared/lib/constants'\nimport type { CompilerNameValues } from '../../shared/lib/constants'\n\ntype CompilerDiagnostics = {\n  totalModulesCount: number\n  errors: string[] | null\n  warnings: string[] | null\n}\n\ntype WebpackStatus =\n  | { loading: true }\n  | ({ loading: false } & CompilerDiagnostics)\n\ntype BuildStatusStore = {\n  client: WebpackStatus\n  server: WebpackStatus\n  edgeServer: WebpackStatus\n  trigger: string | undefined\n  url: string | undefined\n}\n\nconst buildStore = createStore<BuildStatusStore>({\n  // @ts-expect-error initial value\n  client: {},\n  // @ts-expect-error initial value\n  server: {},\n  // @ts-expect-error initial value\n  edgeServer: {},\n})\nlet buildWasDone = false\nlet clientWasLoading = true\nlet serverWasLoading = true\nlet edgeServerWasLoading = false\n\nbuildStore.subscribe((state) => {\n  const { client, server, edgeServer, trigger, url } = state\n\n  const { appUrl } = consoleStore.getState()\n\n  if (client.loading || server.loading || edgeServer?.loading) {\n    consoleStore.setState(\n      {\n        bootstrap: false,\n        appUrl: appUrl!,\n        // If it takes more than 3 seconds to compile, mark it as loading status\n        loading: true,\n        trigger,\n        url,\n      } as OutputState,\n      true\n    )\n    clientWasLoading = (!buildWasDone && clientWasLoading) || client.loading\n    serverWasLoading = (!buildWasDone && serverWasLoading) || server.loading\n    edgeServerWasLoading =\n      (!buildWasDone && edgeServerWasLoading) || edgeServer.loading\n    buildWasDone = false\n    return\n  }\n\n  buildWasDone = true\n\n  let partialState: Partial<OutputState> = {\n    bootstrap: false,\n    appUrl: appUrl!,\n    loading: false,\n    typeChecking: false,\n    totalModulesCount:\n      (clientWasLoading ? client.totalModulesCount : 0) +\n      (serverWasLoading ? server.totalModulesCount : 0) +\n      (edgeServerWasLoading ? edgeServer?.totalModulesCount || 0 : 0),\n    hasEdgeServer: !!edgeServer,\n  }\n  if (client.errors && clientWasLoading) {\n    // Show only client errors\n    consoleStore.setState(\n      {\n        ...partialState,\n        errors: client.errors,\n        warnings: null,\n      } as OutputState,\n      true\n    )\n  } else if (server.errors && serverWasLoading) {\n    consoleStore.setState(\n      {\n        ...partialState,\n        errors: server.errors,\n        warnings: null,\n      } as OutputState,\n      true\n    )\n  } else if (edgeServer.errors && edgeServerWasLoading) {\n    consoleStore.setState(\n      {\n        ...partialState,\n        errors: edgeServer.errors,\n        warnings: null,\n      } as OutputState,\n      true\n    )\n  } else {\n    // Show warnings from all of them\n    const warnings = [\n      ...(client.warnings || []),\n      ...(server.warnings || []),\n      ...(edgeServer.warnings || []),\n    ]\n\n    consoleStore.setState(\n      {\n        ...partialState,\n        errors: null,\n        warnings: warnings.length === 0 ? null : warnings,\n      } as OutputState,\n      true\n    )\n  }\n})\n\nexport function watchCompilers(\n  client: webpack.Compiler,\n  server: webpack.Compiler,\n  edgeServer: webpack.Compiler\n) {\n  buildStore.setState({\n    client: { loading: true },\n    server: { loading: true },\n    edgeServer: { loading: true },\n    trigger: 'initial',\n    url: undefined,\n  })\n\n  function tapCompiler(\n    key: CompilerNameValues,\n    compiler: webpack.Compiler,\n    onEvent: (status: WebpackStatus) => void\n  ) {\n    compiler.hooks.invalid.tap(`NextJsInvalid-${key}`, () => {\n      onEvent({ loading: true })\n    })\n\n    compiler.hooks.done.tap(`NextJsDone-${key}`, (stats: webpack.Stats) => {\n      const { errors, warnings } = formatWebpackMessages(\n        stats.toJson({\n          preset: 'errors-warnings',\n          moduleTrace: true,\n        })\n      )\n\n      const hasErrors = !!errors?.length\n      const hasWarnings = !!warnings?.length\n\n      onEvent({\n        loading: false,\n        totalModulesCount: stats.compilation.modules.size,\n        errors: hasErrors ? errors : null,\n        warnings: hasWarnings ? warnings : null,\n      })\n    })\n  }\n\n  tapCompiler(COMPILER_NAMES.client, client, (status) => {\n    if (\n      !status.loading &&\n      !buildStore.getState().server.loading &&\n      !buildStore.getState().edgeServer.loading &&\n      status.totalModulesCount > 0\n    ) {\n      buildStore.setState({\n        client: status,\n        trigger: undefined,\n        url: undefined,\n      })\n    } else {\n      buildStore.setState({\n        client: status,\n      })\n    }\n  })\n  tapCompiler(COMPILER_NAMES.server, server, (status) => {\n    if (\n      !status.loading &&\n      !buildStore.getState().client.loading &&\n      !buildStore.getState().edgeServer.loading &&\n      status.totalModulesCount > 0\n    ) {\n      buildStore.setState({\n        server: status,\n        trigger: undefined,\n        url: undefined,\n      })\n    } else {\n      buildStore.setState({\n        server: status,\n      })\n    }\n  })\n  tapCompiler(COMPILER_NAMES.edgeServer, edgeServer, (status) => {\n    if (\n      !status.loading &&\n      !buildStore.getState().client.loading &&\n      !buildStore.getState().server.loading &&\n      status.totalModulesCount > 0\n    ) {\n      buildStore.setState({\n        edgeServer: status,\n        trigger: undefined,\n        url: undefined,\n      })\n    } else {\n      buildStore.setState({\n        edgeServer: status,\n      })\n    }\n  })\n}\n\nexport function reportTrigger(trigger: string, url?: string) {\n  buildStore.setState({\n    trigger,\n    url,\n  })\n}\n"],"names":["createStore","formatWebpackMessages","store","consoleStore","COMPILER_NAMES","buildStore","client","server","edgeServer","buildWasDone","clientWasLoading","serverWasLoading","edgeServerWasLoading","subscribe","state","trigger","url","appUrl","getState","loading","setState","bootstrap","partialState","typeChecking","totalModulesCount","hasEdgeServer","errors","warnings","length","watchCompilers","undefined","tapCompiler","key","compiler","onEvent","hooks","invalid","tap","done","stats","toJson","preset","moduleTrace","hasErrors","hasWarnings","compilation","modules","size","status","reportTrigger"],"mappings":"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","ignoreList":[0]}
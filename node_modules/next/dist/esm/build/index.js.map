{"version":3,"sources":["../../src/build/index.ts"],"sourcesContent":["import type { PagesManifest } from './webpack/plugins/pages-manifest-plugin'\nimport type { ExportPathMap, NextConfigComplete } from '../server/config-shared'\nimport type { MiddlewareManifest } from './webpack/plugins/middleware-plugin'\nimport type { ActionManifest } from './webpack/plugins/flight-client-entry-plugin'\nimport type { CacheControl, Revalidate } from '../server/lib/cache-control'\n\nimport '../lib/setup-exception-listeners'\n\nimport { loadEnvConfig, type LoadedEnvFiles } from '@next/env'\nimport { bold, yellow } from '../lib/picocolors'\nimport { makeRe } from 'next/dist/compiled/picomatch'\nimport { existsSync, promises as fs } from 'fs'\nimport os from 'os'\nimport { Worker } from '../lib/worker'\nimport { defaultConfig } from '../server/config-shared'\nimport devalue from 'next/dist/compiled/devalue'\nimport findUp from 'next/dist/compiled/find-up'\nimport { nanoid } from 'next/dist/compiled/nanoid/index.cjs'\nimport path from 'path'\nimport {\n  STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR,\n  PUBLIC_DIR_MIDDLEWARE_CONFLICT,\n  MIDDLEWARE_FILENAME,\n  PROXY_FILENAME,\n  PAGES_DIR_ALIAS,\n  INSTRUMENTATION_HOOK_FILENAME,\n  RSC_PREFETCH_SUFFIX,\n  RSC_SUFFIX,\n  NEXT_RESUME_HEADER,\n  PRERENDER_REVALIDATE_HEADER,\n  PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER,\n  NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER,\n  NEXT_CACHE_REVALIDATED_TAGS_HEADER,\n  MATCHED_PATH_HEADER,\n  RSC_SEGMENTS_DIR_SUFFIX,\n  RSC_SEGMENT_SUFFIX,\n} from '../lib/constants'\nimport { FileType, fileExists } from '../lib/file-exists'\nimport { findPagesDir } from '../lib/find-pages-dir'\nimport loadCustomRoutes, {\n  normalizeRouteRegex,\n} from '../lib/load-custom-routes'\nimport type {\n  CustomRoutes,\n  Header,\n  Redirect,\n  Rewrite,\n  RouteHas,\n} from '../lib/load-custom-routes'\nimport { nonNullable } from '../lib/non-nullable'\nimport { recursiveDeleteSyncWithAsyncRetries } from '../lib/recursive-delete'\nimport { verifyPartytownSetup } from '../lib/verify-partytown-setup'\nimport {\n  BUILD_ID_FILE,\n  BUILD_MANIFEST,\n  CLIENT_STATIC_FILES_PATH,\n  EXPORT_DETAIL,\n  EXPORT_MARKER,\n  IMAGES_MANIFEST,\n  PAGES_MANIFEST,\n  PHASE_PRODUCTION_BUILD,\n  PRERENDER_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  ROUTES_MANIFEST,\n  SERVER_DIRECTORY,\n  SERVER_FILES_MANIFEST,\n  STATIC_STATUS_PAGES,\n  MIDDLEWARE_MANIFEST,\n  APP_PATHS_MANIFEST,\n  APP_PATH_ROUTES_MANIFEST,\n  RSC_MODULE_TYPES,\n  NEXT_FONT_MANIFEST,\n  SUBRESOURCE_INTEGRITY_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  FUNCTIONS_CONFIG_MANIFEST,\n  DYNAMIC_CSS_MANIFEST,\n  TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST,\n} from '../shared/lib/constants'\nimport {\n  UNDERSCORE_NOT_FOUND_ROUTE,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n  UNDERSCORE_GLOBAL_ERROR_ROUTE_ENTRY,\n} from '../shared/lib/entry-constants'\nimport { isDynamicRoute } from '../shared/lib/router/utils'\nimport { Bundler, finalizeBundlerFromConfig } from '../lib/bundler'\nimport type { __ApiPreviewProps } from '../server/api-utils'\nimport loadConfig from '../server/config'\nimport type { BuildManifest } from '../server/get-page-files'\nimport { normalizePagePath } from '../shared/lib/page-path/normalize-page-path'\nimport { getPagePath } from '../server/require'\nimport * as ciEnvironment from '../server/ci-info'\nimport {\n  turborepoTraceAccess,\n  TurborepoAccessTraceResult,\n  writeTurborepoAccessTraceResult,\n} from './turborepo-access-trace'\n\nimport {\n  eventBuildOptimize,\n  eventCliSession,\n  eventBuildFeatureUsage,\n  eventNextPlugins,\n  EVENT_BUILD_FEATURE_USAGE,\n  eventPackageUsedInGetServerSideProps,\n  eventBuildCompleted,\n  eventBuildFailed,\n} from '../telemetry/events'\nimport type { EventBuildFeatureUsage } from '../telemetry/events'\nimport { Telemetry } from '../telemetry/storage'\nimport {\n  createPagesMapping,\n  collectAppFiles,\n  processPageRoutes,\n  processAppRoutes,\n  processLayoutRoutes,\n  extractSlotsFromAppRoutes,\n  extractSlotsFromDefaultFiles,\n  combineSlots,\n  type RouteInfo,\n  type SlotInfo,\n  collectPagesFiles,\n} from './entries'\nimport { sortByPageExts } from './sort-by-page-exts'\nimport { getStaticInfoIncludingLayouts } from './get-static-info-including-layouts'\nimport { PAGE_TYPES } from '../lib/page-types'\nimport { generateBuildId } from './generate-build-id'\nimport { isWriteable } from './is-writeable'\nimport * as Log from './output/log'\nimport createSpinner from './spinner'\nimport { trace, flushAllTraces, setGlobal, type Span } from '../trace'\nimport {\n  detectConflictingPaths,\n  printCustomRoutes,\n  printTreeView,\n  copyTracedFiles,\n  isReservedPage,\n  isAppBuiltinPage,\n  collectRoutesUsingEdgeRuntime,\n  collectMeta,\n  isProxyFile,\n} from './utils'\nimport type { PageInfo, PageInfos } from './utils'\nimport type { FallbackRouteParam, PrerenderedRoute } from './static-paths/types'\nimport type { AppSegmentConfig } from './segment-config/app/app-segment-config'\nimport { writeBuildId } from './write-build-id'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport isError from '../lib/is-error'\nimport type { NextError } from '../lib/is-error'\nimport { isEdgeRuntime } from '../lib/is-edge-runtime'\nimport { recursiveCopy } from '../lib/recursive-copy'\nimport { lockfilePatchPromise, teardownTraceSubscriber } from './swc'\nimport { getNamedRouteRegex } from '../shared/lib/router/utils/route-regex'\nimport { getFilesInDir } from '../lib/get-files-in-dir'\nimport { eventSwcPlugins } from '../telemetry/events/swc-plugins'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\nimport {\n  ACTION_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n  NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n  NEXT_REWRITTEN_PATH_HEADER,\n  NEXT_REWRITTEN_QUERY_HEADER,\n} from '../client/components/app-router-headers'\nimport { webpackBuild } from './webpack-build'\nimport { NextBuildContext, type MappedPages } from './build-context'\nimport { normalizePathSep } from '../shared/lib/page-path/normalize-path-sep'\nimport { isAppRouteRoute } from '../lib/is-app-route-route'\nimport { createClientRouterFilter } from '../lib/create-client-router-filter'\nimport { createValidFileMatcher } from '../server/lib/find-page-file'\nimport { startTypeChecking } from './type-check'\nimport { generateInterceptionRoutesRewrites } from '../lib/generate-interception-routes-rewrites'\n\nimport { buildDataRoute } from '../server/lib/router-utils/build-data-route'\nimport { collectBuildTraces } from './collect-build-traces'\nimport type { BuildTraceContext } from './webpack/plugins/next-trace-entrypoints-plugin'\nimport { formatManifest } from './manifests/formatter/format-manifest'\nimport {\n  recordFrameworkVersion,\n  updateBuildDiagnostics,\n  recordFetchMetrics,\n} from '../diagnostics/build-diagnostics'\nimport { getStartServerInfo, logStartInfo } from '../server/lib/app-info-log'\nimport type { NextEnabledDirectories } from '../server/base-server'\nimport { hasCustomExportOutput } from '../export/utils'\nimport { buildCustomRoute } from '../lib/build-custom-route'\nimport { traceMemoryUsage } from '../lib/memory/trace'\nimport { generateEncryptionKeyBase64 } from '../server/app-render/encryption-utils-server'\nimport type { DeepReadonly } from '../shared/lib/deep-readonly'\nimport uploadTrace from '../trace/upload-trace'\nimport {\n  checkIsAppPPREnabled,\n  checkIsRoutePPREnabled,\n} from '../server/lib/experimental/ppr'\nimport { FallbackMode, fallbackModeToFallbackField } from '../lib/fallback'\nimport { RenderingMode } from './rendering-mode'\nimport { InvariantError } from '../shared/lib/invariant-error'\nimport { HTML_LIMITED_BOT_UA_RE_STRING } from '../shared/lib/router/utils/is-bot'\nimport type { UseCacheTrackerKey } from './webpack/plugins/telemetry-plugin/use-cache-tracker-utils'\nimport {\n  buildInversePrefetchSegmentDataRoute,\n  buildPrefetchSegmentDataRoute,\n  type PrefetchSegmentDataRoute,\n} from '../server/lib/router-utils/build-prefetch-segment-data-route'\n\nimport { turbopackBuild } from './turbopack-build'\nimport { isFileSystemCacheEnabledForBuild } from '../shared/lib/turbopack/utils'\nimport { inlineStaticEnv } from '../lib/inline-static-env'\nimport { populateStaticEnv } from '../lib/static-env'\nimport { durationToString, hrtimeDurationToString } from './duration-to-string'\nimport { traceGlobals } from '../trace/shared'\nimport { extractNextErrorCode } from '../lib/error-telemetry-utils'\nimport { runAfterProductionCompile } from './after-production-compile'\nimport { generatePreviewKeys } from './preview-key-utils'\nimport { handleBuildComplete } from './adapter/build-complete'\nimport {\n  sortPageObjects,\n  sortPages,\n  sortSortableRouteObjects,\n} from '../shared/lib/router/utils/sortable-routes'\nimport { mkdir } from 'fs/promises'\nimport {\n  createRouteTypesManifest,\n  writeRouteTypesManifest,\n  writeValidatorFile,\n} from '../server/lib/router-utils/route-types-utils'\nimport { Lockfile } from './lockfile'\n\ntype Fallback = null | boolean | string\n\nexport interface PrerenderManifestRoute {\n  dataRoute: string | null\n  experimentalBypassFor?: RouteHas[]\n\n  /**\n   * The headers that should be served along side this prerendered route.\n   */\n  initialHeaders?: Record<string, string>\n\n  /**\n   * The status code that should be served along side this prerendered route.\n   */\n  initialStatus?: number\n\n  /**\n   * The revalidate value for this route. This might be inferred from:\n   * - route segment configs\n   * - fetch calls\n   * - unstable_cache\n   * - \"use cache\"\n   */\n  initialRevalidateSeconds: Revalidate\n\n  /**\n   * The expire value for this route, which is inferred from the \"use cache\"\n   * functions that are used by the route, or the expireTime config.\n   */\n  initialExpireSeconds: number | undefined\n\n  /**\n   * The prefetch data route associated with this page. If not defined, this\n   * page does not support prefetching.\n   */\n  prefetchDataRoute: string | null | undefined\n\n  /**\n   * The dynamic route that this statically prerendered route is based on. If\n   * this is null, then the route was not based on a dynamic route.\n   */\n  srcRoute: string | null\n\n  /**\n   * @deprecated use `renderingMode` instead\n   */\n  experimentalPPR: boolean | undefined\n\n  /**\n   * The rendering mode for this route. Only `undefined` when not an app router\n   * route.\n   */\n  renderingMode: RenderingMode | undefined\n\n  /**\n   * The headers that are allowed to be used when revalidating this route. These\n   * are used internally by Next.js to revalidate routes.\n   */\n  allowHeader: string[]\n}\n\nexport interface DynamicPrerenderManifestRoute {\n  dataRoute: string | null\n  dataRouteRegex: string | null\n  experimentalBypassFor?: RouteHas[]\n  fallback: Fallback\n\n  /**\n   * When defined, it describes the revalidation configuration for the fallback\n   * route.\n   */\n  fallbackRevalidate: Revalidate | undefined\n\n  /**\n   * When defined, it describes the expire configuration for the fallback route.\n   */\n  fallbackExpire: number | undefined\n\n  /**\n   * The headers that should used when serving the fallback.\n   */\n  fallbackHeaders?: Record<string, string>\n\n  /**\n   * The status code that should be used when serving the fallback.\n   */\n  fallbackStatus?: number\n\n  /**\n   * The root params that are unknown for this fallback route.\n   */\n  fallbackRootParams: readonly string[] | undefined\n\n  /**\n   * The fallback route params for this route that were parsed from the loader\n   * tree.\n   */\n  fallbackRouteParams: readonly FallbackRouteParam[] | undefined\n\n  /**\n   * The source route that this fallback route is based on. This is a reference\n   * so that we can associate this dynamic route with the correct source.\n   */\n  fallbackSourceRoute: string | undefined\n\n  prefetchDataRoute: string | null | undefined\n  prefetchDataRouteRegex: string | null | undefined\n  routeRegex: string\n\n  /**\n   * @deprecated use `renderingMode` instead\n   */\n  experimentalPPR: boolean | undefined\n\n  /**\n   * The rendering mode for this route. Only `undefined` when not an app router\n   * route.\n   */\n  renderingMode: RenderingMode | undefined\n\n  /**\n   * The headers that are allowed to be used when revalidating this route. These\n   * are used internally by Next.js to revalidate routes.\n   */\n  allowHeader: string[]\n}\n\n/**\n * The headers that are allowed to be used when revalidating routes. Currently\n * this includes both headers used by the pages and app routers.\n */\nconst ALLOWED_HEADERS: string[] = [\n  'host',\n  MATCHED_PATH_HEADER,\n  PRERENDER_REVALIDATE_HEADER,\n  PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER,\n  NEXT_CACHE_REVALIDATED_TAGS_HEADER,\n  NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER,\n]\n\nexport type PrerenderManifest = {\n  version: 4\n  routes: { [route: string]: PrerenderManifestRoute }\n  dynamicRoutes: { [route: string]: DynamicPrerenderManifestRoute }\n  notFoundRoutes: string[]\n  preview: __ApiPreviewProps\n}\n\ntype ManifestBuiltRoute = {\n  /**\n   * The route pattern used to match requests for this route.\n   */\n  regex: string\n}\n\nexport type ManifestRewriteRoute = ManifestBuiltRoute & Rewrite\nexport type ManifestRedirectRoute = ManifestBuiltRoute & Redirect\nexport type ManifestHeaderRoute = ManifestBuiltRoute & Header\n\nexport type ManifestRoute = ManifestBuiltRoute & {\n  page: string\n  namedRegex: string\n  routeKeys: { [key: string]: string }\n\n  /**\n   * If true, this indicates that the route has fallback root params. This is\n   * used to simplify the route regex for matching.\n   */\n  hasFallbackRootParams?: boolean\n\n  /**\n   * The prefetch segment data routes for this route. This is used to rewrite\n   * the prefetch segment data routes (or the inverse) to the correct\n   * destination.\n   */\n  prefetchSegmentDataRoutes?: PrefetchSegmentDataRoute[]\n\n  /**\n   * If true, this indicates that the route should not be considered for routing\n   * for the internal router, and instead has been added to support external\n   * routers.\n   */\n  skipInternalRouting?: boolean\n}\n\ntype DynamicManifestRoute = ManifestRoute & {\n  /**\n   * The source page that this route is based on. This is used to determine the\n   * source page for the route and is only relevant for app pages where PPR is\n   * enabled and the page differs from the source page.\n   */\n  sourcePage: string | undefined\n}\n\ntype ManifestDataRoute = {\n  page: string\n  routeKeys?: { [key: string]: string }\n  dataRouteRegex: string\n  namedDataRouteRegex?: string\n}\n\nexport type RoutesManifest = {\n  version: number\n  pages404: boolean\n  basePath: string\n  redirects: Array<ManifestRedirectRoute>\n  rewrites: {\n    beforeFiles: Array<ManifestRewriteRoute>\n    afterFiles: Array<ManifestRewriteRoute>\n    fallback: Array<ManifestRewriteRoute>\n  }\n  headers: Array<ManifestHeaderRoute>\n  staticRoutes: Array<ManifestRoute>\n  dynamicRoutes: ReadonlyArray<DynamicManifestRoute>\n  dataRoutes: Array<ManifestDataRoute>\n  i18n?: {\n    domains?: ReadonlyArray<{\n      http?: true\n      domain: string\n      locales?: readonly string[]\n      defaultLocale: string\n    }>\n    locales: readonly string[]\n    defaultLocale: string\n    localeDetection?: false\n  }\n  rsc: {\n    header: typeof RSC_HEADER\n    didPostponeHeader: typeof NEXT_DID_POSTPONE_HEADER\n    contentTypeHeader: typeof RSC_CONTENT_TYPE_HEADER\n    varyHeader: string\n    prefetchHeader: typeof NEXT_ROUTER_PREFETCH_HEADER\n    suffix: typeof RSC_SUFFIX\n    prefetchSuffix: typeof RSC_PREFETCH_SUFFIX\n    prefetchSegmentHeader: typeof NEXT_ROUTER_SEGMENT_PREFETCH_HEADER\n    prefetchSegmentDirSuffix: typeof RSC_SEGMENTS_DIR_SUFFIX\n    prefetchSegmentSuffix: typeof RSC_SEGMENT_SUFFIX\n\n    /**\n     * Whether the client param parsing is enabled. This is automatically enabled when\n     * cacheComponents is enabled.\n     */\n    clientParamParsing: boolean\n\n    /**\n     * The origins that are allowed to write the rewritten headers when\n     * performing a non-relative rewrite. When undefined, no non-relative\n     * rewrites will get the rewrite headers.\n     */\n    clientParamParsingOrigins: string[] | undefined\n    dynamicRSCPrerender: boolean\n  }\n  rewriteHeaders: {\n    pathHeader: typeof NEXT_REWRITTEN_PATH_HEADER\n    queryHeader: typeof NEXT_REWRITTEN_QUERY_HEADER\n  }\n  skipProxyUrlNormalize?: boolean\n  caseSensitive?: boolean\n  /**\n   * Configuration related to Partial Prerendering.\n   */\n  ppr?: {\n    /**\n     * The chained response for the PPR resume.\n     */\n    chain: {\n      /**\n       * The headers that will indicate to Next.js that the request is for a PPR\n       * resume.\n       */\n      headers: Record<string, string>\n    }\n  }\n}\n\n/**\n * Converts a page to a manifest route.\n *\n * @param page The page to convert to a route.\n * @returns A route object.\n */\nfunction pageToRoute(page: string): ManifestRoute\n/**\n * Converts a page to a dynamic manifest route.\n *\n * @param page The page to convert to a route.\n * @param sourcePage The source page that this route is based on. This is used\n * to determine the source page for the route and is only relevant for app\n * pages when PPR is enabled on them.\n * @returns A route object.\n */\nfunction pageToRoute(\n  page: string,\n  sourcePage: string | undefined\n): DynamicManifestRoute\nfunction pageToRoute(\n  page: string,\n  sourcePage?: string\n): DynamicManifestRoute | ManifestRoute {\n  const routeRegex = getNamedRouteRegex(page, {\n    prefixRouteKeys: true,\n  })\n  return {\n    sourcePage,\n    page,\n    regex: normalizeRouteRegex(routeRegex.re.source),\n    routeKeys: routeRegex.routeKeys,\n    namedRegex: routeRegex.namedRegex,\n  }\n}\n\nfunction getCacheDir(distDir: string): string {\n  const cacheDir = path.join(distDir, 'cache')\n  if (ciEnvironment.isCI && !ciEnvironment.hasNextSupport) {\n    const hasCache = existsSync(cacheDir)\n\n    if (!hasCache) {\n      // Intentionally not piping to stderr which is what `Log.warn` does in case people fail in CI when\n      // stderr is detected.\n      console.log(\n        `${Log.prefixes.warn} No build cache found. Please configure build caching for faster rebuilds. Read more: https://nextjs.org/docs/messages/no-cache`\n      )\n    }\n  }\n  return cacheDir\n}\n\nasync function writeFileUtf8(filePath: string, content: string): Promise<void> {\n  await fs.writeFile(filePath, content, 'utf-8')\n}\n\nfunction readFileUtf8(filePath: string): Promise<string> {\n  return fs.readFile(filePath, 'utf8')\n}\n\nasync function writeManifest<T extends object>(\n  filePath: string,\n  manifest: T\n): Promise<void> {\n  await writeFileUtf8(filePath, formatManifest(manifest))\n}\n\nasync function readManifest<T extends object>(filePath: string): Promise<T> {\n  return JSON.parse(await readFileUtf8(filePath))\n}\n\nasync function writePrerenderManifest(\n  distDir: string,\n  manifest: DeepReadonly<PrerenderManifest>\n): Promise<void> {\n  await writeManifest(path.join(distDir, PRERENDER_MANIFEST), manifest)\n}\n\nasync function writeClientSsgManifest(\n  prerenderManifest: DeepReadonly<PrerenderManifest>,\n  {\n    buildId,\n    distDir,\n    locales,\n  }: {\n    buildId: string\n    distDir: string\n    locales: readonly string[] | undefined\n  }\n) {\n  const ssgPages = new Set<string>(\n    [\n      ...Object.entries(prerenderManifest.routes)\n        // Filter out dynamic routes\n        .filter(([, { srcRoute }]) => srcRoute == null)\n        .map(([route]) => normalizeLocalePath(route, locales).pathname),\n      ...Object.keys(prerenderManifest.dynamicRoutes),\n    ].sort()\n  )\n\n  const clientSsgManifestContent = `self.__SSG_MANIFEST=${devalue(\n    ssgPages\n  )};self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()`\n\n  await writeFileUtf8(\n    path.join(distDir, CLIENT_STATIC_FILES_PATH, buildId, '_ssgManifest.js'),\n    clientSsgManifestContent\n  )\n}\n\nexport interface FunctionsConfigManifest {\n  version: number\n  functions: Record<\n    string,\n    {\n      maxDuration?: number | undefined\n      runtime?: 'nodejs'\n      regions?: string[] | string\n      matchers?: Array<{\n        regexp: string\n        originalSource: string\n        has?: Rewrite['has']\n        missing?: Rewrite['has']\n      }>\n    }\n  >\n}\n\nasync function writeFunctionsConfigManifest(\n  distDir: string,\n  manifest: FunctionsConfigManifest\n): Promise<void> {\n  await writeManifest(\n    path.join(distDir, SERVER_DIRECTORY, FUNCTIONS_CONFIG_MANIFEST),\n    manifest\n  )\n}\n\nexport interface RequiredServerFilesManifest {\n  version: number\n  config: NextConfigComplete\n  appDir: string\n  relativeAppDir: string\n  files: string[]\n  ignore: string[]\n}\n\nasync function writeRequiredServerFilesManifest(\n  distDir: string,\n  requiredServerFiles: RequiredServerFilesManifest\n) {\n  await writeManifest(\n    path.join(distDir, SERVER_FILES_MANIFEST),\n    requiredServerFiles\n  )\n}\n\nasync function writeImagesManifest(\n  distDir: string,\n  config: NextConfigComplete\n): Promise<void> {\n  const images = { ...config.images }\n  const { deviceSizes, imageSizes } = images\n  ;(images as any).sizes = [...deviceSizes, ...imageSizes]\n\n  // By default, remotePatterns will allow no remote images ([])\n  images.remotePatterns = (config?.images?.remotePatterns || []).map((p) => ({\n    // Modifying the manifest should also modify matchRemotePattern()\n    protocol: p.protocol?.replace(/:$/, '') as 'http' | 'https' | undefined,\n    hostname: makeRe(p.hostname).source,\n    port: p.port,\n    pathname: makeRe(p.pathname ?? '**', { dot: true }).source,\n    search: p.search,\n  }))\n\n  // By default, localPatterns will allow all local images (undefined)\n  if (config?.images?.localPatterns) {\n    images.localPatterns = config.images.localPatterns.map((p) => ({\n      // Modifying the manifest should also modify matchLocalPattern()\n      pathname: makeRe(p.pathname ?? '**', { dot: true }).source,\n      search: p.search,\n    }))\n  }\n\n  await writeManifest(path.join(distDir, IMAGES_MANIFEST), {\n    version: 1,\n    images,\n  })\n}\n\nconst STANDALONE_DIRECTORY = 'standalone' as const\nasync function writeStandaloneDirectory(\n  nextBuildSpan: Span,\n  distDir: string,\n  pageKeys: { pages: string[]; app: string[] | undefined },\n  denormalizedAppPages: string[] | undefined,\n  outputFileTracingRoot: string,\n  requiredServerFiles: RequiredServerFilesManifest,\n  middlewareManifest: MiddlewareManifest,\n  hasNodeMiddleware: boolean,\n  hasInstrumentationHook: boolean,\n  staticPages: Set<string>,\n  loadedEnvFiles: LoadedEnvFiles,\n  appDir: string | undefined\n) {\n  await nextBuildSpan\n    .traceChild('write-standalone-directory')\n    .traceAsyncFn(async () => {\n      await copyTracedFiles(\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        requiredServerFiles.appDir,\n        distDir,\n        pageKeys.pages,\n        denormalizedAppPages,\n        outputFileTracingRoot,\n        requiredServerFiles.config,\n        middlewareManifest,\n        hasNodeMiddleware,\n        hasInstrumentationHook,\n        staticPages\n      )\n\n      for (const file of [\n        ...requiredServerFiles.files,\n        path.join(requiredServerFiles.config.distDir, SERVER_FILES_MANIFEST),\n        ...loadedEnvFiles.reduce<string[]>((acc, envFile) => {\n          if (['.env', '.env.production'].includes(envFile.path)) {\n            acc.push(envFile.path)\n          }\n          return acc\n        }, []),\n      ]) {\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        const filePath = path.join(requiredServerFiles.appDir, file)\n        const outputPath = path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, filePath)\n        )\n        await fs.mkdir(path.dirname(outputPath), {\n          recursive: true,\n        })\n        await fs.copyFile(filePath, outputPath)\n      }\n\n      if (hasNodeMiddleware) {\n        const middlewareOutput = path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, distDir),\n          SERVER_DIRECTORY,\n          'middleware.js'\n        )\n\n        await fs.mkdir(path.dirname(middlewareOutput), { recursive: true })\n        await fs.copyFile(\n          path.join(distDir, SERVER_DIRECTORY, 'middleware.js'),\n          middlewareOutput\n        )\n      }\n\n      const originalPagesDir = path.join(distDir, SERVER_DIRECTORY, 'pages')\n\n      if (existsSync(originalPagesDir)) {\n        await recursiveCopy(\n          originalPagesDir,\n          path.join(\n            distDir,\n            STANDALONE_DIRECTORY,\n            path.relative(outputFileTracingRoot, distDir),\n            SERVER_DIRECTORY,\n            'pages'\n          ),\n          { overwrite: true }\n        )\n      }\n\n      if (appDir) {\n        const originalServerApp = path.join(distDir, SERVER_DIRECTORY, 'app')\n        if (existsSync(originalServerApp)) {\n          await recursiveCopy(\n            originalServerApp,\n            path.join(\n              distDir,\n              STANDALONE_DIRECTORY,\n              path.relative(outputFileTracingRoot, distDir),\n              SERVER_DIRECTORY,\n              'app'\n            ),\n            { overwrite: true }\n          )\n        }\n      }\n    })\n}\n\nfunction getNumberOfWorkers(config: NextConfigComplete) {\n  if (\n    config.experimental.cpus &&\n    config.experimental.cpus !== defaultConfig.experimental!.cpus\n  ) {\n    return config.experimental.cpus\n  }\n\n  if (config.experimental.memoryBasedWorkersCount) {\n    return Math.max(\n      Math.min(config.experimental.cpus || 1, Math.floor(os.freemem() / 1e9)),\n      // enforce a minimum of 4 workers\n      4\n    )\n  }\n\n  if (config.experimental.cpus) {\n    return config.experimental.cpus\n  }\n\n  // Fall back to 4 workers if a count is not specified\n  return 4\n}\n\nconst staticWorkerPath = require.resolve('./worker')\nconst staticWorkerExposedMethods = [\n  'hasCustomGetInitialProps',\n  'isPageStatic',\n  'getDefinedNamedExports',\n  'exportPages',\n] as const\nexport type StaticWorker = typeof import('./worker') & Worker\nexport function createStaticWorker(\n  config: NextConfigComplete,\n  options: {\n    debuggerPortOffset: number\n    progress?: {\n      run: () => void\n      clear: () => void\n    }\n  }\n): StaticWorker {\n  const { debuggerPortOffset, progress } = options\n  return new Worker(staticWorkerPath, {\n    logger: Log,\n    numWorkers: getNumberOfWorkers(config),\n    onActivity: () => {\n      progress?.run()\n    },\n    onActivityAbort: () => {\n      progress?.clear()\n    },\n    debuggerPortOffset,\n    enableSourceMaps: config.enablePrerenderSourceMaps,\n    // remove --max-old-space-size flag as it can cause memory issues.\n    isolatedMemory: true,\n    enableWorkerThreads: config.experimental.workerThreads,\n    exposedMethods: staticWorkerExposedMethods,\n  }) as StaticWorker\n}\n\nasync function writeFullyStaticExport(\n  config: NextConfigComplete,\n  dir: string,\n  enabledDirectories: NextEnabledDirectories,\n  configOutDir: string,\n  nextBuildSpan: Span,\n  appDirOnly: boolean\n): Promise<void> {\n  const exportApp = (require('../export') as typeof import('../export'))\n    .default as typeof import('../export').default\n\n  await exportApp(\n    dir,\n    {\n      buildExport: false,\n      nextConfig: config,\n      enabledDirectories,\n      silent: true,\n      outdir: path.join(dir, configOutDir),\n      numWorkers: getNumberOfWorkers(config),\n      appDirOnly,\n    },\n    nextBuildSpan\n  )\n}\n\nasync function getBuildId(\n  isGenerateMode: boolean,\n  distDir: string,\n  nextBuildSpan: Span,\n  config: NextConfigComplete\n) {\n  if (isGenerateMode) {\n    return await fs.readFile(path.join(distDir, 'BUILD_ID'), 'utf8')\n  }\n  return await nextBuildSpan\n    .traceChild('generate-buildid')\n    .traceAsyncFn(() => generateBuildId(config.generateBuildId, nanoid))\n}\n\nexport default async function build(\n  dir: string,\n  reactProductionProfiling = false,\n  debugOutput = false,\n  debugPrerender = false,\n  noMangling = false,\n  appDirOnly = false,\n  bundler = Bundler.Turbopack,\n  experimentalBuildMode: 'default' | 'compile' | 'generate' | 'generate-env',\n  traceUploadUrl: string | undefined,\n  debugBuildAppPaths?: string[],\n  debugBuildPagePaths?: string[]\n): Promise<void> {\n  const isCompileMode = experimentalBuildMode === 'compile'\n  const isGenerateMode = experimentalBuildMode === 'generate'\n  NextBuildContext.isCompileMode = isCompileMode\n  const buildStartTime = Date.now()\n\n  let loadedConfig: NextConfigComplete | undefined\n  try {\n    const nextBuildSpan = trace('next-build', undefined, {\n      buildMode: experimentalBuildMode,\n      version: process.env.__NEXT_VERSION as string,\n    })\n\n    NextBuildContext.nextBuildSpan = nextBuildSpan\n    NextBuildContext.dir = dir\n    NextBuildContext.appDirOnly = appDirOnly\n    NextBuildContext.reactProductionProfiling = reactProductionProfiling\n    NextBuildContext.noMangling = noMangling\n    NextBuildContext.debugPrerender = debugPrerender\n\n    await nextBuildSpan.traceAsyncFn(async () => {\n      // attempt to load global env values so they are available in next.config.js\n      const { loadedEnvFiles } = nextBuildSpan\n        .traceChild('load-dotenv')\n        .traceFn(() => loadEnvConfig(dir, false, Log))\n      NextBuildContext.loadedEnvFiles = loadedEnvFiles\n\n      const turborepoAccessTraceResult = new TurborepoAccessTraceResult()\n      const config: NextConfigComplete = await nextBuildSpan\n        .traceChild('load-next-config')\n        .traceAsyncFn(() =>\n          turborepoTraceAccess(\n            () =>\n              loadConfig(PHASE_PRODUCTION_BUILD, dir, {\n                // Log for next.config loading process\n                silent: false,\n                reactProductionProfiling,\n                debugPrerender,\n              }),\n            turborepoAccessTraceResult\n          )\n        )\n      loadedConfig = config\n\n      // Reading the config can modify environment variables that influence the bundler selection.\n      bundler = finalizeBundlerFromConfig(bundler)\n      nextBuildSpan.setAttribute('bundler', getBundlerForTelemetry(bundler))\n\n      process.env.NEXT_DEPLOYMENT_ID = config.deploymentId || ''\n      NextBuildContext.config = config\n\n      let configOutDir = 'out'\n      if (hasCustomExportOutput(config)) {\n        configOutDir = config.distDir\n        config.distDir = '.next'\n      }\n      const distDir = path.join(dir, config.distDir)\n      NextBuildContext.distDir = distDir\n      setGlobal('phase', PHASE_PRODUCTION_BUILD)\n      setGlobal('distDir', distDir)\n\n      const buildId = await getBuildId(\n        isGenerateMode,\n        distDir,\n        nextBuildSpan,\n        config\n      )\n      NextBuildContext.buildId = buildId\n\n      if (experimentalBuildMode === 'generate-env') {\n        if (bundler === Bundler.Turbopack) {\n          Log.warn('generate-env is not needed with turbopack')\n          process.exit(0)\n        }\n        Log.info('Inlining static env ...')\n        await nextBuildSpan\n          .traceChild('inline-static-env')\n          .traceAsyncFn(async () => {\n            await inlineStaticEnv({\n              distDir,\n              config,\n            })\n          })\n\n        Log.info('Complete')\n        await flushAllTraces()\n        teardownTraceSubscriber()\n        process.exit(0)\n      }\n\n      // when using compile mode static env isn't inlined so we\n      // need to populate in normal runtime env\n      if (isCompileMode || isGenerateMode) {\n        populateStaticEnv(config)\n      }\n\n      const customRoutes: CustomRoutes = await nextBuildSpan\n        .traceChild('load-custom-routes')\n        .traceAsyncFn(() => loadCustomRoutes(config))\n\n      const { headers, rewrites, redirects } = customRoutes\n      const combinedRewrites: Rewrite[] = [\n        ...rewrites.beforeFiles,\n        ...rewrites.afterFiles,\n        ...rewrites.fallback,\n      ]\n      const hasRewrites = combinedRewrites.length > 0\n      NextBuildContext.hasRewrites = hasRewrites\n      NextBuildContext.originalRewrites = config._originalRewrites\n      NextBuildContext.originalRedirects = config._originalRedirects\n\n      const distDirCreated = await nextBuildSpan\n        .traceChild('create-dist-dir')\n        .traceAsyncFn(async () => {\n          try {\n            await fs.mkdir(distDir, { recursive: true })\n            return true\n          } catch (err) {\n            if (isError(err) && err.code === 'EPERM') {\n              return false\n            }\n            throw err\n          }\n        })\n\n      if (!distDirCreated || !(await isWriteable(distDir))) {\n        throw new Error(\n          '> Build directory is not writeable. https://nextjs.org/docs/messages/build-dir-not-writeable'\n        )\n      }\n\n      if (config.experimental.lockDistDir) {\n        // This leaks the lock file descriptor. That's okay, it'll be cleaned up by the OS upon\n        // process exit.\n        await Lockfile.acquireWithRetriesOrExit(\n          path.join(distDir, 'lock'),\n          'next build'\n        )\n      }\n\n      if (config.cleanDistDir && !isGenerateMode) {\n        await nextBuildSpan\n          .traceChild('clean')\n          .traceAsyncFn(() =>\n            recursiveDeleteSyncWithAsyncRetries(distDir, /^(cache|dev|lock)/)\n          )\n      }\n\n      const cacheDir = getCacheDir(distDir)\n\n      const telemetry = new Telemetry({ distDir })\n\n      setGlobal('telemetry', telemetry)\n\n      const publicDir = path.join(dir, 'public')\n      const { pagesDir, appDir } = findPagesDir(dir)\n\n      if (!appDirOnly && !pagesDir) {\n        appDirOnly = true\n      }\n\n      NextBuildContext.pagesDir = pagesDir\n      NextBuildContext.appDir = appDir\n\n      const enabledDirectories: NextEnabledDirectories = {\n        app: typeof appDir === 'string',\n        pages: typeof pagesDir === 'string',\n      }\n\n      // Generate a random encryption key for this build.\n      // This key is used to encrypt cross boundary values and can be used to generate hashes.\n      const encryptionKey = await generateEncryptionKeyBase64({\n        isBuild: true,\n        distDir,\n      })\n      NextBuildContext.encryptionKey = encryptionKey\n\n      const isSrcDir = path\n        .relative(dir, pagesDir || appDir || '')\n        .startsWith('src')\n      const hasPublicDir = existsSync(publicDir)\n\n      telemetry.record(\n        eventCliSession(config, {\n          webpackVersion: 5,\n          cliCommand: 'build',\n          isSrcDir,\n          hasNowJson: !!(await findUp('now.json', { cwd: dir })),\n          isCustomServer: null,\n          turboFlag: false,\n          pagesDir: !!pagesDir,\n          appDir: !!appDir,\n        })\n      )\n\n      eventNextPlugins(path.resolve(dir)).then((events) =>\n        telemetry.record(events)\n      )\n\n      eventSwcPlugins(path.resolve(dir), config).then((events) =>\n        telemetry.record(events)\n      )\n\n      // Always log next version first then start rest jobs\n      const { envInfo, experimentalFeatures, cacheComponents } =\n        await getStartServerInfo({\n          dir,\n          dev: false,\n          debugPrerender,\n        })\n\n      logStartInfo({\n        networkUrl: null,\n        appUrl: null,\n        envInfo,\n        experimentalFeatures,\n        logBundler: true,\n        cacheComponents,\n      })\n\n      const typeCheckingOptions: Parameters<typeof startTypeChecking>[0] = {\n        dir,\n        appDir,\n        pagesDir,\n        telemetry,\n        nextBuildSpan,\n        config,\n        cacheDir,\n      }\n\n      if (appDir && 'exportPathMap' in config) {\n        Log.error(\n          'The \"exportPathMap\" configuration cannot be used with the \"app\" directory. Please use generateStaticParams() instead.'\n        )\n        await telemetry.flush()\n        process.exit(1)\n      }\n\n      const validFileMatcher = createValidFileMatcher(\n        config.pageExtensions,\n        appDir\n      )\n\n      const providedPagePaths: string[] = JSON.parse(\n        process.env.NEXT_PRIVATE_PAGE_PATHS || '[]'\n      )\n\n      let pagesPaths = Boolean(process.env.NEXT_PRIVATE_PAGE_PATHS)\n        ? providedPagePaths\n        : !appDirOnly && pagesDir\n          ? await nextBuildSpan\n              .traceChild('collect-pages')\n              .traceAsyncFn(() => collectPagesFiles(pagesDir, validFileMatcher))\n          : []\n\n      // Apply debug build paths filter if specified\n      // If debugBuildPagePaths is defined (even if empty), only build specified pages\n      if (debugBuildPagePaths !== undefined) {\n        if (debugBuildPagePaths.length > 0) {\n          const debugPathsSet = new Set(debugBuildPagePaths)\n          pagesPaths = pagesPaths.filter((pagePath) =>\n            debugPathsSet.has(pagePath)\n          )\n        } else {\n          // Empty array means build no pages\n          pagesPaths = []\n        }\n      }\n\n      const middlewareDetectionRegExp = new RegExp(\n        `^${MIDDLEWARE_FILENAME}\\\\.(?:${config.pageExtensions.join('|')})$`\n      )\n\n      const proxyDetectionRegExp = new RegExp(\n        `^${PROXY_FILENAME}\\\\.(?:${config.pageExtensions.join('|')})$`\n      )\n\n      const instrumentationHookDetectionRegExp = new RegExp(\n        `^${INSTRUMENTATION_HOOK_FILENAME}\\\\.(?:${config.pageExtensions.join(\n          '|'\n        )})$`\n      )\n\n      const rootDir = path.join((pagesDir || appDir)!, '..')\n      const includes = [\n        middlewareDetectionRegExp,\n        proxyDetectionRegExp,\n        instrumentationHookDetectionRegExp,\n      ]\n\n      const rootPaths = Array.from(await getFilesInDir(rootDir))\n        .filter((file) => includes.some((include) => include.test(file)))\n        .sort(sortByPageExts(config.pageExtensions))\n        .map((file) => path.join(rootDir, file).replace(dir, ''))\n\n      let instrumentationHookFilePath: string | undefined\n      let proxyFilePath: string | undefined\n      let middlewareFilePath: string | undefined\n\n      for (const rootPath of rootPaths) {\n        const { name: fileBaseName, dir: fileDir } = path.parse(rootPath)\n        const isAtConventionLevel = fileDir === '/' || fileDir === '/src'\n\n        if (isAtConventionLevel && fileBaseName === MIDDLEWARE_FILENAME) {\n          middlewareFilePath = rootPath\n        }\n        if (isAtConventionLevel && fileBaseName === PROXY_FILENAME) {\n          proxyFilePath = rootPath\n        }\n        if (\n          isAtConventionLevel &&\n          fileBaseName === INSTRUMENTATION_HOOK_FILENAME\n        ) {\n          instrumentationHookFilePath = rootPath\n        }\n      }\n\n      if (middlewareFilePath) {\n        if (proxyFilePath) {\n          const cwd = process.cwd()\n          const absoluteProxyPath = path.join(rootDir, proxyFilePath)\n          const absoluteMiddlewarePath = path.join(rootDir, middlewareFilePath)\n\n          throw new Error(\n            `Both ${MIDDLEWARE_FILENAME} file \"./${path.relative(cwd, absoluteMiddlewarePath)}\" and ${PROXY_FILENAME} file \"./${path.relative(cwd, absoluteProxyPath)}\" are detected. Please use \"./${path.relative(cwd, absoluteProxyPath)}\" only. Learn more: https://nextjs.org/docs/messages/middleware-to-proxy`\n          )\n        }\n        Log.warnOnce(\n          `The \"${MIDDLEWARE_FILENAME}\" file convention is deprecated. Please use \"${PROXY_FILENAME}\" instead. Learn more: https://nextjs.org/docs/messages/middleware-to-proxy`\n        )\n      }\n\n      const hasInstrumentationHook = Boolean(instrumentationHookFilePath)\n      const hasMiddlewareFile = Boolean(middlewareFilePath)\n      const hasProxyFile = Boolean(proxyFilePath)\n\n      NextBuildContext.hasInstrumentationHook = hasInstrumentationHook\n\n      const previewProps: __ApiPreviewProps = await generatePreviewKeys({\n        isBuild: true,\n        distDir,\n      })\n      NextBuildContext.previewProps = previewProps\n\n      const mappedPages = await nextBuildSpan\n        .traceChild('create-pages-mapping')\n        .traceAsyncFn(() =>\n          createPagesMapping({\n            isDev: false,\n            pageExtensions: config.pageExtensions,\n            pagesType: PAGE_TYPES.PAGES,\n            pagePaths: pagesPaths,\n            pagesDir,\n            appDir,\n            appDirOnly,\n          })\n        )\n      NextBuildContext.mappedPages = mappedPages\n\n      let mappedAppPages: MappedPages | undefined\n      let mappedAppLayouts: MappedPages | undefined\n      let denormalizedAppPages: string[] | undefined\n\n      if (appDir) {\n        const providedAppPaths: string[] = JSON.parse(\n          process.env.NEXT_PRIVATE_APP_PATHS || '[]'\n        )\n\n        let appPaths: string[]\n        let layoutPaths: string[]\n\n        if (Boolean(process.env.NEXT_PRIVATE_APP_PATHS)) {\n          // used for testing\n          appPaths = providedAppPaths\n          layoutPaths = []\n        } else {\n          // Collect app pages, layouts, and default files in a single directory traversal\n          const result = await nextBuildSpan\n            .traceChild('collect-app-files')\n            .traceAsyncFn(() => collectAppFiles(appDir, validFileMatcher))\n\n          appPaths = result.appPaths\n          layoutPaths = result.layoutPaths\n\n          // Apply debug build paths filter if specified\n          // If debugBuildAppPaths is defined (even if empty), only build specified app paths\n          if (debugBuildAppPaths !== undefined) {\n            if (debugBuildAppPaths.length > 0) {\n              const debugPathsSet = new Set(debugBuildAppPaths)\n              appPaths = appPaths.filter((appPath) =>\n                debugPathsSet.has(appPath)\n              )\n            } else {\n              // Empty array means build no app paths\n              appPaths = []\n            }\n          }\n          // Note: defaultPaths are not used in the build process, only for slot detection in generating route types\n        }\n\n        mappedAppPages = await nextBuildSpan\n          .traceChild('create-app-mapping')\n          .traceAsyncFn(() =>\n            createPagesMapping({\n              pagePaths: appPaths,\n              isDev: false,\n              pagesType: PAGE_TYPES.APP,\n              pageExtensions: config.pageExtensions,\n              pagesDir,\n              appDir,\n              appDirOnly,\n            })\n          )\n\n        mappedAppLayouts = await nextBuildSpan\n          .traceChild('create-app-layouts')\n          .traceAsyncFn(() =>\n            createPagesMapping({\n              pagePaths: layoutPaths,\n              isDev: false,\n              pagesType: PAGE_TYPES.APP,\n              pageExtensions: config.pageExtensions,\n              pagesDir,\n              appDir,\n              appDirOnly,\n            })\n          )\n\n        NextBuildContext.mappedAppPages = mappedAppPages\n      }\n\n      const mappedRootPaths = await createPagesMapping({\n        isDev: false,\n        pageExtensions: config.pageExtensions,\n        pagePaths: rootPaths,\n        pagesType: PAGE_TYPES.ROOT,\n        pagesDir: pagesDir,\n        appDir,\n        appDirOnly,\n      })\n      NextBuildContext.mappedRootPaths = mappedRootPaths\n\n      const pagesPageKeys = Object.keys(mappedPages)\n\n      const conflictingAppPagePaths: [pagePath: string, appPath: string][] = []\n      const appPageKeys = new Set<string>()\n      if (mappedAppPages) {\n        denormalizedAppPages = Object.keys(mappedAppPages)\n        for (const appKey of denormalizedAppPages) {\n          const normalizedAppPageKey = normalizeAppPath(appKey)\n          const pagePath = mappedPages[normalizedAppPageKey]\n          if (pagePath) {\n            const appPath = mappedAppPages[appKey]\n            conflictingAppPagePaths.push([\n              pagePath.replace(/^private-next-pages/, 'pages'),\n              appPath.replace(/^private-next-app-dir/, 'app'),\n            ])\n          }\n          appPageKeys.add(normalizedAppPageKey)\n        }\n      }\n\n      const appPaths = Array.from(appPageKeys)\n      // Interception routes are modelled as beforeFiles rewrites\n      rewrites.beforeFiles.push(\n        ...generateInterceptionRoutesRewrites(appPaths, config.basePath)\n      )\n\n      NextBuildContext.rewrites = rewrites\n\n      const totalAppPagesCount = appPaths.length\n\n      const pageKeys = {\n        pages: pagesPageKeys,\n        app: appPaths.length > 0 ? appPaths : undefined,\n      }\n\n      await nextBuildSpan\n        .traceChild('generate-route-types')\n        .traceAsyncFn(async () => {\n          const routeTypesFilePath = path.join(distDir, 'types', 'routes.d.ts')\n          const validatorFilePath = path.join(distDir, 'types', 'validator.ts')\n          await mkdir(path.dirname(routeTypesFilePath), { recursive: true })\n\n          let appRoutes: RouteInfo[] = []\n          let appRouteHandlers: RouteInfo[] = []\n          let layoutRoutes: RouteInfo[] = []\n          let slots: SlotInfo[] = []\n\n          const { pageRoutes, pageApiRoutes } = processPageRoutes(\n            mappedPages,\n            dir,\n            isSrcDir\n          )\n\n          // Build app routes\n          if (appDir && mappedAppPages) {\n            // Extract slots from both pages and default files\n            const slotsFromPages = extractSlotsFromAppRoutes(mappedAppPages)\n            let slotsFromDefaults: SlotInfo[] = []\n\n            // Collect and map default files for slot extraction\n            const { defaultPaths } = await nextBuildSpan\n              .traceChild('collect-default-files')\n              .traceAsyncFn(() => collectAppFiles(appDir, validFileMatcher))\n\n            if (defaultPaths.length > 0) {\n              const mappedDefaultFiles = await nextBuildSpan\n                .traceChild('create-default-mapping')\n                .traceAsyncFn(() =>\n                  createPagesMapping({\n                    pagePaths: defaultPaths,\n                    isDev: false,\n                    pagesType: PAGE_TYPES.APP,\n                    pageExtensions: config.pageExtensions,\n                    pagesDir,\n                    appDir,\n                    appDirOnly,\n                  })\n                )\n              slotsFromDefaults =\n                extractSlotsFromDefaultFiles(mappedDefaultFiles)\n            }\n\n            // Combine slots and deduplicate using Set\n            slots = combineSlots(slotsFromPages, slotsFromDefaults)\n\n            const result = processAppRoutes(\n              mappedAppPages,\n              validFileMatcher,\n              dir,\n              isSrcDir\n            )\n            appRoutes = result.appRoutes\n            appRouteHandlers = result.appRouteHandlers\n          }\n\n          // Build app layouts\n          if (appDir && mappedAppLayouts) {\n            layoutRoutes = processLayoutRoutes(mappedAppLayouts, dir, isSrcDir)\n          }\n\n          const routeTypesManifest = await createRouteTypesManifest({\n            dir,\n            pageRoutes,\n            appRoutes,\n            appRouteHandlers,\n            pageApiRoutes,\n            layoutRoutes,\n            slots,\n            redirects: config.redirects,\n            rewrites: config.rewrites,\n            validatorFilePath,\n          })\n\n          await writeRouteTypesManifest(\n            routeTypesManifest,\n            routeTypesFilePath,\n            config\n          )\n          await writeValidatorFile(routeTypesManifest, validatorFilePath)\n        })\n\n      // Turbopack already handles conflicting app and page routes.\n      if (bundler !== Bundler.Turbopack) {\n        const numConflictingAppPaths = conflictingAppPagePaths.length\n        if (mappedAppPages && numConflictingAppPaths > 0) {\n          Log.error(\n            `Conflicting app and page file${\n              numConflictingAppPaths === 1 ? ' was' : 's were'\n            } found, please remove the conflicting files to continue:`\n          )\n          for (const [pagePath, appPath] of conflictingAppPagePaths) {\n            Log.error(`  \"${pagePath}\" - \"${appPath}\"`)\n          }\n          await telemetry.flush()\n          process.exit(1)\n        }\n      }\n\n      const conflictingPublicFiles: string[] = []\n      const hasPages404 = mappedPages['/404']?.startsWith(PAGES_DIR_ALIAS)\n      const hasApp404 = !!mappedAppPages?.[UNDERSCORE_NOT_FOUND_ROUTE_ENTRY]\n      const hasAppGlobalError =\n        !!mappedAppPages?.[UNDERSCORE_GLOBAL_ERROR_ROUTE_ENTRY]\n      const hasCustomErrorPage =\n        mappedPages['/_error']?.startsWith(PAGES_DIR_ALIAS)\n\n      // Check if there are any user pages (non-reserved pages) in the pages router\n      const hasUserPagesRoutes = Object.keys(mappedPages).some(\n        (route) => !isReservedPage(route)\n      )\n\n      if (hasPublicDir) {\n        const hasPublicUnderScoreNextDir = existsSync(\n          path.join(publicDir, '_next')\n        )\n        if (hasPublicUnderScoreNextDir) {\n          throw new Error(PUBLIC_DIR_MIDDLEWARE_CONFLICT)\n        }\n      }\n\n      await nextBuildSpan\n        .traceChild('public-dir-conflict-check')\n        .traceAsyncFn(async () => {\n          // Check if pages conflict with files in `public`\n          // Only a page of public file can be served, not both.\n          for (const page in mappedPages) {\n            const hasPublicPageFile = await fileExists(\n              path.join(publicDir, page === '/' ? '/index' : page),\n              FileType.File\n            )\n            if (hasPublicPageFile) {\n              conflictingPublicFiles.push(page)\n            }\n          }\n\n          const numConflicting = conflictingPublicFiles.length\n\n          if (numConflicting) {\n            throw new Error(\n              `Conflicting public and page file${\n                numConflicting === 1 ? ' was' : 's were'\n              } found. https://nextjs.org/docs/messages/conflicting-public-file-page\\n${conflictingPublicFiles.join(\n                '\\n'\n              )}`\n            )\n          }\n        })\n\n      const nestedReservedPages = pageKeys.pages.filter((page) => {\n        return (\n          page.match(/\\/(_app|_document|_error)$/) && path.dirname(page) !== '/'\n        )\n      })\n\n      if (nestedReservedPages.length) {\n        Log.warn(\n          `The following reserved Next.js pages were detected not directly under the pages directory:\\n` +\n            nestedReservedPages.join('\\n') +\n            `\\nSee more info here: https://nextjs.org/docs/messages/nested-reserved-page\\n`\n        )\n      }\n\n      const restrictedRedirectPaths = ['/_next'].map((p) =>\n        config.basePath ? `${config.basePath}${p}` : p\n      )\n\n      const isAppCacheComponentsEnabled = Boolean(config.cacheComponents)\n      const isAuthInterruptsEnabled = Boolean(\n        config.experimental.authInterrupts\n      )\n      const isAppPPREnabled = checkIsAppPPREnabled(config.experimental.ppr)\n\n      const routesManifestPath = path.join(distDir, ROUTES_MANIFEST)\n      const dynamicRoutes: Array<DynamicManifestRoute> = []\n\n      /**\n       * A map of all the pages to their sourcePage value. This is only used for\n       * routes that have PPR enabled and clientSegmentEnabled is true.\n       */\n      const sourcePages = new Map<string, string>()\n      const routesManifest: RoutesManifest = nextBuildSpan\n        .traceChild('generate-routes-manifest')\n        .traceFn(() => {\n          const sortedRoutes = sortPages([\n            ...pageKeys.pages,\n            ...(pageKeys.app ?? []),\n          ])\n          const staticRoutes: Array<ManifestRoute> = []\n\n          for (const route of sortedRoutes) {\n            if (isDynamicRoute(route)) {\n              dynamicRoutes.push(\n                pageToRoute(\n                  route,\n                  // This property is only relevant when PPR is enabled.\n                  undefined\n                )\n              )\n            } else if (\n              !isReservedPage(route) ||\n              // don't consider /api reserved here\n              route.match(/^\\/(api(\\/|$))/)\n            ) {\n              staticRoutes.push(pageToRoute(route))\n            }\n          }\n\n          return {\n            version: 3,\n            pages404: true,\n            caseSensitive: !!config.experimental.caseSensitiveRoutes,\n            basePath: config.basePath,\n            redirects: redirects.map((r) =>\n              buildCustomRoute('redirect', r, restrictedRedirectPaths)\n            ),\n            headers: headers.map((r) => buildCustomRoute('header', r)),\n            rewrites: {\n              beforeFiles: rewrites.beforeFiles.map((r) =>\n                buildCustomRoute('rewrite', r)\n              ),\n              afterFiles: rewrites.afterFiles.map((r) =>\n                buildCustomRoute('rewrite', r)\n              ),\n              fallback: rewrites.fallback.map((r) =>\n                buildCustomRoute('rewrite', r)\n              ),\n            },\n            dynamicRoutes,\n            staticRoutes,\n            dataRoutes: [],\n            i18n: config.i18n || undefined,\n            rsc: {\n              header: RSC_HEADER,\n              // This vary header is used as a default. It is technically re-assigned in `base-server`,\n              // and may include an additional Vary option for `Next-URL`.\n              varyHeader: `${RSC_HEADER}, ${NEXT_ROUTER_STATE_TREE_HEADER}, ${NEXT_ROUTER_PREFETCH_HEADER}, ${NEXT_ROUTER_SEGMENT_PREFETCH_HEADER}`,\n              prefetchHeader: NEXT_ROUTER_PREFETCH_HEADER,\n              didPostponeHeader: NEXT_DID_POSTPONE_HEADER,\n              contentTypeHeader: RSC_CONTENT_TYPE_HEADER,\n              suffix: RSC_SUFFIX,\n              prefetchSuffix: RSC_PREFETCH_SUFFIX,\n              prefetchSegmentHeader: NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n              prefetchSegmentSuffix: RSC_SEGMENT_SUFFIX,\n              prefetchSegmentDirSuffix: RSC_SEGMENTS_DIR_SUFFIX,\n              clientParamParsing: config.cacheComponents ?? false,\n              clientParamParsingOrigins:\n                config.experimental.clientParamParsingOrigins,\n              dynamicRSCPrerender:\n                isAppPPREnabled && config.cacheComponents === true,\n            },\n            rewriteHeaders: {\n              pathHeader: NEXT_REWRITTEN_PATH_HEADER,\n              queryHeader: NEXT_REWRITTEN_QUERY_HEADER,\n            },\n            skipProxyUrlNormalize: config.skipProxyUrlNormalize,\n            ppr: isAppPPREnabled\n              ? {\n                  chain: {\n                    headers: {\n                      [NEXT_RESUME_HEADER]: '1',\n                    },\n                  },\n                }\n              : undefined,\n          } satisfies RoutesManifest\n        })\n\n      // For pages directory, we run type checking after route collection but before build.\n      if (!appDir && !isCompileMode) {\n        await startTypeChecking(typeCheckingOptions)\n      }\n\n      let clientRouterFilters:\n        | undefined\n        | ReturnType<typeof createClientRouterFilter>\n\n      if (config.experimental.clientRouterFilter) {\n        const nonInternalRedirects = (config._originalRedirects || []).filter(\n          (r: any) => !r.internal\n        )\n        clientRouterFilters = createClientRouterFilter(\n          [...appPaths],\n          config.experimental.clientRouterFilterRedirects\n            ? nonInternalRedirects\n            : [],\n          config.experimental.clientRouterFilterAllowedRate\n        )\n        NextBuildContext.clientRouterFilters = clientRouterFilters\n      }\n\n      // Ensure commonjs handling is used for files in the distDir (generally .next)\n      // Files outside of the distDir can be \"type\": \"module\"\n      await writeFileUtf8(\n        path.join(distDir, 'package.json'),\n        '{\"type\": \"commonjs\"}'\n      )\n\n      // These are written to distDir, so they need to come after creating and cleaning distDr.\n      await recordFrameworkVersion(process.env.__NEXT_VERSION as string)\n      await updateBuildDiagnostics({\n        buildStage: 'start',\n      })\n\n      const outputFileTracingRoot = config.outputFileTracingRoot || dir\n\n      const pagesManifestPath = path.join(\n        distDir,\n        SERVER_DIRECTORY,\n        PAGES_MANIFEST\n      )\n\n      let buildTraceContext: undefined | BuildTraceContext\n      let buildTracesPromise: Promise<any> | undefined = undefined\n\n      // If there's has a custom webpack config and disable the build worker.\n      // Otherwise respect the option if it's set.\n      const useBuildWorker =\n        config.experimental.webpackBuildWorker ||\n        (config.experimental.webpackBuildWorker === undefined &&\n          !config.webpack)\n      const runServerAndEdgeInParallel =\n        config.experimental.parallelServerCompiles\n      const collectServerBuildTracesInParallel =\n        config.experimental.parallelServerBuildTraces ||\n        (config.experimental.parallelServerBuildTraces === undefined &&\n          isCompileMode)\n\n      nextBuildSpan.setAttribute(\n        'has-custom-webpack-config',\n        String(!!config.webpack)\n      )\n      nextBuildSpan.setAttribute('use-build-worker', String(useBuildWorker))\n\n      if (\n        !useBuildWorker &&\n        (runServerAndEdgeInParallel || collectServerBuildTracesInParallel)\n      ) {\n        throw new Error(\n          'The \"parallelServerBuildTraces\" and \"parallelServerCompiles\" options may only be used when build workers can be used. Read more: https://nextjs.org/docs/messages/parallel-build-without-worker'\n        )\n      }\n\n      Log.info('Creating an optimized production build ...')\n      traceMemoryUsage('Starting build', nextBuildSpan)\n\n      await updateBuildDiagnostics({\n        buildStage: 'compile',\n        buildOptions: {\n          useBuildWorker: String(useBuildWorker),\n        },\n      })\n\n      let shutdownPromise = Promise.resolve()\n      if (!isGenerateMode) {\n        if (bundler === Bundler.Turbopack) {\n          const {\n            duration: compilerDuration,\n            shutdownPromise: p,\n            ...rest\n          } = await turbopackBuild(\n            process.env.NEXT_TURBOPACK_USE_WORKER === undefined ||\n              process.env.NEXT_TURBOPACK_USE_WORKER !== '0'\n          )\n          shutdownPromise = p\n          traceMemoryUsage('Finished build', nextBuildSpan)\n\n          buildTraceContext = rest.buildTraceContext\n\n          const durationString = durationToString(compilerDuration)\n          Log.event(`Compiled successfully in ${durationString}`)\n\n          telemetry.record(\n            eventBuildCompleted(pagesPaths, {\n              bundler: 'turbopack',\n              durationInSeconds: Math.round(compilerDuration),\n              totalAppPagesCount,\n            })\n          )\n        } else {\n          if (\n            runServerAndEdgeInParallel ||\n            collectServerBuildTracesInParallel\n          ) {\n            let durationInSeconds = 0\n\n            await updateBuildDiagnostics({\n              buildStage: 'compile-server',\n            })\n\n            const serverBuildPromise = webpackBuild(useBuildWorker, [\n              'server',\n            ]).then((res) => {\n              traceMemoryUsage('Finished server compilation', nextBuildSpan)\n              buildTraceContext = res.buildTraceContext\n              durationInSeconds += res.duration\n\n              if (collectServerBuildTracesInParallel) {\n                const buildTraceWorker = new Worker(\n                  require.resolve('./collect-build-traces'),\n                  {\n                    debuggerPortOffset: -1,\n                    isolatedMemory: false,\n                    numWorkers: 1,\n                    exposedMethods: ['collectBuildTraces'],\n                  }\n                ) as Worker & typeof import('./collect-build-traces')\n\n                buildTracesPromise = nextBuildSpan\n                  .traceChild('collect-build-traces')\n                  .traceAsyncFn(() => {\n                    return buildTraceWorker\n                      .collectBuildTraces({\n                        dir,\n                        config,\n                        distDir,\n                        // Serialize Map as this is sent to the worker.\n                        edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(\n                          new Map()\n                        ),\n                        staticPages: [],\n                        buildTraceContext,\n                        outputFileTracingRoot,\n                      })\n                      .catch((err) => {\n                        console.error(err)\n                        process.exit(1)\n                      })\n                  })\n              }\n            })\n            if (!runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n\n            const edgeBuildPromise = webpackBuild(useBuildWorker, [\n              'edge-server',\n            ]).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage(\n                'Finished edge-server compilation',\n                nextBuildSpan\n              )\n            })\n            if (runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n            await edgeBuildPromise\n\n            await updateBuildDiagnostics({\n              buildStage: 'webpack-compile-client',\n            })\n\n            await webpackBuild(useBuildWorker, ['client']).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage('Finished client compilation', nextBuildSpan)\n            })\n\n            const durationString = durationToString(durationInSeconds)\n            Log.event(`Compiled successfully in ${durationString}`)\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                bundler: getBundlerForTelemetry(bundler),\n                durationInSeconds,\n                totalAppPagesCount,\n              })\n            )\n          } else {\n            const { duration: compilerDuration, ...rest } = await webpackBuild(\n              useBuildWorker,\n              null\n            )\n            traceMemoryUsage('Finished build', nextBuildSpan)\n\n            buildTraceContext = rest.buildTraceContext\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                bundler: getBundlerForTelemetry(bundler),\n                durationInSeconds: compilerDuration,\n                totalAppPagesCount,\n              })\n            )\n          }\n        }\n        await runAfterProductionCompile({\n          config,\n          buildSpan: nextBuildSpan,\n          telemetry,\n          metadata: {\n            projectDir: dir,\n            distDir,\n          },\n        })\n      }\n\n      // For app directory, we run type checking after build.\n      if (appDir && !isCompileMode && !isGenerateMode) {\n        await updateBuildDiagnostics({\n          buildStage: 'type-checking',\n        })\n        await startTypeChecking(typeCheckingOptions)\n        traceMemoryUsage('Finished type checking', nextBuildSpan)\n      }\n\n      const collectingPageDataStart = process.hrtime()\n      const postCompileSpinner = createSpinner('Collecting page data')\n\n      const buildManifestPath = path.join(distDir, BUILD_MANIFEST)\n\n      let staticAppPagesCount = 0\n      let serverAppPagesCount = 0\n      let edgeRuntimeAppCount = 0\n      let edgeRuntimePagesCount = 0\n      const ssgPages = new Set<string>()\n      const ssgStaticFallbackPages = new Set<string>()\n      const ssgBlockingFallbackPages = new Set<string>()\n      const staticPages = new Set<string>()\n      const invalidPages = new Set<string>()\n      const serverPropsPages = new Set<string>()\n      const additionalPaths = new Map<string, PrerenderedRoute[]>()\n      const staticPaths = new Map<string, PrerenderedRoute[]>()\n      const appNormalizedPaths = new Map<string, string>()\n      const fallbackModes = new Map<string, FallbackMode>()\n      const appDefaultConfigs = new Map<string, AppSegmentConfig>()\n      const pageInfos: PageInfos = new Map<string, PageInfo>()\n      let pagesManifest = await readManifest<PagesManifest>(pagesManifestPath)\n      const buildManifest = await readManifest<BuildManifest>(buildManifestPath)\n\n      const appPathRoutes: Record<string, string> = {}\n\n      if (appDir) {\n        const appPathsManifest = await readManifest<Record<string, string>>(\n          path.join(distDir, SERVER_DIRECTORY, APP_PATHS_MANIFEST)\n        )\n\n        for (const key in appPathsManifest) {\n          appPathRoutes[key] = normalizeAppPath(key)\n        }\n\n        await writeManifest(\n          path.join(distDir, APP_PATH_ROUTES_MANIFEST),\n          appPathRoutes\n        )\n      }\n\n      process.env.NEXT_PHASE = PHASE_PRODUCTION_BUILD\n\n      const worker = createStaticWorker(config, { debuggerPortOffset: -1 })\n\n      const analysisBegin = process.hrtime()\n      const staticCheckSpan = nextBuildSpan.traceChild('static-check')\n\n      const functionsConfigManifest: FunctionsConfigManifest = {\n        version: 1,\n        functions: {},\n      }\n\n      const {\n        customAppGetInitialProps,\n        namedExports,\n        isNextImageImported,\n        hasNonStaticErrorPage,\n      } = await staticCheckSpan.traceAsyncFn(async () => {\n        if (isCompileMode) {\n          return {\n            customAppGetInitialProps: false,\n            namedExports: [],\n            isNextImageImported: true,\n            hasNonStaticErrorPage: hasUserPagesRoutes,\n          }\n        }\n\n        const { configFileName } = config\n        const sriEnabled = Boolean(config.experimental.sri?.algorithm)\n\n        const nonStaticErrorPageSpan = staticCheckSpan.traceChild(\n          'check-static-error-page'\n        )\n        const errorPageHasCustomGetInitialProps =\n          nonStaticErrorPageSpan.traceAsyncFn(\n            async () =>\n              hasCustomErrorPage &&\n              (await worker.hasCustomGetInitialProps({\n                page: '/_error',\n                distDir,\n                checkingApp: false,\n                sriEnabled,\n              }))\n          )\n\n        const errorPageStaticResult = nonStaticErrorPageSpan.traceAsyncFn(\n          async () =>\n            hasCustomErrorPage &&\n            worker.isPageStatic({\n              dir,\n              page: '/_error',\n              distDir,\n              configFileName,\n              cacheComponents: isAppCacheComponentsEnabled,\n              authInterrupts: isAuthInterruptsEnabled,\n              httpAgentOptions: config.httpAgentOptions,\n              locales: config.i18n?.locales,\n              defaultLocale: config.i18n?.defaultLocale,\n              nextConfigOutput: config.output,\n              pprConfig: config.experimental.ppr,\n              cacheLifeProfiles: config.cacheLife,\n              buildId,\n              sriEnabled,\n              cacheMaxMemorySize: config.cacheMaxMemorySize,\n            })\n        )\n\n        const appPageToCheck = '/_app'\n\n        const customAppGetInitialPropsPromise = hasUserPagesRoutes\n          ? worker.hasCustomGetInitialProps({\n              page: appPageToCheck,\n              distDir,\n              checkingApp: true,\n              sriEnabled,\n            })\n          : Promise.resolve(false)\n\n        const namedExportsPromise = hasUserPagesRoutes\n          ? worker.getDefinedNamedExports({\n              page: appPageToCheck,\n              distDir,\n              sriEnabled,\n            })\n          : Promise.resolve([])\n\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let isNextImageImported: boolean | undefined\n\n        const middlewareManifest: MiddlewareManifest = require(\n          path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n        )\n\n        const actionManifest = appDir\n          ? (require(\n              path.join(\n                distDir,\n                SERVER_DIRECTORY,\n                SERVER_REFERENCE_MANIFEST + '.json'\n              )\n            ) as ActionManifest)\n          : null\n        const entriesWithAction = actionManifest ? new Set() : null\n        if (actionManifest && entriesWithAction) {\n          for (const id in actionManifest.node) {\n            for (const entry in actionManifest.node[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n          for (const id in actionManifest.edge) {\n            for (const entry in actionManifest.edge[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n        }\n\n        for (const key of Object.keys(middlewareManifest?.functions)) {\n          if (key.startsWith('/api')) {\n            edgeRuntimePagesCount++\n          }\n        }\n\n        await Promise.all(\n          Object.entries(pageKeys)\n            .reduce<Array<{ pageType: keyof typeof pageKeys; page: string }>>(\n              (acc, [key, files]) => {\n                if (!files) {\n                  return acc\n                }\n\n                const pageType = key as keyof typeof pageKeys\n\n                for (const page of files) {\n                  acc.push({ pageType, page })\n                }\n\n                return acc\n              },\n              []\n            )\n            .map(({ pageType, page }) => {\n              const checkPageSpan = staticCheckSpan.traceChild('check-page', {\n                page,\n              })\n              return checkPageSpan.traceAsyncFn(async () => {\n                const actualPage = normalizePagePath(page)\n\n                let isRoutePPREnabled = false\n                let isSSG = false\n                let isStatic = false\n                let isServerComponent = false\n                let ssgPageRoutes: string[] | null = null\n                let pagePath = ''\n\n                if (pageType === 'pages') {\n                  pagePath =\n                    pagesPaths.find((p) => {\n                      p = normalizePathSep(p)\n                      return (\n                        p.startsWith(actualPage + '.') ||\n                        p.startsWith(actualPage + '/index.')\n                      )\n                    }) || ''\n                }\n                let originalAppPath: string | undefined\n\n                if (pageType === 'app' && mappedAppPages) {\n                  for (const [originalPath, normalizedPath] of Object.entries(\n                    appPathRoutes\n                  )) {\n                    if (normalizedPath === page) {\n                      pagePath = mappedAppPages[originalPath].replace(\n                        /^private-next-app-dir/,\n                        ''\n                      )\n                      originalAppPath = originalPath\n                      break\n                    }\n                  }\n                }\n\n                const pageFilePath = isAppBuiltinPage(pagePath)\n                  ? pagePath\n                  : path.join(\n                      (pageType === 'pages' ? pagesDir : appDir) || '',\n                      pagePath\n                    )\n\n                const isInsideAppDir = pageType === 'app'\n                const staticInfo = pagePath\n                  ? await getStaticInfoIncludingLayouts({\n                      isInsideAppDir,\n                      pageFilePath,\n                      pageExtensions: config.pageExtensions,\n                      appDir,\n                      config,\n                      isDev: false,\n                      // If this route is an App Router page route, inherit the\n                      // route segment configs (e.g. `runtime`) from the layout by\n                      // passing the `originalAppPath`, which should end with `/page`.\n                      page: isInsideAppDir ? originalAppPath! : page,\n                    })\n                  : undefined\n\n                if (staticInfo?.hadUnsupportedValue) {\n                  errorFromUnsupportedSegmentConfig()\n                }\n\n                // If there's any thing that would contribute to the functions\n                // configuration, we need to add it to the manifest.\n                if (\n                  typeof staticInfo?.runtime !== 'undefined' ||\n                  typeof staticInfo?.maxDuration !== 'undefined' ||\n                  typeof staticInfo?.preferredRegion !== 'undefined'\n                ) {\n                  const regions = staticInfo?.preferredRegion\n                    ? typeof staticInfo.preferredRegion === 'string'\n                      ? [staticInfo.preferredRegion]\n                      : staticInfo.preferredRegion\n                    : undefined\n\n                  functionsConfigManifest.functions[page] = {\n                    maxDuration: staticInfo?.maxDuration,\n                    ...(regions && { regions }),\n                  }\n                }\n\n                const pageRuntime = middlewareManifest.functions[\n                  originalAppPath || page\n                ]\n                  ? 'edge'\n                  : staticInfo?.runtime\n\n                if (!isCompileMode) {\n                  isServerComponent =\n                    pageType === 'app' &&\n                    staticInfo?.rsc !== RSC_MODULE_TYPES.client\n\n                  if (pageType === 'app' || !isReservedPage(page)) {\n                    try {\n                      let edgeInfo: any\n\n                      if (isEdgeRuntime(pageRuntime)) {\n                        if (pageType === 'app') {\n                          edgeRuntimeAppCount++\n                        } else {\n                          edgeRuntimePagesCount++\n                        }\n\n                        const manifestKey =\n                          pageType === 'pages' ? page : originalAppPath || ''\n\n                        edgeInfo = middlewareManifest.functions[manifestKey]\n                      }\n\n                      let isPageStaticSpan =\n                        checkPageSpan.traceChild('is-page-static')\n                      let workerResult = await isPageStaticSpan.traceAsyncFn(\n                        () => {\n                          return worker.isPageStatic({\n                            dir,\n                            page,\n                            originalAppPath,\n                            distDir,\n                            configFileName,\n                            httpAgentOptions: config.httpAgentOptions,\n                            locales: config.i18n?.locales,\n                            defaultLocale: config.i18n?.defaultLocale,\n                            parentId: isPageStaticSpan.getId(),\n                            pageRuntime,\n                            edgeInfo,\n                            pageType,\n                            cacheComponents: isAppCacheComponentsEnabled,\n                            authInterrupts: isAuthInterruptsEnabled,\n                            cacheHandler: config.cacheHandler,\n                            cacheHandlers: config.cacheHandlers,\n                            isrFlushToDisk: ciEnvironment.hasNextSupport\n                              ? false\n                              : config.experimental.isrFlushToDisk,\n                            cacheMaxMemorySize: config.cacheMaxMemorySize,\n                            nextConfigOutput: config.output,\n                            pprConfig: config.experimental.ppr,\n                            cacheLifeProfiles: config.cacheLife,\n                            buildId,\n                            sriEnabled,\n                          })\n                        }\n                      )\n\n                      if (pageType === 'app' && originalAppPath) {\n                        appNormalizedPaths.set(originalAppPath, page)\n                        // TODO-APP: handle prerendering with edge\n                        if (isEdgeRuntime(pageRuntime)) {\n                          isStatic = false\n                          isSSG = false\n\n                          Log.warnOnce(\n                            `Using edge runtime on a page currently disables static generation for that page`\n                          )\n                        } else {\n                          const isDynamic = isDynamicRoute(page)\n\n                          if (\n                            typeof workerResult.isRoutePPREnabled === 'boolean'\n                          ) {\n                            isRoutePPREnabled = workerResult.isRoutePPREnabled\n                          }\n\n                          // If this route can be partially pre-rendered, then\n                          // mark it as such and mark that it can be\n                          // generated server-side.\n                          if (workerResult.isRoutePPREnabled) {\n                            isSSG = true\n                            isStatic = true\n\n                            staticPaths.set(originalAppPath, [])\n                          }\n\n                          if (workerResult.prerenderedRoutes) {\n                            staticPaths.set(\n                              originalAppPath,\n                              workerResult.prerenderedRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderedRoutes.map(\n                              (route) => route.pathname\n                            )\n                            isSSG = true\n                          }\n\n                          const appConfig = workerResult.appConfig || {}\n                          if (appConfig.revalidate !== 0) {\n                            const hasGenerateStaticParams =\n                              workerResult.prerenderedRoutes &&\n                              workerResult.prerenderedRoutes.length > 0\n\n                            if (\n                              config.output === 'export' &&\n                              isDynamic &&\n                              !hasGenerateStaticParams\n                            ) {\n                              throw new Error(\n                                `Page \"${page}\" is missing \"generateStaticParams()\" so it cannot be used with \"output: export\" config.`\n                              )\n                            }\n\n                            // Mark the app as static if:\n                            // - It has no dynamic param\n                            // - It doesn't have generateStaticParams but `dynamic` is set to\n                            //   `error` or `force-static`\n                            if (!isDynamic) {\n                              staticPaths.set(originalAppPath, [\n                                {\n                                  params: {},\n                                  pathname: page,\n                                  encodedPathname: page,\n                                  fallbackRouteParams: [],\n                                  fallbackMode:\n                                    workerResult.prerenderFallbackMode,\n                                  fallbackRootParams: [],\n                                  throwOnEmptyStaticShell: true,\n                                },\n                              ])\n                              isStatic = true\n                            } else if (\n                              !hasGenerateStaticParams &&\n                              (appConfig.dynamic === 'error' ||\n                                appConfig.dynamic === 'force-static')\n                            ) {\n                              staticPaths.set(originalAppPath, [])\n                              isStatic = true\n                              isRoutePPREnabled = false\n                            }\n                          }\n\n                          if (workerResult.prerenderFallbackMode) {\n                            fallbackModes.set(\n                              originalAppPath,\n                              workerResult.prerenderFallbackMode\n                            )\n                          }\n\n                          appDefaultConfigs.set(originalAppPath, appConfig)\n                        }\n                      } else {\n                        if (isEdgeRuntime(pageRuntime)) {\n                          if (workerResult.hasStaticProps) {\n                            console.warn(\n                              `\"getStaticProps\" is not yet supported fully with \"experimental-edge\", detected on ${page}`\n                            )\n                          }\n                          workerResult.isStatic = false\n                          workerResult.hasStaticProps = false\n                        }\n\n                        if (workerResult.isNextImageImported) {\n                          isNextImageImported = true\n                        }\n\n                        if (workerResult.hasStaticProps) {\n                          ssgPages.add(page)\n                          isSSG = true\n\n                          if (\n                            workerResult.prerenderedRoutes &&\n                            workerResult.prerenderedRoutes.length > 0\n                          ) {\n                            additionalPaths.set(\n                              page,\n                              workerResult.prerenderedRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderedRoutes.map(\n                              (route) => route.pathname\n                            )\n                          }\n\n                          if (\n                            workerResult.prerenderFallbackMode ===\n                            FallbackMode.BLOCKING_STATIC_RENDER\n                          ) {\n                            ssgBlockingFallbackPages.add(page)\n                          } else if (\n                            workerResult.prerenderFallbackMode ===\n                            FallbackMode.PRERENDER\n                          ) {\n                            ssgStaticFallbackPages.add(page)\n                          }\n                        } else if (workerResult.hasServerProps) {\n                          serverPropsPages.add(page)\n                        } else if (\n                          workerResult.isStatic &&\n                          !isServerComponent &&\n                          (await customAppGetInitialPropsPromise) === false\n                        ) {\n                          staticPages.add(page)\n                          isStatic = true\n                        } else if (isServerComponent) {\n                          // This is a static server component page that doesn't have\n                          // gSP or gSSP. We still treat it as a SSG page.\n                          ssgPages.add(page)\n                          isSSG = true\n                        }\n\n                        if (hasPages404 && page === '/404') {\n                          if (\n                            !workerResult.isStatic &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            throw new Error(\n                              `\\`pages/404\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                            )\n                          }\n                          // we need to ensure the 404 lambda is present since we use\n                          // it when _app has getInitialProps\n                          if (\n                            (await customAppGetInitialPropsPromise) &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            staticPages.delete(page)\n                          }\n                        }\n\n                        if (\n                          STATIC_STATUS_PAGES.includes(page) &&\n                          !workerResult.isStatic &&\n                          !workerResult.hasStaticProps\n                        ) {\n                          throw new Error(\n                            `\\`pages${page}\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                          )\n                        }\n                      }\n                    } catch (err) {\n                      if (\n                        !isError(err) ||\n                        err.message !== 'INVALID_DEFAULT_EXPORT'\n                      )\n                        throw err\n                      invalidPages.add(page)\n                    }\n                  }\n\n                  if (pageType === 'app') {\n                    if (isSSG || isStatic) {\n                      staticAppPagesCount++\n                    } else {\n                      serverAppPagesCount++\n                    }\n                  }\n                }\n\n                pageInfos.set(page, {\n                  originalAppPath,\n                  isStatic,\n                  isSSG,\n                  isRoutePPREnabled,\n                  ssgPageRoutes,\n                  initialCacheControl: undefined,\n                  runtime: pageRuntime,\n                  pageDuration: undefined,\n                  ssgPageDurations: undefined,\n                  hasEmptyStaticShell: undefined,\n                })\n              })\n            })\n        )\n\n        const errorPageResult = await errorPageStaticResult\n        const nonStaticErrorPage =\n          (await errorPageHasCustomGetInitialProps) ||\n          (errorPageResult && errorPageResult.hasServerProps)\n\n        const returnValue = {\n          customAppGetInitialProps: await customAppGetInitialPropsPromise,\n          namedExports: await namedExportsPromise,\n          isNextImageImported,\n          hasNonStaticErrorPage: nonStaticErrorPage,\n        }\n\n        return returnValue\n      })\n\n      if (postCompileSpinner) {\n        const collectingPageDataEnd = process.hrtime(collectingPageDataStart)\n        postCompileSpinner.setText(\n          `Collecting page data in ${hrtimeDurationToString(collectingPageDataEnd)}`\n        )\n        postCompileSpinner.stopAndPersist()\n      }\n      traceMemoryUsage('Finished collecting page data', nextBuildSpan)\n\n      if (customAppGetInitialProps) {\n        console.warn(\n          bold(yellow(`Warning: `)) +\n            yellow(\n              `You have opted-out of Automatic Static Optimization due to \\`getInitialProps\\` in \\`pages/_app\\`. This does not opt-out pages with \\`getStaticProps\\``\n            )\n        )\n        console.warn(\n          'Read more: https://nextjs.org/docs/messages/opt-out-auto-static-optimization\\n'\n        )\n      }\n\n      const { cacheHandler } = config\n\n      const instrumentationHookEntryFiles: string[] = []\n      if (hasInstrumentationHook) {\n        instrumentationHookEntryFiles.push(\n          path.join(SERVER_DIRECTORY, `${INSTRUMENTATION_HOOK_FILENAME}.js`)\n        )\n        // If there's edge routes, append the edge instrumentation hook\n        // Turbopack generates this chunk with a hashed name and references it in middleware-manifest.\n        if (\n          bundler !== Bundler.Turbopack &&\n          (edgeRuntimeAppCount || edgeRuntimePagesCount)\n        ) {\n          instrumentationHookEntryFiles.push(\n            path.join(\n              SERVER_DIRECTORY,\n              `edge-${INSTRUMENTATION_HOOK_FILENAME}.js`\n            )\n          )\n        }\n      }\n\n      const requiredServerFilesManifest = nextBuildSpan\n        .traceChild('generate-required-server-files')\n        .traceFn(() => {\n          const normalizedCacheHandlers: Record<string, string> = {}\n\n          for (const [key, value] of Object.entries(\n            config.cacheHandlers || {}\n          )) {\n            if (key && value) {\n              normalizedCacheHandlers[key] = path.relative(distDir, value)\n            }\n          }\n\n          const serverFilesManifest: RequiredServerFilesManifest = {\n            version: 1,\n            config: {\n              ...config,\n              configFile: undefined,\n              ...(ciEnvironment.hasNextSupport\n                ? {\n                    compress: false,\n                  }\n                : {}),\n              cacheHandler: cacheHandler\n                ? path.relative(distDir, cacheHandler)\n                : config.cacheHandler,\n              cacheHandlers: normalizedCacheHandlers,\n              experimental: {\n                ...config.experimental,\n                trustHostHeader: ciEnvironment.hasNextSupport,\n                isExperimentalCompile: isCompileMode,\n              },\n            },\n            appDir: dir,\n            relativeAppDir: path.relative(outputFileTracingRoot, dir),\n            files: [\n              ROUTES_MANIFEST,\n              path.relative(distDir, pagesManifestPath),\n              BUILD_MANIFEST,\n              PRERENDER_MANIFEST,\n              path.join(SERVER_DIRECTORY, FUNCTIONS_CONFIG_MANIFEST),\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_MANIFEST),\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_BUILD_MANIFEST + '.js'),\n              ...(bundler !== Bundler.Turbopack\n                ? [\n                    path.join(\n                      SERVER_DIRECTORY,\n                      MIDDLEWARE_REACT_LOADABLE_MANIFEST + '.js'\n                    ),\n                    REACT_LOADABLE_MANIFEST,\n                  ]\n                : []),\n              ...(appDir\n                ? [\n                    ...(config.experimental.sri\n                      ? [\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.js'\n                          ),\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.json'\n                          ),\n                        ]\n                      : []),\n                    path.join(SERVER_DIRECTORY, APP_PATHS_MANIFEST),\n                    path.join(APP_PATH_ROUTES_MANIFEST),\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.js'\n                    ),\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.json'\n                    ),\n                  ]\n                : []),\n              ...(pagesDir && bundler !== Bundler.Turbopack\n                ? [\n                    DYNAMIC_CSS_MANIFEST + '.json',\n                    path.join(SERVER_DIRECTORY, DYNAMIC_CSS_MANIFEST + '.js'),\n                  ]\n                : []),\n              BUILD_ID_FILE,\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.js'),\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.json'),\n              SERVER_FILES_MANIFEST,\n              ...instrumentationHookEntryFiles,\n            ]\n              .filter(nonNullable)\n              .map((file) => path.join(config.distDir, file)),\n            ignore: [] as string[],\n          }\n\n          return serverFilesManifest\n        })\n\n      const middlewareFile = proxyFilePath || middlewareFilePath\n      let hasNodeMiddleware = false\n\n      if (middlewareFile) {\n        // Is format of `(/src)/(proxy|middleware).<ext>`, so split by\n        // \".\" and get the first part, regard rest of the extensions\n        // to match the `page` value format.\n        const page = middlewareFile.split('.')[0]\n\n        const staticInfo = await getStaticInfoIncludingLayouts({\n          isInsideAppDir: false,\n          pageFilePath: path.join(dir, middlewareFile),\n          config,\n          appDir,\n          pageExtensions: config.pageExtensions,\n          isDev: false,\n          page,\n        })\n\n        if (staticInfo.hadUnsupportedValue) {\n          errorFromUnsupportedSegmentConfig()\n        }\n\n        if (staticInfo.runtime === 'nodejs' || isProxyFile(page)) {\n          hasNodeMiddleware = true\n          functionsConfigManifest.functions['/_middleware'] = {\n            runtime: 'nodejs',\n            matchers: staticInfo.middleware?.matchers ?? [\n              {\n                regexp: '^.*$',\n                originalSource: '/:path*',\n              },\n            ],\n          }\n\n          if (bundler === Bundler.Turbopack) {\n            await writeManifest(\n              path.join(\n                distDir,\n                'static',\n                buildId,\n                TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST\n              ),\n              functionsConfigManifest.functions['/_middleware'].matchers || []\n            )\n          }\n        }\n      }\n\n      await writeFunctionsConfigManifest(distDir, functionsConfigManifest)\n\n      if (\n        bundler !== Bundler.Turbopack &&\n        !isGenerateMode &&\n        !buildTracesPromise\n      ) {\n        buildTracesPromise = nextBuildSpan\n          .traceChild('collect-build-traces')\n          .traceAsyncFn(() => {\n            return collectBuildTraces({\n              dir,\n              config,\n              distDir,\n              edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(pageInfos),\n              staticPages: [...staticPages],\n              nextBuildSpan,\n              buildTraceContext,\n              outputFileTracingRoot,\n            }).catch((err) => {\n              console.error(err)\n              process.exit(1)\n            })\n          })\n      }\n\n      if (serverPropsPages.size > 0 || ssgPages.size > 0) {\n        // We update the routes manifest after the build with the\n        // data routes since we can't determine these until after build\n        routesManifest.dataRoutes = sortPages([\n          ...serverPropsPages,\n          ...ssgPages,\n        ]).map((page) => {\n          return buildDataRoute(page, buildId)\n        })\n      }\n\n      // We need to write the manifest with rewrites before build\n      await nextBuildSpan\n        .traceChild('write-routes-manifest')\n        .traceAsyncFn(() => writeManifest(routesManifestPath, routesManifest))\n\n      // Since custom _app.js can wrap the 404 page we have to opt-out of static optimization if it has getInitialProps\n      // Only export the static 404 when there is no /_error present\n      const useStaticPages404 =\n        !customAppGetInitialProps && (!hasNonStaticErrorPage || hasPages404)\n\n      if (invalidPages.size > 0) {\n        const err = new Error(\n          `Build optimization failed: found page${\n            invalidPages.size === 1 ? '' : 's'\n          } without a React Component as default export in \\n${[...invalidPages]\n            .map((pg) => `pages${pg}`)\n            .join(\n              '\\n'\n            )}\\n\\nSee https://nextjs.org/docs/messages/page-without-valid-component for more info.\\n`\n        ) as NextError\n        err.code = 'BUILD_OPTIMIZATION_FAILED'\n        throw err\n      }\n\n      await writeBuildId(distDir, buildId)\n\n      if (config.experimental.optimizeCss) {\n        const globOrig =\n          require('next/dist/compiled/glob') as typeof import('next/dist/compiled/glob')\n\n        const cssFilePaths = await new Promise<string[]>((resolve, reject) => {\n          globOrig(\n            '**/*.css',\n            { cwd: path.join(distDir, 'static') },\n            (err, files) => {\n              if (err) {\n                return reject(err)\n              }\n              resolve(files)\n            }\n          )\n        })\n\n        requiredServerFilesManifest.files.push(\n          ...cssFilePaths.map((filePath) =>\n            path.join(config.distDir, 'static', filePath)\n          )\n        )\n      }\n\n      // Under standalone mode, we need to ensure that the cache entry debug\n      // handler is copied so that it can be used in the test. This is required\n      // for the turbopack test to run as it's more strict about the build\n      // directories. This is only used for testing and is not used in\n      // production.\n      if (\n        process.env.__NEXT_TEST_MODE &&\n        process.env.NEXT_PRIVATE_DEBUG_CACHE_ENTRY_HANDLERS\n      ) {\n        requiredServerFilesManifest.files.push(\n          path.relative(\n            dir,\n            path.isAbsolute(process.env.NEXT_PRIVATE_DEBUG_CACHE_ENTRY_HANDLERS)\n              ? process.env.NEXT_PRIVATE_DEBUG_CACHE_ENTRY_HANDLERS\n              : path.join(\n                  dir,\n                  process.env.NEXT_PRIVATE_DEBUG_CACHE_ENTRY_HANDLERS\n                )\n          )\n        )\n      }\n\n      const features: EventBuildFeatureUsage[] = [\n        {\n          featureName: 'experimental/cacheComponents',\n          invocationCount: config.cacheComponents ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/optimizeCss',\n          invocationCount: config.experimental.optimizeCss ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/nextScriptWorkers',\n          invocationCount: config.experimental.nextScriptWorkers ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/ppr',\n          invocationCount: config.experimental.ppr ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/isolatedDevBuild',\n          invocationCount: config.experimental.isolatedDevBuild ? 1 : 0,\n        },\n        {\n          featureName: 'turbopackFileSystemCache',\n          invocationCount: isFileSystemCacheEnabledForBuild(config) ? 1 : 0,\n        },\n      ]\n      telemetry.record(\n        features.map((feature) => {\n          return {\n            eventName: EVENT_BUILD_FEATURE_USAGE,\n            payload: feature,\n          }\n        })\n      )\n\n      await writeRequiredServerFilesManifest(\n        distDir,\n        requiredServerFilesManifest\n      )\n\n      // we don't need to inline for turbopack build as\n      // it will handle it's own caching separate of compile\n      if (isGenerateMode && bundler !== Bundler.Turbopack) {\n        Log.info('Inlining static env ...')\n\n        await nextBuildSpan\n          .traceChild('inline-static-env')\n          .traceAsyncFn(async () => {\n            await inlineStaticEnv({\n              distDir,\n              config,\n            })\n          })\n      }\n\n      const middlewareManifest: MiddlewareManifest = await readManifest(\n        path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n      )\n\n      const prerenderManifest: PrerenderManifest = {\n        version: 4,\n        routes: {},\n        dynamicRoutes: {},\n        notFoundRoutes: [],\n        preview: previewProps,\n      }\n\n      const tbdPrerenderRoutes: string[] = []\n\n      const { i18n } = config\n\n      const usedStaticStatusPages = STATIC_STATUS_PAGES.filter(\n        (page) =>\n          mappedPages[page] &&\n          mappedPages[page].startsWith('private-next-pages')\n      )\n      usedStaticStatusPages.forEach((page) => {\n        if (!ssgPages.has(page) && !customAppGetInitialProps) {\n          staticPages.add(page)\n        }\n      })\n\n      const hasPages500 = !appDirOnly && usedStaticStatusPages.includes('/500')\n      const useDefaultStatic500 =\n        !hasPages500 && !hasNonStaticErrorPage && !customAppGetInitialProps\n\n      const combinedPages = [...staticPages, ...ssgPages]\n      const isApp404Static = staticPaths.has(UNDERSCORE_NOT_FOUND_ROUTE_ENTRY)\n      const hasStaticApp404 = hasApp404 && isApp404Static\n      const isAppGlobalErrorStatic = staticPaths.has(\n        UNDERSCORE_GLOBAL_ERROR_ROUTE_ENTRY\n      )\n      const hasStaticAppGlobalError =\n        hasAppGlobalError && isAppGlobalErrorStatic\n\n      await updateBuildDiagnostics({\n        buildStage: 'static-generation',\n      })\n\n      const hasGSPAndRevalidateZero = new Set<string>()\n\n      // we need to trigger automatic exporting when we have\n      // - static 404/500\n      // - getStaticProps paths\n      // - experimental app is enabled\n      if (\n        !isCompileMode &&\n        (combinedPages.length > 0 ||\n          useStaticPages404 ||\n          useDefaultStatic500 ||\n          appDir)\n      ) {\n        const staticGenerationSpan =\n          nextBuildSpan.traceChild('static-generation')\n        await staticGenerationSpan.traceAsyncFn(async () => {\n          detectConflictingPaths(\n            [\n              ...combinedPages,\n              ...pageKeys.pages.filter((page) => !combinedPages.includes(page)),\n            ],\n            ssgPages,\n            new Map(\n              Array.from(additionalPaths.entries()).map(\n                ([page, routes]): [string, string[]] => {\n                  return [page, routes.map((route) => route.pathname)]\n                }\n              )\n            )\n          )\n\n          const sortedStaticPaths = Array.from(staticPaths.entries()).sort(\n            ([a], [b]) => a.localeCompare(b)\n          )\n\n          const exportApp = (require('../export') as typeof import('../export'))\n            .default as typeof import('../export').default\n\n          const exportConfig: NextConfigComplete = {\n            ...config,\n            // Default map will be the collection of automatic statically exported\n            // pages and incremental pages.\n            // n.b. we cannot handle this above in combinedPages because the dynamic\n            // page must be in the `pages` array, but not in the mapping.\n            exportPathMap: (defaultMap: ExportPathMap) => {\n              // Dynamically routed pages should be prerendered to be used as\n              // a client-side skeleton (fallback) while data is being fetched.\n              // This ensures the end-user never sees a 500 or slow response from the\n              // server.\n              //\n              // Note: prerendering disables automatic static optimization.\n              ssgPages.forEach((page) => {\n                if (isDynamicRoute(page)) {\n                  tbdPrerenderRoutes.push(page)\n\n                  if (ssgStaticFallbackPages.has(page)) {\n                    // Override the rendering for the dynamic page to be treated as a\n                    // fallback render.\n                    if (i18n) {\n                      defaultMap[`/${i18n.defaultLocale}${page}`] = {\n                        page,\n                        _pagesFallback: true,\n                      }\n                    } else {\n                      defaultMap[page] = {\n                        page,\n                        _pagesFallback: true,\n                      }\n                    }\n                  } else {\n                    // Remove dynamically routed pages from the default path map when\n                    // fallback behavior is disabled.\n                    delete defaultMap[page]\n                  }\n                }\n              })\n\n              // Append the \"well-known\" routes we should prerender for, e.g. blog\n              // post slugs.\n              additionalPaths.forEach((routes, page) => {\n                routes.forEach((route) => {\n                  defaultMap[route.pathname] = {\n                    page,\n                    _ssgPath: route.encodedPathname,\n                  }\n                })\n              })\n\n              if (useStaticPages404 && !appDirOnly) {\n                defaultMap['/404'] = {\n                  page: hasPages404 ? '/404' : '/_error',\n                }\n              }\n\n              if (useDefaultStatic500 && !appDirOnly) {\n                defaultMap['/500'] = {\n                  page: '/_error',\n                }\n              }\n\n              // TODO: output manifest specific to app paths and their\n              // revalidate periods and dynamicParams settings\n              sortedStaticPaths.forEach(([originalAppPath, routes]) => {\n                const appConfig = appDefaultConfigs.get(originalAppPath)\n                const isDynamicError = appConfig?.dynamic === 'error'\n\n                const isRoutePPREnabled: boolean = appConfig\n                  ? checkIsRoutePPREnabled(config.experimental.ppr)\n                  : false\n\n                routes.forEach((route) => {\n                  // If the route has any dynamic root segments, we need to skip\n                  // rendering the route. This is because we don't support\n                  // revalidating the shells without the parameters present.\n                  // Note that we only have fallback root params if we also have\n                  // PPR enabled for this route/app already.\n                  if (\n                    route.fallbackRootParams &&\n                    route.fallbackRootParams.length > 0 &&\n                    // We don't skip rendering the route if we have the\n                    // following enabled. This is because the flight data now\n                    // does not contain any of the route params and is instead\n                    // completely static.\n                    !(\n                      config.experimental.clientSegmentCache &&\n                      config.cacheComponents\n                    )\n                  ) {\n                    return\n                  }\n\n                  defaultMap[route.pathname] = {\n                    page: originalAppPath,\n                    _ssgPath: route.encodedPathname,\n                    _fallbackRouteParams: route.fallbackRouteParams,\n                    _isDynamicError: isDynamicError,\n                    _isAppDir: true,\n                    _isRoutePPREnabled: isRoutePPREnabled,\n                    _allowEmptyStaticShell: !route.throwOnEmptyStaticShell,\n                  }\n                })\n              })\n\n              if (i18n) {\n                for (const page of [\n                  ...staticPages,\n                  ...ssgPages,\n                  ...(useStaticPages404 ? ['/404'] : []),\n                  ...(useDefaultStatic500 ? ['/500'] : []),\n                ]) {\n                  const isSsg = ssgPages.has(page)\n                  const isDynamic = isDynamicRoute(page)\n                  const isFallback = isSsg && ssgStaticFallbackPages.has(page)\n\n                  for (const locale of i18n.locales) {\n                    // skip fallback generation for SSG pages without fallback mode\n                    if (isSsg && isDynamic && !isFallback) continue\n                    const outputPath = `/${locale}${page === '/' ? '' : page}`\n\n                    defaultMap[outputPath] = {\n                      page: defaultMap[page]?.page || page,\n                      _locale: locale,\n                      _pagesFallback: isFallback,\n                    }\n                  }\n\n                  if (isSsg) {\n                    // remove non-locale prefixed variant from defaultMap\n                    delete defaultMap[page]\n                  }\n                }\n              }\n\n              return defaultMap\n            },\n          }\n\n          const outdir = path.join(distDir, 'export')\n          const exportResult = await exportApp(\n            dir,\n            {\n              nextConfig: exportConfig,\n              enabledDirectories,\n              silent: true,\n              buildExport: true,\n              debugOutput,\n              debugPrerender,\n              pages: combinedPages,\n              outdir,\n              statusMessage: 'Generating static pages',\n              numWorkers: getNumberOfWorkers(exportConfig),\n              appDirOnly,\n            },\n            nextBuildSpan\n          )\n\n          // If there was no result, there's nothing more to do.\n          if (!exportResult) return\n\n          const getFallbackMode = (route: PrerenderedRoute) => {\n            const hasEmptyStaticShell = exportResult.byPath.get(\n              route.pathname\n            )?.hasEmptyStaticShell\n\n            // If the route has an empty static shell and is not configured to\n            // throw on empty static shell, then we should use the blocking\n            // static render mode.\n            if (\n              hasEmptyStaticShell &&\n              !route.throwOnEmptyStaticShell &&\n              route.fallbackMode === FallbackMode.PRERENDER\n            ) {\n              return FallbackMode.BLOCKING_STATIC_RENDER\n            }\n\n            // If the route has no fallback mode, then we should use the\n            // `NOT_FOUND` fallback mode.\n            if (!route.fallbackMode) {\n              return FallbackMode.NOT_FOUND\n            }\n\n            return route.fallbackMode\n          }\n\n          const getCacheControl = (\n            exportPath: string,\n            defaultRevalidate: Revalidate = false\n          ): CacheControl => {\n            const cacheControl =\n              exportResult.byPath.get(exportPath)?.cacheControl\n\n            if (!cacheControl) {\n              return { revalidate: defaultRevalidate, expire: undefined }\n            }\n\n            if (\n              cacheControl.revalidate !== false &&\n              cacheControl.revalidate > 0 &&\n              cacheControl.expire === undefined\n            ) {\n              return {\n                revalidate: cacheControl.revalidate,\n                expire: config.expireTime,\n              }\n            }\n\n            return cacheControl\n          }\n\n          if (debugOutput || process.env.NEXT_SSG_FETCH_METRICS === '1') {\n            recordFetchMetrics(exportResult)\n          }\n\n          writeTurborepoAccessTraceResult({\n            distDir: config.distDir,\n            traces: [\n              turborepoAccessTraceResult,\n              ...exportResult.turborepoAccessTraceResults.values(),\n            ],\n          })\n\n          prerenderManifest.notFoundRoutes = Array.from(\n            exportResult.ssgNotFoundPaths\n          )\n\n          // remove server bundles that were exported\n          for (const page of staticPages) {\n            const serverBundle = getPagePath(page, distDir, undefined, false)\n            await fs.unlink(serverBundle)\n          }\n\n          sortedStaticPaths.forEach(([originalAppPath, prerenderedRoutes]) => {\n            const page = appNormalizedPaths.get(originalAppPath)\n            if (!page) throw new InvariantError('Page not found')\n\n            const appConfig = appDefaultConfigs.get(originalAppPath)\n            if (!appConfig) throw new InvariantError('App config not found')\n\n            const ssgPageRoutesSet = new Set(pageInfos.get(page)?.ssgPageRoutes)\n\n            let hasRevalidateZero =\n              appConfig.revalidate === 0 ||\n              getCacheControl(page).revalidate === 0\n\n            if (hasRevalidateZero && pageInfos.get(page)?.isStatic) {\n              // if the page was marked as being static, but it contains dynamic data\n              // (ie, in the case of a static generation bailout), then it should be marked dynamic\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                isStatic: false,\n                isSSG: false,\n              })\n            }\n\n            const isAppRouteHandler = isAppRouteRoute(originalAppPath)\n\n            // When this is an app page and PPR is enabled, the route supports\n            // partial pre-rendering.\n            const isRoutePPREnabled: true | undefined =\n              !isAppRouteHandler &&\n              checkIsRoutePPREnabled(config.experimental.ppr)\n                ? true\n                : undefined\n\n            const htmlBotsRegexString =\n              // The htmlLimitedBots has been converted to a string during loadConfig\n              config.htmlLimitedBots || HTML_LIMITED_BOT_UA_RE_STRING\n\n            // this flag is used to selectively bypass the static cache and invoke the lambda directly\n            // to enable server actions on static routes\n            const bypassFor: RouteHas[] = [\n              { type: 'header', key: ACTION_HEADER },\n              {\n                type: 'header',\n                key: 'content-type',\n                value: 'multipart/form-data;.*',\n              },\n              // If it's PPR rendered non-static page, bypass the PPR cache when streaming metadata is enabled.\n              // This will skip the postpone data for those bots requests and instead produce a dynamic render.\n              ...(isRoutePPREnabled\n                ? [\n                    {\n                      type: 'header' as const,\n                      key: 'user-agent',\n                      value: htmlBotsRegexString,\n                    },\n                  ]\n                : []),\n            ]\n\n            // We should collect all the dynamic routes into a single array for\n            // this page. Including the full fallback route (the original\n            // route), any routes that were generated with unknown route params\n            // should be collected and included in the dynamic routes part\n            // of the manifest instead.\n            const staticPrerenderedRoutes: PrerenderedRoute[] = []\n            const dynamicPrerenderedRoutes: PrerenderedRoute[] = []\n\n            // Sort the outputted routes to ensure consistent output. Any route\n            // though that has unknown route params will be pulled and sorted\n            // independently. This is because the routes with unknown route\n            // params will contain the dynamic path parameters, some of which\n            // may conflict with the actual prerendered routes.\n            const unsortedUnknownPrerenderRoutes: PrerenderedRoute[] = []\n            const unsortedKnownPrerenderRoutes: PrerenderedRoute[] = []\n            for (const prerenderedRoute of prerenderedRoutes) {\n              if (\n                prerenderedRoute.fallbackRouteParams &&\n                prerenderedRoute.fallbackRouteParams.length > 0\n              ) {\n                unsortedUnknownPrerenderRoutes.push(prerenderedRoute)\n              } else {\n                unsortedKnownPrerenderRoutes.push(prerenderedRoute)\n              }\n            }\n\n            const sortedUnknownPrerenderRoutes = sortPageObjects(\n              unsortedUnknownPrerenderRoutes,\n              (prerenderedRoute) => prerenderedRoute.pathname\n            )\n            const sortedKnownPrerenderRoutes = sortPageObjects(\n              unsortedKnownPrerenderRoutes,\n              (prerenderedRoute) => prerenderedRoute.pathname\n            )\n\n            prerenderedRoutes = [\n              ...sortedKnownPrerenderRoutes,\n              ...sortedUnknownPrerenderRoutes,\n            ]\n\n            for (const prerenderedRoute of prerenderedRoutes) {\n              if (\n                isRoutePPREnabled &&\n                prerenderedRoute.fallbackRouteParams &&\n                prerenderedRoute.fallbackRouteParams.length > 0\n              ) {\n                // If the route has unknown params, then we need to add it to\n                // the list of dynamic routes.\n                dynamicPrerenderedRoutes.push(prerenderedRoute)\n              } else {\n                // If the route doesn't have unknown params, then we need to\n                // add it to the list of static routes.\n                staticPrerenderedRoutes.push(prerenderedRoute)\n              }\n            }\n\n            // Handle all the static routes.\n            for (const route of staticPrerenderedRoutes) {\n              if (isDynamicRoute(page) && route.pathname === page) continue\n\n              const {\n                metadata = {},\n                hasEmptyStaticShell,\n                hasPostponed,\n              } = exportResult.byPath.get(route.pathname) ?? {}\n\n              const cacheControl = getCacheControl(\n                route.pathname,\n                appConfig.revalidate\n              )\n\n              pageInfos.set(route.pathname, {\n                ...(pageInfos.get(route.pathname) as PageInfo),\n                hasPostponed,\n                hasEmptyStaticShell,\n                initialCacheControl: cacheControl,\n              })\n\n              // update the page (eg /blog/[slug]) to also have the postpone metadata\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                hasPostponed,\n                hasEmptyStaticShell,\n                initialCacheControl: cacheControl,\n              })\n\n              if (cacheControl.revalidate !== 0) {\n                const normalizedRoute = normalizePagePath(route.pathname)\n\n                let dataRoute: string | null\n                if (isAppRouteHandler) {\n                  dataRoute = null\n                } else {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | null = null\n                // While we may only write the `.rsc` when the route does not\n                // have PPR enabled, we still want to generate the route when\n                // deployed so it doesn't 404. If the app has PPR enabled, we\n                // should add this key.\n                if (\n                  !isAppRouteHandler &&\n                  isAppPPREnabled &&\n                  // Don't add a prefetch data route if we have both\n                  // clientSegmentCache and clientParamParsing enabled. This is\n                  // because we don't actually use the prefetch data route in\n                  // this case. This only applies if we have PPR enabled for\n                  // this route.\n                  !(\n                    config.experimental.clientSegmentCache &&\n                    config.cacheComponents &&\n                    isRoutePPREnabled\n                  )\n                ) {\n                  prefetchDataRoute = path.posix.join(\n                    `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                  )\n                }\n\n                const meta = collectMeta(metadata)\n                const status =\n                  route.pathname === UNDERSCORE_NOT_FOUND_ROUTE\n                    ? 404\n                    : meta.status\n\n                prerenderManifest.routes[route.pathname] = {\n                  initialStatus: status,\n                  initialHeaders: meta.headers,\n                  renderingMode: isAppPPREnabled\n                    ? isRoutePPREnabled\n                      ? RenderingMode.PARTIALLY_STATIC\n                      : RenderingMode.STATIC\n                    : undefined,\n                  experimentalPPR: isRoutePPREnabled,\n                  experimentalBypassFor: bypassFor,\n                  initialRevalidateSeconds: cacheControl.revalidate,\n                  initialExpireSeconds: cacheControl.expire,\n                  srcRoute: page,\n                  dataRoute,\n                  prefetchDataRoute,\n                  allowHeader: ALLOWED_HEADERS,\n                }\n              } else {\n                hasRevalidateZero = true\n\n                if (ssgPageRoutesSet.has(route.pathname)) {\n                  const pageInfo = pageInfos.get(page) as PageInfo\n                  // Remove the route from the SSG page routes if it bailed out\n                  // during prerendering.\n                  ssgPageRoutesSet.delete(route.pathname)\n\n                  // Mark the route as having a GSP and revalidate zero.\n                  if (ssgPageRoutesSet.size === 0) {\n                    hasGSPAndRevalidateZero.delete(page)\n                  } else {\n                    hasGSPAndRevalidateZero.add(page)\n                  }\n\n                  pageInfos.set(page, {\n                    ...pageInfo,\n                    ssgPageRoutes: Array.from(ssgPageRoutesSet),\n                    // If there are no SSG page routes left, then the page is not SSG.\n                    isSSG: ssgPageRoutesSet.size === 0 ? false : pageInfo.isSSG,\n                  })\n                } else {\n                  // we might have determined during prerendering that this page\n                  // used dynamic data\n                  pageInfos.set(route.pathname, {\n                    ...(pageInfos.get(route.pathname) as PageInfo),\n                    isSSG: false,\n                    isStatic: false,\n                  })\n                }\n              }\n            }\n\n            if (!hasRevalidateZero && isDynamicRoute(page)) {\n              // When PPR fallbacks aren't used, we need to include it here. If\n              // they are enabled, then it'll already be included in the\n              // prerendered routes.\n              if (!isRoutePPREnabled) {\n                dynamicPrerenderedRoutes.push({\n                  params: {},\n                  pathname: page,\n                  encodedPathname: page,\n                  fallbackRouteParams: [],\n                  fallbackMode:\n                    fallbackModes.get(originalAppPath) ??\n                    FallbackMode.NOT_FOUND,\n                  fallbackRootParams: [],\n                  throwOnEmptyStaticShell: true,\n                })\n              }\n\n              for (const route of dynamicPrerenderedRoutes) {\n                const normalizedRoute = normalizePagePath(route.pathname)\n\n                const metadata = exportResult.byPath.get(\n                  route.pathname\n                )?.metadata\n\n                const cacheControl = getCacheControl(route.pathname)\n\n                let dataRoute: string | null = null\n                if (!isAppRouteHandler) {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | null = null\n                let dynamicRoute = routesManifest.dynamicRoutes.find(\n                  (r) => r.page === route.pathname\n                )\n                if (!isAppRouteHandler && isAppPPREnabled) {\n                  if (\n                    // Don't add a prefetch data route if we have both\n                    // clientSegmentCache and clientParamParsing enabled. This is\n                    // because we don't actually use the prefetch data route in\n                    // this case. This only applies if we have PPR enabled for\n                    // this route.\n                    !config.experimental.clientSegmentCache ||\n                    !config.cacheComponents ||\n                    !isRoutePPREnabled\n                  ) {\n                    prefetchDataRoute = path.posix.join(\n                      `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                    )\n                  }\n\n                  // If the dynamic route wasn't found, then we need to create\n                  // it. This ensures that for each fallback shell there's an\n                  // entry in the app routes manifest which enables routing for\n                  // this fallback shell.\n                  if (!dynamicRoute) {\n                    dynamicRoute = pageToRoute(route.pathname, page)\n                    sourcePages.set(route.pathname, page)\n\n                    // This route is not for the internal router, but instead\n                    // for external routers.\n                    dynamicRoute.skipInternalRouting = true\n\n                    // Push this to the end of the array. The dynamic routes are\n                    // sorted by page later.\n                    dynamicRoutes.push(dynamicRoute)\n                  }\n                }\n\n                if (\n                  !isAppRouteHandler &&\n                  (metadata?.segmentPaths ||\n                    (route.fallbackRootParams &&\n                      route.fallbackRootParams.length > 0))\n                ) {\n                  // If PPR isn't enabled, then we might not find the dynamic\n                  // route by pathname. If that's the case, we need to find the\n                  // route by page.\n                  if (!dynamicRoute) {\n                    dynamicRoute = dynamicRoutes.find((r) => r.page === page)\n\n                    // If it can't be found by page, we must throw an error.\n                    if (!dynamicRoute) {\n                      throw new InvariantError('Dynamic route not found')\n                    }\n                  }\n\n                  if (metadata?.segmentPaths) {\n                    const pageSegmentPath = metadata.segmentPaths.find((item) =>\n                      item.endsWith('__PAGE__')\n                    )\n                    if (!pageSegmentPath) {\n                      throw new Error(`Invariant: missing __PAGE__ segmentPath`)\n                    }\n\n                    // We build a combined segment data route from the\n                    // page segment as we need to limit the number of\n                    // routes we output and they can be shared\n                    const builtSegmentDataRoute = buildPrefetchSegmentDataRoute(\n                      route.pathname,\n                      pageSegmentPath\n                    )\n\n                    builtSegmentDataRoute.source =\n                      builtSegmentDataRoute.source.replace(\n                        '/__PAGE__\\\\.segment\\\\.rsc$',\n                        `(?<segment>/__PAGE__\\\\.segment\\\\.rsc|\\\\.segment\\\\.rsc)(?:/)?$`\n                      )\n                    builtSegmentDataRoute.destination =\n                      builtSegmentDataRoute.destination.replace(\n                        '/__PAGE__.segment.rsc',\n                        '$segment'\n                      )\n                    dynamicRoute.prefetchSegmentDataRoutes ??= []\n                    dynamicRoute.prefetchSegmentDataRoutes.push(\n                      builtSegmentDataRoute\n                    )\n                  }\n                  // If the route has fallback root params, and we don't have\n                  // any segment paths, we need to write the inverse prefetch\n                  // segment data route so that it can first rewrite the /_tree\n                  // request to the prefetch RSC route. We also need to set the\n                  // `hasFallbackRootParams` flag so that we can simplify the\n                  // route regex for matching.\n                  else if (\n                    route.fallbackRootParams &&\n                    route.fallbackRootParams.length > 0\n                  ) {\n                    dynamicRoute.hasFallbackRootParams = true\n                    dynamicRoute.prefetchSegmentDataRoutes = [\n                      buildInversePrefetchSegmentDataRoute(\n                        dynamicRoute.page,\n                        // We use the special segment path of `/_tree` because it's\n                        // the first one sent by the client router so it's the only\n                        // one we need to rewrite to the regular prefetch RSC route.\n                        '/_tree'\n                      ),\n                    ]\n                  }\n                }\n\n                pageInfos.set(route.pathname, {\n                  ...(pageInfos.get(route.pathname) as PageInfo),\n                  isDynamicAppRoute: true,\n                  // if PPR is turned on and the route contains a dynamic segment,\n                  // we assume it'll be partially prerendered\n                  hasPostponed: isRoutePPREnabled,\n                })\n\n                const fallbackMode = getFallbackMode(route)\n\n                // When the route is configured to serve a prerender, we should\n                // use the cache control from the export result. If it can't be\n                // found, mark that we should keep the shell forever\n                // (revalidate: `false` via `getCacheControl()`).\n                const fallbackCacheControl =\n                  isRoutePPREnabled && fallbackMode === FallbackMode.PRERENDER\n                    ? cacheControl\n                    : undefined\n\n                const fallback: Fallback = fallbackModeToFallbackField(\n                  fallbackMode,\n                  route.pathname\n                )\n\n                const meta =\n                  metadata &&\n                  isRoutePPREnabled &&\n                  fallbackMode === FallbackMode.PRERENDER\n                    ? collectMeta(metadata)\n                    : {}\n\n                prerenderManifest.dynamicRoutes[route.pathname] = {\n                  experimentalPPR: isRoutePPREnabled,\n                  renderingMode: isAppPPREnabled\n                    ? isRoutePPREnabled\n                      ? RenderingMode.PARTIALLY_STATIC\n                      : RenderingMode.STATIC\n                    : undefined,\n                  experimentalBypassFor: bypassFor,\n                  routeRegex: normalizeRouteRegex(\n                    getNamedRouteRegex(route.pathname, {\n                      prefixRouteKeys: false,\n                    }).re.source\n                  ),\n                  dataRoute,\n                  fallback,\n                  fallbackRevalidate: fallbackCacheControl?.revalidate,\n                  fallbackExpire: fallbackCacheControl?.expire,\n                  fallbackStatus: meta.status,\n                  fallbackHeaders: meta.headers,\n                  fallbackRootParams: fallback\n                    ? route.fallbackRootParams\n                    : undefined,\n                  fallbackSourceRoute:\n                    route.fallbackRouteParams &&\n                    route.fallbackRouteParams.length > 0\n                      ? page\n                      : undefined,\n                  fallbackRouteParams: route.fallbackRouteParams,\n                  dataRouteRegex: !dataRoute\n                    ? null\n                    : normalizeRouteRegex(\n                        getNamedRouteRegex(dataRoute, {\n                          prefixRouteKeys: false,\n                          includeSuffix: true,\n                          excludeOptionalTrailingSlash: true,\n                        }).re.source\n                      ),\n                  prefetchDataRoute,\n                  prefetchDataRouteRegex: !prefetchDataRoute\n                    ? undefined\n                    : normalizeRouteRegex(\n                        getNamedRouteRegex(prefetchDataRoute, {\n                          prefixRouteKeys: false,\n                          includeSuffix: true,\n                          excludeOptionalTrailingSlash: true,\n                        }).re.source\n                      ),\n                  allowHeader: ALLOWED_HEADERS,\n                }\n              }\n            }\n          })\n\n          const moveExportedPage = async (\n            originPage: string,\n            page: string,\n            file: string,\n            isSsg: boolean,\n            ext: 'html' | 'json',\n            additionalSsgFile = false\n          ) => {\n            return staticGenerationSpan\n              .traceChild('move-exported-page')\n              .traceAsyncFn(async () => {\n                file = `${file}.${ext}`\n                const orig = path.join(outdir, file)\n                const pagePath = getPagePath(\n                  originPage,\n                  distDir,\n                  undefined,\n                  false\n                )\n\n                const relativeDest = path\n                  .relative(\n                    path.join(distDir, SERVER_DIRECTORY),\n                    path.join(\n                      path.join(\n                        pagePath,\n                        // strip leading / and then recurse number of nested dirs\n                        // to place from base folder\n                        originPage\n                          .slice(1)\n                          .split('/')\n                          .map(() => '..')\n                          .join('/')\n                      ),\n                      file\n                    )\n                  )\n                  .replace(/\\\\/g, '/')\n\n                if (\n                  !isSsg &&\n                  !(\n                    // don't add static status page to manifest if it's\n                    // the default generated version e.g. no pages/500\n                    (\n                      STATIC_STATUS_PAGES.includes(page) &&\n                      !usedStaticStatusPages.includes(page)\n                    )\n                  )\n                ) {\n                  pagesManifest[page] = relativeDest\n                }\n\n                const dest = path.join(distDir, SERVER_DIRECTORY, relativeDest)\n                const isNotFound =\n                  prerenderManifest.notFoundRoutes.includes(page)\n\n                // for SSG files with i18n the non-prerendered variants are\n                // output with the locale prefixed so don't attempt moving\n                // without the prefix\n                if ((!i18n || additionalSsgFile) && !isNotFound) {\n                  await fs.mkdir(path.dirname(dest), { recursive: true })\n                  await fs.rename(orig, dest)\n                } else if (i18n && !isSsg) {\n                  // this will be updated with the locale prefixed variant\n                  // since all files are output with the locale prefix\n                  delete pagesManifest[page]\n                }\n\n                if (i18n) {\n                  if (additionalSsgFile) return\n\n                  const localeExt = page === '/' ? path.extname(file) : ''\n                  const relativeDestNoPages = relativeDest.slice(\n                    'pages/'.length\n                  )\n\n                  for (const locale of i18n.locales) {\n                    const curPath = `/${locale}${page === '/' ? '' : page}`\n\n                    if (\n                      isSsg &&\n                      prerenderManifest.notFoundRoutes.includes(curPath)\n                    ) {\n                      continue\n                    }\n\n                    const updatedRelativeDest = path\n                      .join(\n                        'pages',\n                        locale + localeExt,\n                        // if it's the top-most index page we want it to be locale.EXT\n                        // instead of locale/index.html\n                        page === '/' ? '' : relativeDestNoPages\n                      )\n                      .replace(/\\\\/g, '/')\n\n                    const updatedOrig = path.join(\n                      outdir,\n                      locale + localeExt,\n                      page === '/' ? '' : file\n                    )\n                    const updatedDest = path.join(\n                      distDir,\n                      SERVER_DIRECTORY,\n                      updatedRelativeDest\n                    )\n\n                    if (!isSsg) {\n                      pagesManifest[curPath] = updatedRelativeDest\n                    }\n                    await fs.mkdir(path.dirname(updatedDest), {\n                      recursive: true,\n                    })\n                    await fs.rename(updatedOrig, updatedDest)\n                  }\n                }\n              })\n          }\n\n          async function moveExportedAppNotFoundTo404() {\n            return staticGenerationSpan\n              .traceChild('move-exported-app-not-found-')\n              .traceAsyncFn(async () => {\n                const orig = path.join(\n                  distDir,\n                  'server',\n                  'app',\n                  '_not-found.html'\n                )\n                const updatedRelativeDest = path\n                  .join('pages', '404.html')\n                  .replace(/\\\\/g, '/')\n\n                if (existsSync(orig)) {\n                  // if 404.html folder doesn't exist, create it\n                  await fs.mkdir(\n                    path.dirname(\n                      path.join(distDir, 'server', updatedRelativeDest)\n                    ),\n                    { recursive: true }\n                  )\n                  await fs.copyFile(\n                    orig,\n                    path.join(distDir, 'server', updatedRelativeDest)\n                  )\n\n                  // since the app router not found is prioritized over pages router,\n                  // we have to ensure the app router entries are available for all locales\n                  if (i18n) {\n                    for (const locale of i18n.locales) {\n                      const curPath = `/${locale}/404`\n                      pagesManifest[curPath] = updatedRelativeDest\n                    }\n                  }\n\n                  pagesManifest['/404'] = updatedRelativeDest\n                }\n              })\n          }\n\n          async function moveExportedAppGlobalErrorTo500() {\n            return staticGenerationSpan\n              .traceChild('move-exported-app-global-error-')\n              .traceAsyncFn(async () => {\n                // If static 500.html exists in pages router, don't move it\n                if (\n                  existsSync(path.join(distDir, 'server', 'pages', '500.html'))\n                ) {\n                  return\n                }\n\n                // Only handle 500.html generation for static export\n                const orig = path.join(\n                  distDir,\n                  'server',\n                  'app',\n                  '_global-error.html'\n                )\n                if (existsSync(orig)) {\n                  const error500Html = path.join(\n                    distDir,\n                    'server',\n                    'pages',\n                    '500.html'\n                  )\n\n                  // if 500.html folder doesn't exist, create it\n                  await fs.mkdir(path.dirname(error500Html), {\n                    recursive: true,\n                  })\n                  await fs.copyFile(orig, error500Html)\n\n                  pagesManifest['/500'] = path\n                    .join('pages', '500.html')\n                    .replace(/\\\\/g, '/')\n                }\n              })\n          }\n\n          // If there's /not-found inside app, we prefer it over the pages 404\n          if (hasStaticApp404) {\n            await moveExportedAppNotFoundTo404()\n          } else {\n            // Only move /404 to /404 when there is no custom 404 as in that case we don't know about the 404 page\n            if (\n              !hasPages404 &&\n              !hasApp404 &&\n              useStaticPages404 &&\n              !appDirOnly\n            ) {\n              await moveExportedPage('/_error', '/404', '/404', false, 'html')\n            }\n          }\n\n          if (useDefaultStatic500 && !appDirOnly) {\n            await moveExportedPage('/_error', '/500', '/500', false, 'html')\n          }\n\n          // If there's app router and no pages router, use app router built-in 500.html\n          if (\n            hasStaticAppGlobalError &&\n            mappedAppPages &&\n            Object.keys(mappedAppPages).length > 0\n          ) {\n            await moveExportedAppGlobalErrorTo500()\n          }\n\n          for (const page of combinedPages) {\n            const isSsg = ssgPages.has(page)\n            const isStaticSsgFallback = ssgStaticFallbackPages.has(page)\n            const isDynamic = isDynamicRoute(page)\n            const file = normalizePagePath(page)\n\n            const pageInfo = pageInfos.get(page)\n            const durationInfo = exportResult.byPage.get(page)\n            if (pageInfo && durationInfo) {\n              // Set Build Duration\n              if (pageInfo.ssgPageRoutes) {\n                pageInfo.ssgPageDurations = pageInfo.ssgPageRoutes.map(\n                  (pagePath) => {\n                    const duration = durationInfo.durationsByPath.get(pagePath)\n                    if (typeof duration === 'undefined') {\n                      throw new Error(\"Invariant: page wasn't built\")\n                    }\n\n                    return duration\n                  }\n                )\n              }\n              pageInfo.pageDuration = durationInfo.durationsByPath.get(page)\n            }\n\n            // The dynamic version of SSG pages are only prerendered if the\n            // fallback is enabled. Below, we handle the specific prerenders\n            // of these.\n            const hasHtmlOutput = !(isSsg && isDynamic && !isStaticSsgFallback)\n\n            if (hasHtmlOutput) {\n              await moveExportedPage(page, page, file, isSsg, 'html')\n            }\n\n            if (isSsg) {\n              // For a non-dynamic SSG page, we must copy its data file\n              // from export, we already moved the HTML file above\n              if (!isDynamic) {\n                await moveExportedPage(page, page, file, isSsg, 'json')\n\n                if (i18n) {\n                  // TODO: do we want to show all locale variants in build output\n                  for (const locale of i18n.locales) {\n                    const localePage = `/${locale}${page === '/' ? '' : page}`\n\n                    const cacheControl = getCacheControl(localePage)\n\n                    prerenderManifest.routes[localePage] = {\n                      initialRevalidateSeconds: cacheControl.revalidate,\n                      initialExpireSeconds: cacheControl.expire,\n                      experimentalPPR: undefined,\n                      renderingMode: undefined,\n                      srcRoute: null,\n                      dataRoute: path.posix.join(\n                        '/_next/data',\n                        buildId,\n                        `${localePage}.json`\n                      ),\n                      prefetchDataRoute: undefined,\n                      allowHeader: ALLOWED_HEADERS,\n                    }\n                  }\n                } else {\n                  const cacheControl = getCacheControl(page)\n\n                  prerenderManifest.routes[page] = {\n                    initialRevalidateSeconds: cacheControl.revalidate,\n                    initialExpireSeconds: cacheControl.expire,\n                    experimentalPPR: undefined,\n                    renderingMode: undefined,\n                    srcRoute: null,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${file}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                    allowHeader: ALLOWED_HEADERS,\n                  }\n                }\n                if (pageInfo) {\n                  pageInfo.initialCacheControl = getCacheControl(page)\n                }\n              } else {\n                // For a dynamic SSG page, we did not copy its data exports and only\n                // copy the fallback HTML file (if present).\n                // We must also copy specific versions of this page as defined by\n                // `getStaticPaths` (additionalSsgPaths).\n                for (const route of additionalPaths.get(page) ?? []) {\n                  const pageFile = normalizePagePath(route.pathname)\n                  await moveExportedPage(\n                    page,\n                    route.pathname,\n                    pageFile,\n                    isSsg,\n                    'html',\n                    true\n                  )\n                  await moveExportedPage(\n                    page,\n                    route.pathname,\n                    pageFile,\n                    isSsg,\n                    'json',\n                    true\n                  )\n\n                  const cacheControl = getCacheControl(route.pathname)\n\n                  prerenderManifest.routes[route.pathname] = {\n                    initialRevalidateSeconds: cacheControl.revalidate,\n                    initialExpireSeconds: cacheControl.expire,\n                    experimentalPPR: undefined,\n                    renderingMode: undefined,\n                    srcRoute: page,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${normalizePagePath(route.pathname)}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                    allowHeader: ALLOWED_HEADERS,\n                  }\n\n                  if (pageInfo) {\n                    pageInfo.initialCacheControl = cacheControl\n                  }\n                }\n              }\n            }\n          }\n\n          // remove temporary export folder\n          await fs.rm(outdir, { recursive: true, force: true })\n          await writeManifest(pagesManifestPath, pagesManifest)\n        })\n\n        // As we may have modified the dynamicRoutes, we need to sort the\n        // dynamic routes by page.\n        routesManifest.dynamicRoutes = sortSortableRouteObjects(\n          dynamicRoutes,\n          (route) => ({\n            // If the route is PPR enabled, and has an associated source page,\n            // use it. Otherwise fallback to the page which should be the same.\n            sourcePage: sourcePages.get(route.page) ?? route.page,\n            page: route.page,\n          })\n        )\n\n        // Now write the routes manifest out.\n        await nextBuildSpan\n          .traceChild('write-routes-manifest')\n          .traceAsyncFn(() => writeManifest(routesManifestPath, routesManifest))\n      }\n\n      const finalizingPageOptimizationStart = process.hrtime()\n      const postBuildSpinner = createSpinner('Finalizing page optimization')\n      let buildTracesSpinner\n      let buildTracesStart\n      if (buildTracesPromise) {\n        buildTracesStart = process.hrtime()\n        buildTracesSpinner = createSpinner('Collecting build traces')\n      }\n\n      // ensure the worker is not left hanging\n      worker.end()\n\n      const analysisEnd = process.hrtime(analysisBegin)\n      telemetry.record(\n        eventBuildOptimize(pagesPaths, {\n          durationInSeconds: analysisEnd[0],\n          staticPageCount: staticPages.size,\n          staticPropsPageCount: ssgPages.size,\n          serverPropsPageCount: serverPropsPages.size,\n          ssrPageCount:\n            pagesPaths.length -\n            (staticPages.size + ssgPages.size + serverPropsPages.size),\n          hasStatic404: useStaticPages404,\n          hasReportWebVitals:\n            namedExports?.includes('reportWebVitals') ?? false,\n          rewritesCount: combinedRewrites.length,\n          headersCount: headers.length,\n          redirectsCount: redirects.length - 1, // reduce one for trailing slash\n          headersWithHasCount: headers.filter((r: any) => !!r.has).length,\n          rewritesWithHasCount: combinedRewrites.filter((r: any) => !!r.has)\n            .length,\n          redirectsWithHasCount: redirects.filter((r: any) => !!r.has).length,\n          middlewareCount: hasMiddlewareFile || hasProxyFile ? 1 : 0,\n          totalAppPagesCount,\n          staticAppPagesCount,\n          serverAppPagesCount,\n          edgeRuntimeAppCount,\n          edgeRuntimePagesCount,\n        })\n      )\n\n      if (NextBuildContext.telemetryState) {\n        const events = eventBuildFeatureUsage(\n          NextBuildContext.telemetryState.usages\n        )\n        telemetry.record(events)\n        telemetry.record(\n          eventPackageUsedInGetServerSideProps(\n            NextBuildContext.telemetryState.packagesUsedInServerSideProps\n          )\n        )\n        const useCacheTracker = NextBuildContext.telemetryState.useCacheTracker\n\n        for (const [key, value] of Object.entries(useCacheTracker)) {\n          telemetry.record(\n            eventBuildFeatureUsage([\n              {\n                featureName: key as UseCacheTrackerKey,\n                invocationCount: value,\n              },\n            ])\n          )\n        }\n      }\n\n      if (ssgPages.size > 0 || appDir) {\n        tbdPrerenderRoutes.forEach((tbdRoute) => {\n          const normalizedRoute = normalizePagePath(tbdRoute)\n          const dataRoute = path.posix.join(\n            '/_next/data',\n            buildId,\n            `${normalizedRoute}.json`\n          )\n\n          prerenderManifest.dynamicRoutes[tbdRoute] = {\n            routeRegex: normalizeRouteRegex(\n              getNamedRouteRegex(tbdRoute, {\n                prefixRouteKeys: false,\n              }).re.source\n            ),\n            experimentalPPR: undefined,\n            renderingMode: undefined,\n            dataRoute,\n            fallback: ssgBlockingFallbackPages.has(tbdRoute)\n              ? null\n              : ssgStaticFallbackPages.has(tbdRoute)\n                ? `${normalizedRoute}.html`\n                : false,\n            fallbackRevalidate: undefined,\n            fallbackExpire: undefined,\n            fallbackSourceRoute: undefined,\n            fallbackRootParams: undefined,\n            fallbackRouteParams: undefined,\n            dataRouteRegex: normalizeRouteRegex(\n              getNamedRouteRegex(dataRoute, {\n                prefixRouteKeys: true,\n                includeSuffix: true,\n                excludeOptionalTrailingSlash: true,\n              }).re.source\n            ),\n            // Pages does not have a prefetch data route.\n            prefetchDataRoute: undefined,\n            prefetchDataRouteRegex: undefined,\n            allowHeader: ALLOWED_HEADERS,\n          }\n        })\n\n        NextBuildContext.previewModeId = previewProps.previewModeId\n        NextBuildContext.fetchCacheKeyPrefix =\n          config.experimental.fetchCacheKeyPrefix\n        NextBuildContext.allowedRevalidateHeaderKeys =\n          config.experimental.allowedRevalidateHeaderKeys\n\n        await writePrerenderManifest(distDir, prerenderManifest)\n        await writeClientSsgManifest(prerenderManifest, {\n          distDir,\n          buildId,\n          locales: config.i18n?.locales,\n        })\n      } else {\n        await writePrerenderManifest(distDir, {\n          version: 4,\n          routes: {},\n          dynamicRoutes: {},\n          preview: previewProps,\n          notFoundRoutes: [],\n        })\n      }\n\n      await writeImagesManifest(distDir, config)\n      await writeManifest(path.join(distDir, EXPORT_MARKER), {\n        version: 1,\n        hasExportPathMap: typeof config.exportPathMap === 'function',\n        exportTrailingSlash: config.trailingSlash === true,\n        isNextImageImported: isNextImageImported === true,\n      })\n      await fs.unlink(path.join(distDir, EXPORT_DETAIL)).catch((err) => {\n        if (err.code === 'ENOENT') {\n          return Promise.resolve()\n        }\n        return Promise.reject(err)\n      })\n\n      if (Boolean(config.experimental.nextScriptWorkers)) {\n        await nextBuildSpan\n          .traceChild('verify-partytown-setup')\n          .traceAsyncFn(async () => {\n            await verifyPartytownSetup(\n              dir,\n              path.join(distDir, CLIENT_STATIC_FILES_PATH)\n            )\n          })\n      }\n\n      await buildTracesPromise\n\n      if (buildTracesSpinner) {\n        if (buildTracesStart) {\n          const buildTracesEnd = process.hrtime(buildTracesStart)\n          buildTracesSpinner.setText(\n            `Collecting build traces in ${hrtimeDurationToString(buildTracesEnd)}`\n          )\n        }\n        buildTracesSpinner.stopAndPersist()\n        buildTracesSpinner = undefined\n      }\n\n      if (proxyFilePath && bundler !== Bundler.Turbopack) {\n        await fs.rename(\n          path.join(distDir, SERVER_DIRECTORY, 'proxy.js'),\n          path.join(distDir, SERVER_DIRECTORY, 'middleware.js')\n        )\n        await fs.rename(\n          path.join(distDir, SERVER_DIRECTORY, 'proxy.js.nft.json'),\n          path.join(distDir, SERVER_DIRECTORY, 'middleware.js.nft.json')\n        )\n      }\n\n      if (isCompileMode) {\n        Log.info(\n          `Build ran with \"compile\" mode, to finalize the build run either \"generate\" or \"generate-env\" mode as well`\n        )\n      }\n\n      if (config.output === 'export') {\n        await nextBuildSpan\n          .traceChild('output-export-full-static-export')\n          .traceAsyncFn(async () => {\n            await writeFullyStaticExport(\n              config,\n              dir,\n              enabledDirectories,\n              configOutDir,\n              nextBuildSpan,\n              appDirOnly\n            )\n          })\n      }\n\n      // This should come after output: export handling but before\n      // output: standalone, in the future output: standalone might\n      // not be allowed if an adapter with onBuildComplete is configured\n      const adapterPath = config.experimental.adapterPath\n      if (adapterPath) {\n        await nextBuildSpan\n          .traceChild('adapter-handle-build-complete')\n          .traceAsyncFn(async () => {\n            await handleBuildComplete({\n              dir,\n              distDir,\n              config,\n              buildId,\n              configOutDir: path.join(dir, configOutDir),\n              staticPages,\n              serverPropsPages,\n              nextVersion: process.env.__NEXT_VERSION as string,\n              tracingRoot: outputFileTracingRoot,\n              hasNodeMiddleware,\n              hasInstrumentationHook,\n              adapterPath,\n              pageKeys: pageKeys.pages,\n              appPageKeys: denormalizedAppPages,\n              routesManifest,\n              prerenderManifest,\n              middlewareManifest,\n              functionsConfigManifest,\n              hasStatic404: useStaticPages404,\n              hasStatic500: useDefaultStatic500,\n              requiredServerFiles: requiredServerFilesManifest.files,\n            })\n          })\n      }\n\n      if (config.output === 'standalone') {\n        await nextBuildSpan\n          .traceChild('output-standalone')\n          .traceAsyncFn(async () => {\n            await writeStandaloneDirectory(\n              nextBuildSpan,\n              distDir,\n              pageKeys,\n              denormalizedAppPages,\n              outputFileTracingRoot,\n              requiredServerFilesManifest,\n              middlewareManifest,\n              hasNodeMiddleware,\n              hasInstrumentationHook,\n              staticPages,\n              loadedEnvFiles,\n              appDir\n            )\n          })\n      }\n\n      if (postBuildSpinner) {\n        const finalizingPageOptimizationEnd = process.hrtime(\n          finalizingPageOptimizationStart\n        )\n        postBuildSpinner.setText(\n          `Finalizing page optimization in ${hrtimeDurationToString(finalizingPageOptimizationEnd)}`\n        )\n        postBuildSpinner.stopAndPersist()\n      }\n      console.log()\n\n      if (debugOutput) {\n        nextBuildSpan\n          .traceChild('print-custom-routes')\n          .traceFn(() => printCustomRoutes({ redirects, rewrites, headers }))\n      }\n\n      await nextBuildSpan.traceChild('print-tree-view').traceAsyncFn(() =>\n        printTreeView(pageKeys, pageInfos, {\n          pagesDir,\n          useStaticPages404,\n          pageExtensions: config.pageExtensions,\n          buildManifest,\n          middlewareManifest,\n          hasGSPAndRevalidateZero,\n        })\n      )\n\n      await nextBuildSpan\n        .traceChild('telemetry-flush')\n        .traceAsyncFn(() => telemetry.flush())\n\n      await shutdownPromise\n    })\n  } catch (e) {\n    const telemetry: Telemetry | undefined = traceGlobals.get('telemetry')\n    if (telemetry) {\n      telemetry.record(\n        eventBuildFailed({\n          bundler: getBundlerForTelemetry(bundler),\n          errorCode: getErrorCodeForTelemetry(e),\n          durationInSeconds: Math.floor((Date.now() - buildStartTime) / 1000),\n        })\n      )\n    }\n    throw e\n  } finally {\n    // Ensure we wait for lockfile patching if present\n    await lockfilePatchPromise.cur\n\n    // Ensure all traces are flushed before finishing the command\n    await flushAllTraces()\n    teardownTraceSubscriber()\n\n    if (traceUploadUrl && loadedConfig) {\n      uploadTrace({\n        traceUploadUrl,\n        mode: 'build',\n        projectDir: dir,\n        distDir: loadedConfig.distDir,\n        isTurboSession: bundler === Bundler.Turbopack,\n        sync: true,\n      })\n    }\n  }\n}\n\nfunction errorFromUnsupportedSegmentConfig(): never {\n  Log.error(\n    `Invalid segment configuration export detected. This can cause unexpected behavior from the configs not being applied. You should see the relevant failures in the logs above. Please fix them to continue.`\n  )\n  process.exit(1)\n}\n\nfunction getBundlerForTelemetry(bundler: Bundler) {\n  switch (bundler) {\n    case Bundler.Turbopack:\n      return 'turbopack'\n    case Bundler.Rspack:\n      return 'rspack'\n    case Bundler.Webpack:\n      return 'webpack'\n    default:\n      throw new Error(`unknown bundler: ${bundler}`)\n  }\n}\n\nfunction getErrorCodeForTelemetry(err: unknown) {\n  const code = extractNextErrorCode(err)\n  if (code != null) {\n    return code\n  }\n\n  if (err instanceof Error && 'code' in err && typeof err.code === 'string') {\n    return err.code\n  }\n\n  if (err instanceof Error) {\n    return err.name\n  }\n\n  return 'Unknown'\n}\n"],"names":["loadEnvConfig","bold","yellow","makeRe","existsSync","promises","fs","os","Worker","defaultConfig","devalue","findUp","nanoid","path","STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR","PUBLIC_DIR_MIDDLEWARE_CONFLICT","MIDDLEWARE_FILENAME","PROXY_FILENAME","PAGES_DIR_ALIAS","INSTRUMENTATION_HOOK_FILENAME","RSC_PREFETCH_SUFFIX","RSC_SUFFIX","NEXT_RESUME_HEADER","PRERENDER_REVALIDATE_HEADER","PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER","NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER","NEXT_CACHE_REVALIDATED_TAGS_HEADER","MATCHED_PATH_HEADER","RSC_SEGMENTS_DIR_SUFFIX","RSC_SEGMENT_SUFFIX","FileType","fileExists","findPagesDir","loadCustomRoutes","normalizeRouteRegex","nonNullable","recursiveDeleteSyncWithAsyncRetries","verifyPartytownSetup","BUILD_ID_FILE","BUILD_MANIFEST","CLIENT_STATIC_FILES_PATH","EXPORT_DETAIL","EXPORT_MARKER","IMAGES_MANIFEST","PAGES_MANIFEST","PHASE_PRODUCTION_BUILD","PRERENDER_MANIFEST","REACT_LOADABLE_MANIFEST","ROUTES_MANIFEST","SERVER_DIRECTORY","SERVER_FILES_MANIFEST","STATIC_STATUS_PAGES","MIDDLEWARE_MANIFEST","APP_PATHS_MANIFEST","APP_PATH_ROUTES_MANIFEST","RSC_MODULE_TYPES","NEXT_FONT_MANIFEST","SUBRESOURCE_INTEGRITY_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","SERVER_REFERENCE_MANIFEST","FUNCTIONS_CONFIG_MANIFEST","DYNAMIC_CSS_MANIFEST","TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST","UNDERSCORE_NOT_FOUND_ROUTE","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","UNDERSCORE_GLOBAL_ERROR_ROUTE_ENTRY","isDynamicRoute","Bundler","finalizeBundlerFromConfig","loadConfig","normalizePagePath","getPagePath","ciEnvironment","turborepoTraceAccess","TurborepoAccessTraceResult","writeTurborepoAccessTraceResult","eventBuildOptimize","eventCliSession","eventBuildFeatureUsage","eventNextPlugins","EVENT_BUILD_FEATURE_USAGE","eventPackageUsedInGetServerSideProps","eventBuildCompleted","eventBuildFailed","Telemetry","createPagesMapping","collectAppFiles","processPageRoutes","processAppRoutes","processLayoutRoutes","extractSlotsFromAppRoutes","extractSlotsFromDefaultFiles","combineSlots","collectPagesFiles","sortByPageExts","getStaticInfoIncludingLayouts","PAGE_TYPES","generateBuildId","isWriteable","Log","createSpinner","trace","flushAllTraces","setGlobal","detectConflictingPaths","printCustomRoutes","printTreeView","copyTracedFiles","isReservedPage","isAppBuiltinPage","collectRoutesUsingEdgeRuntime","collectMeta","isProxyFile","writeBuildId","normalizeLocalePath","isError","isEdgeRuntime","recursiveCopy","lockfilePatchPromise","teardownTraceSubscriber","getNamedRouteRegex","getFilesInDir","eventSwcPlugins","normalizeAppPath","ACTION_HEADER","NEXT_ROUTER_PREFETCH_HEADER","RSC_HEADER","RSC_CONTENT_TYPE_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_DID_POSTPONE_HEADER","NEXT_ROUTER_SEGMENT_PREFETCH_HEADER","NEXT_REWRITTEN_PATH_HEADER","NEXT_REWRITTEN_QUERY_HEADER","webpackBuild","NextBuildContext","normalizePathSep","isAppRouteRoute","createClientRouterFilter","createValidFileMatcher","startTypeChecking","generateInterceptionRoutesRewrites","buildDataRoute","collectBuildTraces","formatManifest","recordFrameworkVersion","updateBuildDiagnostics","recordFetchMetrics","getStartServerInfo","logStartInfo","hasCustomExportOutput","buildCustomRoute","traceMemoryUsage","generateEncryptionKeyBase64","uploadTrace","checkIsAppPPREnabled","checkIsRoutePPREnabled","FallbackMode","fallbackModeToFallbackField","RenderingMode","InvariantError","HTML_LIMITED_BOT_UA_RE_STRING","buildInversePrefetchSegmentDataRoute","buildPrefetchSegmentDataRoute","turbopackBuild","isFileSystemCacheEnabledForBuild","inlineStaticEnv","populateStaticEnv","durationToString","hrtimeDurationToString","traceGlobals","extractNextErrorCode","runAfterProductionCompile","generatePreviewKeys","handleBuildComplete","sortPageObjects","sortPages","sortSortableRouteObjects","mkdir","createRouteTypesManifest","writeRouteTypesManifest","writeValidatorFile","Lockfile","ALLOWED_HEADERS","pageToRoute","page","sourcePage","routeRegex","prefixRouteKeys","regex","re","source","routeKeys","namedRegex","getCacheDir","distDir","cacheDir","join","isCI","hasNextSupport","hasCache","console","log","prefixes","warn","writeFileUtf8","filePath","content","writeFile","readFileUtf8","readFile","writeManifest","manifest","readManifest","JSON","parse","writePrerenderManifest","writeClientSsgManifest","prerenderManifest","buildId","locales","ssgPages","Set","Object","entries","routes","filter","srcRoute","map","route","pathname","keys","dynamicRoutes","sort","clientSsgManifestContent","writeFunctionsConfigManifest","writeRequiredServerFilesManifest","requiredServerFiles","writeImagesManifest","config","images","deviceSizes","imageSizes","sizes","remotePatterns","p","protocol","replace","hostname","port","dot","search","localPatterns","version","STANDALONE_DIRECTORY","writeStandaloneDirectory","nextBuildSpan","pageKeys","denormalizedAppPages","outputFileTracingRoot","middlewareManifest","hasNodeMiddleware","hasInstrumentationHook","staticPages","loadedEnvFiles","appDir","traceChild","traceAsyncFn","pages","file","files","reduce","acc","envFile","includes","push","outputPath","relative","dirname","recursive","copyFile","middlewareOutput","originalPagesDir","overwrite","originalServerApp","getNumberOfWorkers","experimental","cpus","memoryBasedWorkersCount","Math","max","min","floor","freemem","staticWorkerPath","require","resolve","staticWorkerExposedMethods","createStaticWorker","options","debuggerPortOffset","progress","logger","numWorkers","onActivity","run","onActivityAbort","clear","enableSourceMaps","enablePrerenderSourceMaps","isolatedMemory","enableWorkerThreads","workerThreads","exposedMethods","writeFullyStaticExport","dir","enabledDirectories","configOutDir","appDirOnly","exportApp","default","buildExport","nextConfig","silent","outdir","getBuildId","isGenerateMode","build","reactProductionProfiling","debugOutput","debugPrerender","noMangling","bundler","Turbopack","experimentalBuildMode","traceUploadUrl","debugBuildAppPaths","debugBuildPagePaths","isCompileMode","buildStartTime","Date","now","loadedConfig","undefined","buildMode","process","env","__NEXT_VERSION","mappedPages","traceFn","turborepoAccessTraceResult","setAttribute","getBundlerForTelemetry","NEXT_DEPLOYMENT_ID","deploymentId","exit","info","customRoutes","headers","rewrites","redirects","combinedRewrites","beforeFiles","afterFiles","fallback","hasRewrites","length","originalRewrites","_originalRewrites","originalRedirects","_originalRedirects","distDirCreated","err","code","Error","lockDistDir","acquireWithRetriesOrExit","cleanDistDir","telemetry","publicDir","pagesDir","app","encryptionKey","isBuild","isSrcDir","startsWith","hasPublicDir","record","webpackVersion","cliCommand","hasNowJson","cwd","isCustomServer","turboFlag","then","events","envInfo","experimentalFeatures","cacheComponents","dev","networkUrl","appUrl","logBundler","typeCheckingOptions","error","flush","validFileMatcher","pageExtensions","providedPagePaths","NEXT_PRIVATE_PAGE_PATHS","pagesPaths","Boolean","debugPathsSet","pagePath","has","middlewareDetectionRegExp","RegExp","proxyDetectionRegExp","instrumentationHookDetectionRegExp","rootDir","rootPaths","Array","from","some","include","test","instrumentationHookFilePath","proxyFilePath","middlewareFilePath","rootPath","name","fileBaseName","fileDir","isAtConventionLevel","absoluteProxyPath","absoluteMiddlewarePath","warnOnce","hasMiddlewareFile","hasProxyFile","previewProps","isDev","pagesType","PAGES","pagePaths","mappedAppPages","mappedAppLayouts","providedAppPaths","NEXT_PRIVATE_APP_PATHS","appPaths","layoutPaths","result","appPath","APP","mappedRootPaths","ROOT","pagesPageKeys","conflictingAppPagePaths","appPageKeys","appKey","normalizedAppPageKey","add","basePath","totalAppPagesCount","routeTypesFilePath","validatorFilePath","appRoutes","appRouteHandlers","layoutRoutes","slots","pageRoutes","pageApiRoutes","slotsFromPages","slotsFromDefaults","defaultPaths","mappedDefaultFiles","routeTypesManifest","numConflictingAppPaths","conflictingPublicFiles","hasPages404","hasApp404","hasAppGlobalError","hasCustomErrorPage","hasUserPagesRoutes","hasPublicUnderScoreNextDir","hasPublicPageFile","File","numConflicting","nestedReservedPages","match","restrictedRedirectPaths","isAppCacheComponentsEnabled","isAuthInterruptsEnabled","authInterrupts","isAppPPREnabled","ppr","routesManifestPath","sourcePages","Map","routesManifest","sortedRoutes","staticRoutes","pages404","caseSensitive","caseSensitiveRoutes","r","dataRoutes","i18n","rsc","header","varyHeader","prefetchHeader","didPostponeHeader","contentTypeHeader","suffix","prefetchSuffix","prefetchSegmentHeader","prefetchSegmentSuffix","prefetchSegmentDirSuffix","clientParamParsing","clientParamParsingOrigins","dynamicRSCPrerender","rewriteHeaders","pathHeader","queryHeader","skipProxyUrlNormalize","chain","clientRouterFilters","clientRouterFilter","nonInternalRedirects","internal","clientRouterFilterRedirects","clientRouterFilterAllowedRate","buildStage","pagesManifestPath","buildTraceContext","buildTracesPromise","useBuildWorker","webpackBuildWorker","webpack","runServerAndEdgeInParallel","parallelServerCompiles","collectServerBuildTracesInParallel","parallelServerBuildTraces","String","buildOptions","shutdownPromise","Promise","duration","compilerDuration","rest","NEXT_TURBOPACK_USE_WORKER","durationString","event","durationInSeconds","round","serverBuildPromise","res","buildTraceWorker","edgeRuntimeRoutes","catch","edgeBuildPromise","buildSpan","metadata","projectDir","collectingPageDataStart","hrtime","postCompileSpinner","buildManifestPath","staticAppPagesCount","serverAppPagesCount","edgeRuntimeAppCount","edgeRuntimePagesCount","ssgStaticFallbackPages","ssgBlockingFallbackPages","invalidPages","serverPropsPages","additionalPaths","staticPaths","appNormalizedPaths","fallbackModes","appDefaultConfigs","pageInfos","pagesManifest","buildManifest","appPathRoutes","appPathsManifest","key","NEXT_PHASE","worker","analysisBegin","staticCheckSpan","functionsConfigManifest","functions","customAppGetInitialProps","namedExports","isNextImageImported","hasNonStaticErrorPage","configFileName","sriEnabled","sri","algorithm","nonStaticErrorPageSpan","errorPageHasCustomGetInitialProps","hasCustomGetInitialProps","checkingApp","errorPageStaticResult","isPageStatic","httpAgentOptions","defaultLocale","nextConfigOutput","output","pprConfig","cacheLifeProfiles","cacheLife","cacheMaxMemorySize","appPageToCheck","customAppGetInitialPropsPromise","namedExportsPromise","getDefinedNamedExports","actionManifest","entriesWithAction","id","node","entry","workers","edge","all","pageType","checkPageSpan","actualPage","isRoutePPREnabled","isSSG","isStatic","isServerComponent","ssgPageRoutes","find","originalAppPath","originalPath","normalizedPath","pageFilePath","isInsideAppDir","staticInfo","hadUnsupportedValue","errorFromUnsupportedSegmentConfig","runtime","maxDuration","preferredRegion","regions","pageRuntime","client","edgeInfo","manifestKey","isPageStaticSpan","workerResult","parentId","getId","cacheHandler","cacheHandlers","isrFlushToDisk","set","isDynamic","prerenderedRoutes","appConfig","revalidate","hasGenerateStaticParams","params","encodedPathname","fallbackRouteParams","fallbackMode","prerenderFallbackMode","fallbackRootParams","throwOnEmptyStaticShell","dynamic","hasStaticProps","BLOCKING_STATIC_RENDER","PRERENDER","hasServerProps","delete","message","initialCacheControl","pageDuration","ssgPageDurations","hasEmptyStaticShell","errorPageResult","nonStaticErrorPage","returnValue","collectingPageDataEnd","setText","stopAndPersist","instrumentationHookEntryFiles","requiredServerFilesManifest","normalizedCacheHandlers","value","serverFilesManifest","configFile","compress","trustHostHeader","isExperimentalCompile","relativeAppDir","ignore","middlewareFile","split","matchers","middleware","regexp","originalSource","size","useStaticPages404","pg","optimizeCss","globOrig","cssFilePaths","reject","__NEXT_TEST_MODE","NEXT_PRIVATE_DEBUG_CACHE_ENTRY_HANDLERS","isAbsolute","features","featureName","invocationCount","nextScriptWorkers","isolatedDevBuild","feature","eventName","payload","notFoundRoutes","preview","tbdPrerenderRoutes","usedStaticStatusPages","forEach","hasPages500","useDefaultStatic500","combinedPages","isApp404Static","hasStaticApp404","isAppGlobalErrorStatic","hasStaticAppGlobalError","hasGSPAndRevalidateZero","staticGenerationSpan","sortedStaticPaths","a","b","localeCompare","exportConfig","exportPathMap","defaultMap","_pagesFallback","_ssgPath","get","isDynamicError","clientSegmentCache","_fallbackRouteParams","_isDynamicError","_isAppDir","_isRoutePPREnabled","_allowEmptyStaticShell","isSsg","isFallback","locale","_locale","exportResult","statusMessage","getFallbackMode","byPath","NOT_FOUND","getCacheControl","exportPath","defaultRevalidate","cacheControl","expire","expireTime","NEXT_SSG_FETCH_METRICS","traces","turborepoAccessTraceResults","values","ssgNotFoundPaths","serverBundle","unlink","ssgPageRoutesSet","hasRevalidateZero","isAppRouteHandler","htmlBotsRegexString","htmlLimitedBots","bypassFor","type","staticPrerenderedRoutes","dynamicPrerenderedRoutes","unsortedUnknownPrerenderRoutes","unsortedKnownPrerenderRoutes","prerenderedRoute","sortedUnknownPrerenderRoutes","sortedKnownPrerenderRoutes","hasPostponed","normalizedRoute","dataRoute","posix","prefetchDataRoute","meta","status","initialStatus","initialHeaders","renderingMode","PARTIALLY_STATIC","STATIC","experimentalPPR","experimentalBypassFor","initialRevalidateSeconds","initialExpireSeconds","allowHeader","pageInfo","dynamicRoute","skipInternalRouting","segmentPaths","pageSegmentPath","item","endsWith","builtSegmentDataRoute","destination","prefetchSegmentDataRoutes","hasFallbackRootParams","isDynamicAppRoute","fallbackCacheControl","fallbackRevalidate","fallbackExpire","fallbackStatus","fallbackHeaders","fallbackSourceRoute","dataRouteRegex","includeSuffix","excludeOptionalTrailingSlash","prefetchDataRouteRegex","moveExportedPage","originPage","ext","additionalSsgFile","orig","relativeDest","slice","dest","isNotFound","rename","localeExt","extname","relativeDestNoPages","curPath","updatedRelativeDest","updatedOrig","updatedDest","moveExportedAppNotFoundTo404","moveExportedAppGlobalErrorTo500","error500Html","isStaticSsgFallback","durationInfo","byPage","durationsByPath","hasHtmlOutput","localePage","pageFile","rm","force","finalizingPageOptimizationStart","postBuildSpinner","buildTracesSpinner","buildTracesStart","end","analysisEnd","staticPageCount","staticPropsPageCount","serverPropsPageCount","ssrPageCount","hasStatic404","hasReportWebVitals","rewritesCount","headersCount","redirectsCount","headersWithHasCount","rewritesWithHasCount","redirectsWithHasCount","middlewareCount","telemetryState","usages","packagesUsedInServerSideProps","useCacheTracker","tbdRoute","previewModeId","fetchCacheKeyPrefix","allowedRevalidateHeaderKeys","hasExportPathMap","exportTrailingSlash","trailingSlash","buildTracesEnd","adapterPath","nextVersion","tracingRoot","hasStatic500","finalizingPageOptimizationEnd","e","errorCode","getErrorCodeForTelemetry","cur","mode","isTurboSession","sync","Rspack","Webpack"],"mappings":"AAMA,OAAO,mCAAkC;AAEzC,SAASA,aAAa,QAA6B,YAAW;AAC9D,SAASC,IAAI,EAAEC,MAAM,QAAQ,oBAAmB;AAChD,SAASC,MAAM,QAAQ,+BAA8B;AACrD,SAASC,UAAU,EAAEC,YAAYC,EAAE,QAAQ,KAAI;AAC/C,OAAOC,QAAQ,KAAI;AACnB,SAASC,MAAM,QAAQ,gBAAe;AACtC,SAASC,aAAa,QAAQ,0BAAyB;AACvD,OAAOC,aAAa,6BAA4B;AAChD,OAAOC,YAAY,6BAA4B;AAC/C,SAASC,MAAM,QAAQ,sCAAqC;AAC5D,OAAOC,UAAU,OAAM;AACvB,SACEC,0CAA0C,EAC1CC,8BAA8B,EAC9BC,mBAAmB,EACnBC,cAAc,EACdC,eAAe,EACfC,6BAA6B,EAC7BC,mBAAmB,EACnBC,UAAU,EACVC,kBAAkB,EAClBC,2BAA2B,EAC3BC,0CAA0C,EAC1CC,sCAAsC,EACtCC,kCAAkC,EAClCC,mBAAmB,EACnBC,uBAAuB,EACvBC,kBAAkB,QACb,mBAAkB;AACzB,SAASC,QAAQ,EAAEC,UAAU,QAAQ,qBAAoB;AACzD,SAASC,YAAY,QAAQ,wBAAuB;AACpD,OAAOC,oBACLC,mBAAmB,QACd,4BAA2B;AAQlC,SAASC,WAAW,QAAQ,sBAAqB;AACjD,SAASC,mCAAmC,QAAQ,0BAAyB;AAC7E,SAASC,oBAAoB,QAAQ,gCAA+B;AACpE,SACEC,aAAa,EACbC,cAAc,EACdC,wBAAwB,EACxBC,aAAa,EACbC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,sBAAsB,EACtBC,kBAAkB,EAClBC,uBAAuB,EACvBC,eAAe,EACfC,gBAAgB,EAChBC,qBAAqB,EACrBC,mBAAmB,EACnBC,mBAAmB,EACnBC,kBAAkB,EAClBC,wBAAwB,EACxBC,gBAAgB,EAChBC,kBAAkB,EAClBC,8BAA8B,EAC9BC,yBAAyB,EACzBC,kCAAkC,EAClCC,yBAAyB,EACzBC,yBAAyB,EACzBC,oBAAoB,EACpBC,oCAAoC,QAC/B,0BAAyB;AAChC,SACEC,0BAA0B,EAC1BC,gCAAgC,EAChCC,mCAAmC,QAC9B,gCAA+B;AACtC,SAASC,cAAc,QAAQ,6BAA4B;AAC3D,SAASC,OAAO,EAAEC,yBAAyB,QAAQ,iBAAgB;AAEnE,OAAOC,gBAAgB,mBAAkB;AAEzC,SAASC,iBAAiB,QAAQ,8CAA6C;AAC/E,SAASC,WAAW,QAAQ,oBAAmB;AAC/C,YAAYC,mBAAmB,oBAAmB;AAClD,SACEC,oBAAoB,EACpBC,0BAA0B,EAC1BC,+BAA+B,QAC1B,2BAA0B;AAEjC,SACEC,kBAAkB,EAClBC,eAAe,EACfC,sBAAsB,EACtBC,gBAAgB,EAChBC,yBAAyB,EACzBC,oCAAoC,EACpCC,mBAAmB,EACnBC,gBAAgB,QACX,sBAAqB;AAE5B,SAASC,SAAS,QAAQ,uBAAsB;AAChD,SACEC,kBAAkB,EAClBC,eAAe,EACfC,iBAAiB,EACjBC,gBAAgB,EAChBC,mBAAmB,EACnBC,yBAAyB,EACzBC,4BAA4B,EAC5BC,YAAY,EAGZC,iBAAiB,QACZ,YAAW;AAClB,SAASC,cAAc,QAAQ,sBAAqB;AACpD,SAASC,6BAA6B,QAAQ,sCAAqC;AACnF,SAASC,UAAU,QAAQ,oBAAmB;AAC9C,SAASC,eAAe,QAAQ,sBAAqB;AACrD,SAASC,WAAW,QAAQ,iBAAgB;AAC5C,YAAYC,SAAS,eAAc;AACnC,OAAOC,mBAAmB,YAAW;AACrC,SAASC,KAAK,EAAEC,cAAc,EAAEC,SAAS,QAAmB,WAAU;AACtE,SACEC,sBAAsB,EACtBC,iBAAiB,EACjBC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,gBAAgB,EAChBC,6BAA6B,EAC7BC,WAAW,EACXC,WAAW,QACN,UAAS;AAIhB,SAASC,YAAY,QAAQ,mBAAkB;AAC/C,SAASC,mBAAmB,QAAQ,2CAA0C;AAC9E,OAAOC,aAAa,kBAAiB;AAErC,SAASC,aAAa,QAAQ,yBAAwB;AACtD,SAASC,aAAa,QAAQ,wBAAuB;AACrD,SAASC,oBAAoB,EAAEC,uBAAuB,QAAQ,QAAO;AACrE,SAASC,kBAAkB,QAAQ,yCAAwC;AAC3E,SAASC,aAAa,QAAQ,0BAAyB;AACvD,SAASC,eAAe,QAAQ,kCAAiC;AACjE,SAASC,gBAAgB,QAAQ,uCAAsC;AACvE,SACEC,aAAa,EACbC,2BAA2B,EAC3BC,UAAU,EACVC,uBAAuB,EACvBC,6BAA6B,EAC7BC,wBAAwB,EACxBC,mCAAmC,EACnCC,0BAA0B,EAC1BC,2BAA2B,QACtB,0CAAyC;AAChD,SAASC,YAAY,QAAQ,kBAAiB;AAC9C,SAASC,gBAAgB,QAA0B,kBAAiB;AACpE,SAASC,gBAAgB,QAAQ,6CAA4C;AAC7E,SAASC,eAAe,QAAQ,4BAA2B;AAC3D,SAASC,wBAAwB,QAAQ,qCAAoC;AAC7E,SAASC,sBAAsB,QAAQ,+BAA8B;AACrE,SAASC,iBAAiB,QAAQ,eAAc;AAChD,SAASC,kCAAkC,QAAQ,+CAA8C;AAEjG,SAASC,cAAc,QAAQ,8CAA6C;AAC5E,SAASC,kBAAkB,QAAQ,yBAAwB;AAE3D,SAASC,cAAc,QAAQ,wCAAuC;AACtE,SACEC,sBAAsB,EACtBC,sBAAsB,EACtBC,kBAAkB,QACb,mCAAkC;AACzC,SAASC,kBAAkB,EAAEC,YAAY,QAAQ,6BAA4B;AAE7E,SAASC,qBAAqB,QAAQ,kBAAiB;AACvD,SAASC,gBAAgB,QAAQ,4BAA2B;AAC5D,SAASC,gBAAgB,QAAQ,sBAAqB;AACtD,SAASC,2BAA2B,QAAQ,+CAA8C;AAE1F,OAAOC,iBAAiB,wBAAuB;AAC/C,SACEC,oBAAoB,EACpBC,sBAAsB,QACjB,iCAAgC;AACvC,SAASC,YAAY,EAAEC,2BAA2B,QAAQ,kBAAiB;AAC3E,SAASC,aAAa,QAAQ,mBAAkB;AAChD,SAASC,cAAc,QAAQ,gCAA+B;AAC9D,SAASC,6BAA6B,QAAQ,oCAAmC;AAEjF,SACEC,oCAAoC,EACpCC,6BAA6B,QAExB,+DAA8D;AAErE,SAASC,cAAc,QAAQ,oBAAmB;AAClD,SAASC,gCAAgC,QAAQ,gCAA+B;AAChF,SAASC,eAAe,QAAQ,2BAA0B;AAC1D,SAASC,iBAAiB,QAAQ,oBAAmB;AACrD,SAASC,gBAAgB,EAAEC,sBAAsB,QAAQ,uBAAsB;AAC/E,SAASC,YAAY,QAAQ,kBAAiB;AAC9C,SAASC,oBAAoB,QAAQ,+BAA8B;AACnE,SAASC,yBAAyB,QAAQ,6BAA4B;AACtE,SAASC,mBAAmB,QAAQ,sBAAqB;AACzD,SAASC,mBAAmB,QAAQ,2BAA0B;AAC9D,SACEC,eAAe,EACfC,SAAS,EACTC,wBAAwB,QACnB,6CAA4C;AACnD,SAASC,KAAK,QAAQ,cAAa;AACnC,SACEC,wBAAwB,EACxBC,uBAAuB,EACvBC,kBAAkB,QACb,+CAA8C;AACrD,SAASC,QAAQ,QAAQ,aAAY;AAiIrC;;;CAGC,GACD,MAAMC,kBAA4B;IAChC;IACA5J;IACAJ;IACAC;IACAE;IACAD;CACD;AA6JD,SAAS+J,YACPC,IAAY,EACZC,UAAmB;IAEnB,MAAMC,aAAalE,mBAAmBgE,MAAM;QAC1CG,iBAAiB;IACnB;IACA,OAAO;QACLF;QACAD;QACAI,OAAO3J,oBAAoByJ,WAAWG,EAAE,CAACC,MAAM;QAC/CC,WAAWL,WAAWK,SAAS;QAC/BC,YAAYN,WAAWM,UAAU;IACnC;AACF;AAEA,SAASC,YAAYC,OAAe;IAClC,MAAMC,WAAWvL,KAAKwL,IAAI,CAACF,SAAS;IACpC,IAAI1H,cAAc6H,IAAI,IAAI,CAAC7H,cAAc8H,cAAc,EAAE;QACvD,MAAMC,WAAWpM,WAAWgM;QAE5B,IAAI,CAACI,UAAU;YACb,kGAAkG;YAClG,sBAAsB;YACtBC,QAAQC,GAAG,CACT,GAAGtG,IAAIuG,QAAQ,CAACC,IAAI,CAAC,+HAA+H,CAAC;QAEzJ;IACF;IACA,OAAOR;AACT;AAEA,eAAeS,cAAcC,QAAgB,EAAEC,OAAe;IAC5D,MAAMzM,GAAG0M,SAAS,CAACF,UAAUC,SAAS;AACxC;AAEA,SAASE,aAAaH,QAAgB;IACpC,OAAOxM,GAAG4M,QAAQ,CAACJ,UAAU;AAC/B;AAEA,eAAeK,cACbL,QAAgB,EAChBM,QAAW;IAEX,MAAMP,cAAcC,UAAU9D,eAAeoE;AAC/C;AAEA,eAAeC,aAA+BP,QAAgB;IAC5D,OAAOQ,KAAKC,KAAK,CAAC,MAAMN,aAAaH;AACvC;AAEA,eAAeU,uBACbrB,OAAe,EACfiB,QAAyC;IAEzC,MAAMD,cAActM,KAAKwL,IAAI,CAACF,SAASrJ,qBAAqBsK;AAC9D;AAEA,eAAeK,uBACbC,iBAAkD,EAClD,EACEC,OAAO,EACPxB,OAAO,EACPyB,OAAO,EAKR;IAED,MAAMC,WAAW,IAAIC,IACnB;WACKC,OAAOC,OAAO,CAACN,kBAAkBO,MAAM,CACxC,4BAA4B;SAC3BC,MAAM,CAAC,CAAC,GAAG,EAAEC,QAAQ,EAAE,CAAC,GAAKA,YAAY,MACzCC,GAAG,CAAC,CAAC,CAACC,MAAM,GAAKlH,oBAAoBkH,OAAOT,SAASU,QAAQ;WAC7DP,OAAOQ,IAAI,CAACb,kBAAkBc,aAAa;KAC/C,CAACC,IAAI;IAGR,MAAMC,2BAA2B,CAAC,oBAAoB,EAAEhO,QACtDmN,UACA,iDAAiD,CAAC;IAEpD,MAAMhB,cACJhM,KAAKwL,IAAI,CAACF,SAAS3J,0BAA0BmL,SAAS,oBACtDe;AAEJ;AAoBA,eAAeC,6BACbxC,OAAe,EACfiB,QAAiC;IAEjC,MAAMD,cACJtM,KAAKwL,IAAI,CAACF,SAASlJ,kBAAkBY,4BACrCuJ;AAEJ;AAWA,eAAewB,iCACbzC,OAAe,EACf0C,mBAAgD;IAEhD,MAAM1B,cACJtM,KAAKwL,IAAI,CAACF,SAASjJ,wBACnB2L;AAEJ;AAEA,eAAeC,oBACb3C,OAAe,EACf4C,MAA0B;QAODA,gBAUrBA;IAfJ,MAAMC,SAAS;QAAE,GAAGD,OAAOC,MAAM;IAAC;IAClC,MAAM,EAAEC,WAAW,EAAEC,UAAU,EAAE,GAAGF;IAClCA,OAAeG,KAAK,GAAG;WAAIF;WAAgBC;KAAW;IAExD,8DAA8D;IAC9DF,OAAOI,cAAc,GAAG,AAACL,CAAAA,CAAAA,2BAAAA,iBAAAA,OAAQC,MAAM,qBAAdD,eAAgBK,cAAc,KAAI,EAAE,AAAD,EAAGhB,GAAG,CAAC,CAACiB;YAExDA;eAF+D;YACzE,iEAAiE;YACjEC,QAAQ,GAAED,cAAAA,EAAEC,QAAQ,qBAAVD,YAAYE,OAAO,CAAC,MAAM;YACpCC,UAAUrP,OAAOkP,EAAEG,QAAQ,EAAEzD,MAAM;YACnC0D,MAAMJ,EAAEI,IAAI;YACZnB,UAAUnO,OAAOkP,EAAEf,QAAQ,IAAI,MAAM;gBAAEoB,KAAK;YAAK,GAAG3D,MAAM;YAC1D4D,QAAQN,EAAEM,MAAM;QAClB;;IAEA,oEAAoE;IACpE,IAAIZ,2BAAAA,kBAAAA,OAAQC,MAAM,qBAAdD,gBAAgBa,aAAa,EAAE;QACjCZ,OAAOY,aAAa,GAAGb,OAAOC,MAAM,CAACY,aAAa,CAACxB,GAAG,CAAC,CAACiB,IAAO,CAAA;gBAC7D,gEAAgE;gBAChEf,UAAUnO,OAAOkP,EAAEf,QAAQ,IAAI,MAAM;oBAAEoB,KAAK;gBAAK,GAAG3D,MAAM;gBAC1D4D,QAAQN,EAAEM,MAAM;YAClB,CAAA;IACF;IAEA,MAAMxC,cAActM,KAAKwL,IAAI,CAACF,SAASxJ,kBAAkB;QACvDkN,SAAS;QACTb;IACF;AACF;AAEA,MAAMc,uBAAuB;AAC7B,eAAeC,yBACbC,aAAmB,EACnB7D,OAAe,EACf8D,QAAwD,EACxDC,oBAA0C,EAC1CC,qBAA6B,EAC7BtB,mBAAgD,EAChDuB,kBAAsC,EACtCC,iBAA0B,EAC1BC,sBAA+B,EAC/BC,WAAwB,EACxBC,cAA8B,EAC9BC,MAA0B;IAE1B,MAAMT,cACHU,UAAU,CAAC,8BACXC,YAAY,CAAC;QACZ,MAAM/J,gBACJ,kFAAkF;QAClFiI,oBAAoB4B,MAAM,EAC1BtE,SACA8D,SAASW,KAAK,EACdV,sBACAC,uBACAtB,oBAAoBE,MAAM,EAC1BqB,oBACAC,mBACAC,wBACAC;QAGF,KAAK,MAAMM,QAAQ;eACdhC,oBAAoBiC,KAAK;YAC5BjQ,KAAKwL,IAAI,CAACwC,oBAAoBE,MAAM,CAAC5C,OAAO,EAAEjJ;eAC3CsN,eAAeO,MAAM,CAAW,CAACC,KAAKC;gBACvC,IAAI;oBAAC;oBAAQ;iBAAkB,CAACC,QAAQ,CAACD,QAAQpQ,IAAI,GAAG;oBACtDmQ,IAAIG,IAAI,CAACF,QAAQpQ,IAAI;gBACvB;gBACA,OAAOmQ;YACT,GAAG,EAAE;SACN,CAAE;YACD,kFAAkF;YAClF,MAAMlE,WAAWjM,KAAKwL,IAAI,CAACwC,oBAAoB4B,MAAM,EAAEI;YACvD,MAAMO,aAAavQ,KAAKwL,IAAI,CAC1BF,SACA2D,sBACAjP,KAAKwQ,QAAQ,CAAClB,uBAAuBrD;YAEvC,MAAMxM,GAAG4K,KAAK,CAACrK,KAAKyQ,OAAO,CAACF,aAAa;gBACvCG,WAAW;YACb;YACA,MAAMjR,GAAGkR,QAAQ,CAAC1E,UAAUsE;QAC9B;QAEA,IAAIf,mBAAmB;YACrB,MAAMoB,mBAAmB5Q,KAAKwL,IAAI,CAChCF,SACA2D,sBACAjP,KAAKwQ,QAAQ,CAAClB,uBAAuBhE,UACrClJ,kBACA;YAGF,MAAM3C,GAAG4K,KAAK,CAACrK,KAAKyQ,OAAO,CAACG,mBAAmB;gBAAEF,WAAW;YAAK;YACjE,MAAMjR,GAAGkR,QAAQ,CACf3Q,KAAKwL,IAAI,CAACF,SAASlJ,kBAAkB,kBACrCwO;QAEJ;QAEA,MAAMC,mBAAmB7Q,KAAKwL,IAAI,CAACF,SAASlJ,kBAAkB;QAE9D,IAAI7C,WAAWsR,mBAAmB;YAChC,MAAMpK,cACJoK,kBACA7Q,KAAKwL,IAAI,CACPF,SACA2D,sBACAjP,KAAKwQ,QAAQ,CAAClB,uBAAuBhE,UACrClJ,kBACA,UAEF;gBAAE0O,WAAW;YAAK;QAEtB;QAEA,IAAIlB,QAAQ;YACV,MAAMmB,oBAAoB/Q,KAAKwL,IAAI,CAACF,SAASlJ,kBAAkB;YAC/D,IAAI7C,WAAWwR,oBAAoB;gBACjC,MAAMtK,cACJsK,mBACA/Q,KAAKwL,IAAI,CACPF,SACA2D,sBACAjP,KAAKwQ,QAAQ,CAAClB,uBAAuBhE,UACrClJ,kBACA,QAEF;oBAAE0O,WAAW;gBAAK;YAEtB;QACF;IACF;AACJ;AAEA,SAASE,mBAAmB9C,MAA0B;IACpD,IACEA,OAAO+C,YAAY,CAACC,IAAI,IACxBhD,OAAO+C,YAAY,CAACC,IAAI,KAAKtR,cAAcqR,YAAY,CAAEC,IAAI,EAC7D;QACA,OAAOhD,OAAO+C,YAAY,CAACC,IAAI;IACjC;IAEA,IAAIhD,OAAO+C,YAAY,CAACE,uBAAuB,EAAE;QAC/C,OAAOC,KAAKC,GAAG,CACbD,KAAKE,GAAG,CAACpD,OAAO+C,YAAY,CAACC,IAAI,IAAI,GAAGE,KAAKG,KAAK,CAAC7R,GAAG8R,OAAO,KAAK,OAClE,iCAAiC;QACjC;IAEJ;IAEA,IAAItD,OAAO+C,YAAY,CAACC,IAAI,EAAE;QAC5B,OAAOhD,OAAO+C,YAAY,CAACC,IAAI;IACjC;IAEA,qDAAqD;IACrD,OAAO;AACT;AAEA,MAAMO,mBAAmBC,QAAQC,OAAO,CAAC;AACzC,MAAMC,6BAA6B;IACjC;IACA;IACA;IACA;CACD;AAED,OAAO,SAASC,mBACd3D,MAA0B,EAC1B4D,OAMC;IAED,MAAM,EAAEC,kBAAkB,EAAEC,QAAQ,EAAE,GAAGF;IACzC,OAAO,IAAInS,OAAO8R,kBAAkB;QAClCQ,QAAQ1M;QACR2M,YAAYlB,mBAAmB9C;QAC/BiE,YAAY;YACVH,4BAAAA,SAAUI,GAAG;QACf;QACAC,iBAAiB;YACfL,4BAAAA,SAAUM,KAAK;QACjB;QACAP;QACAQ,kBAAkBrE,OAAOsE,yBAAyB;QAClD,kEAAkE;QAClEC,gBAAgB;QAChBC,qBAAqBxE,OAAO+C,YAAY,CAAC0B,aAAa;QACtDC,gBAAgBhB;IAClB;AACF;AAEA,eAAeiB,uBACb3E,MAA0B,EAC1B4E,GAAW,EACXC,kBAA0C,EAC1CC,YAAoB,EACpB7D,aAAmB,EACnB8D,UAAmB;IAEnB,MAAMC,YAAY,AAACxB,QAAQ,aACxByB,OAAO;IAEV,MAAMD,UACJJ,KACA;QACEM,aAAa;QACbC,YAAYnF;QACZ6E;QACAO,QAAQ;QACRC,QAAQvT,KAAKwL,IAAI,CAACsH,KAAKE;QACvBd,YAAYlB,mBAAmB9C;QAC/B+E;IACF,GACA9D;AAEJ;AAEA,eAAeqE,WACbC,cAAuB,EACvBnI,OAAe,EACf6D,aAAmB,EACnBjB,MAA0B;IAE1B,IAAIuF,gBAAgB;QAClB,OAAO,MAAMhU,GAAG4M,QAAQ,CAACrM,KAAKwL,IAAI,CAACF,SAAS,aAAa;IAC3D;IACA,OAAO,MAAM6D,cACVU,UAAU,CAAC,oBACXC,YAAY,CAAC,IAAMzK,gBAAgB6I,OAAO7I,eAAe,EAAEtF;AAChE;AAEA,eAAe,eAAe2T,MAC5BZ,GAAW,EACXa,2BAA2B,KAAK,EAChCC,cAAc,KAAK,EACnBC,iBAAiB,KAAK,EACtBC,aAAa,KAAK,EAClBb,aAAa,KAAK,EAClBc,UAAUxQ,QAAQyQ,SAAS,EAC3BC,qBAA0E,EAC1EC,cAAkC,EAClCC,kBAA6B,EAC7BC,mBAA8B;IAE9B,MAAMC,gBAAgBJ,0BAA0B;IAChD,MAAMR,iBAAiBQ,0BAA0B;IACjDvM,iBAAiB2M,aAAa,GAAGA;IACjC,MAAMC,iBAAiBC,KAAKC,GAAG;IAE/B,IAAIC;IACJ,IAAI;QACF,MAAMtF,gBAAgB1J,MAAM,cAAciP,WAAW;YACnDC,WAAWV;YACXjF,SAAS4F,QAAQC,GAAG,CAACC,cAAc;QACrC;QAEApN,iBAAiByH,aAAa,GAAGA;QACjCzH,iBAAiBoL,GAAG,GAAGA;QACvBpL,iBAAiBuL,UAAU,GAAGA;QAC9BvL,iBAAiBiM,wBAAwB,GAAGA;QAC5CjM,iBAAiBoM,UAAU,GAAGA;QAC9BpM,iBAAiBmM,cAAc,GAAGA;QAElC,MAAM1E,cAAcW,YAAY,CAAC;gBAijBXiF,kBAKlBA;YArjBF,4EAA4E;YAC5E,MAAM,EAAEpF,cAAc,EAAE,GAAGR,cACxBU,UAAU,CAAC,eACXmF,OAAO,CAAC,IAAM7V,cAAc2T,KAAK,OAAOvN;YAC3CmC,iBAAiBiI,cAAc,GAAGA;YAElC,MAAMsF,6BAA6B,IAAInR;YACvC,MAAMoK,SAA6B,MAAMiB,cACtCU,UAAU,CAAC,oBACXC,YAAY,CAAC,IACZjM,qBACE,IACEJ,WAAWzB,wBAAwB8Q,KAAK;wBACtC,sCAAsC;wBACtCQ,QAAQ;wBACRK;wBACAE;oBACF,IACFoB;YAGNR,eAAevG;YAEf,4FAA4F;YAC5F6F,UAAUvQ,0BAA0BuQ;YACpC5E,cAAc+F,YAAY,CAAC,WAAWC,uBAAuBpB;YAE7Da,QAAQC,GAAG,CAACO,kBAAkB,GAAGlH,OAAOmH,YAAY,IAAI;YACxD3N,iBAAiBwG,MAAM,GAAGA;YAE1B,IAAI8E,eAAe;YACnB,IAAIvK,sBAAsByF,SAAS;gBACjC8E,eAAe9E,OAAO5C,OAAO;gBAC7B4C,OAAO5C,OAAO,GAAG;YACnB;YACA,MAAMA,UAAUtL,KAAKwL,IAAI,CAACsH,KAAK5E,OAAO5C,OAAO;YAC7C5D,iBAAiB4D,OAAO,GAAGA;YAC3B3F,UAAU,SAAS3D;YACnB2D,UAAU,WAAW2F;YAErB,MAAMwB,UAAU,MAAM0G,WACpBC,gBACAnI,SACA6D,eACAjB;YAEFxG,iBAAiBoF,OAAO,GAAGA;YAE3B,IAAImH,0BAA0B,gBAAgB;gBAC5C,IAAIF,YAAYxQ,QAAQyQ,SAAS,EAAE;oBACjCzO,IAAIwG,IAAI,CAAC;oBACT6I,QAAQU,IAAI,CAAC;gBACf;gBACA/P,IAAIgQ,IAAI,CAAC;gBACT,MAAMpG,cACHU,UAAU,CAAC,qBACXC,YAAY,CAAC;oBACZ,MAAMrG,gBAAgB;wBACpB6B;wBACA4C;oBACF;gBACF;gBAEF3I,IAAIgQ,IAAI,CAAC;gBACT,MAAM7P;gBACNiB;gBACAiO,QAAQU,IAAI,CAAC;YACf;YAEA,yDAAyD;YACzD,yCAAyC;YACzC,IAAIjB,iBAAiBZ,gBAAgB;gBACnC/J,kBAAkBwE;YACpB;YAEA,MAAMsH,eAA6B,MAAMrG,cACtCU,UAAU,CAAC,sBACXC,YAAY,CAAC,IAAM1O,iBAAiB8M;YAEvC,MAAM,EAAEuH,OAAO,EAAEC,QAAQ,EAAEC,SAAS,EAAE,GAAGH;YACzC,MAAMI,mBAA8B;mBAC/BF,SAASG,WAAW;mBACpBH,SAASI,UAAU;mBACnBJ,SAASK,QAAQ;aACrB;YACD,MAAMC,cAAcJ,iBAAiBK,MAAM,GAAG;YAC9CvO,iBAAiBsO,WAAW,GAAGA;YAC/BtO,iBAAiBwO,gBAAgB,GAAGhI,OAAOiI,iBAAiB;YAC5DzO,iBAAiB0O,iBAAiB,GAAGlI,OAAOmI,kBAAkB;YAE9D,MAAMC,iBAAiB,MAAMnH,cAC1BU,UAAU,CAAC,mBACXC,YAAY,CAAC;gBACZ,IAAI;oBACF,MAAMrQ,GAAG4K,KAAK,CAACiB,SAAS;wBAAEoF,WAAW;oBAAK;oBAC1C,OAAO;gBACT,EAAE,OAAO6F,KAAK;oBACZ,IAAIhQ,QAAQgQ,QAAQA,IAAIC,IAAI,KAAK,SAAS;wBACxC,OAAO;oBACT;oBACA,MAAMD;gBACR;YACF;YAEF,IAAI,CAACD,kBAAkB,CAAE,MAAMhR,YAAYgG,UAAW;gBACpD,MAAM,qBAEL,CAFK,IAAImL,MACR,iGADI,qBAAA;2BAAA;gCAAA;kCAAA;gBAEN;YACF;YAEA,IAAIvI,OAAO+C,YAAY,CAACyF,WAAW,EAAE;gBACnC,uFAAuF;gBACvF,gBAAgB;gBAChB,MAAMjM,SAASkM,wBAAwB,CACrC3W,KAAKwL,IAAI,CAACF,SAAS,SACnB;YAEJ;YAEA,IAAI4C,OAAO0I,YAAY,IAAI,CAACnD,gBAAgB;gBAC1C,MAAMtE,cACHU,UAAU,CAAC,SACXC,YAAY,CAAC,IACZvO,oCAAoC+J,SAAS;YAEnD;YAEA,MAAMC,WAAWF,YAAYC;YAE7B,MAAMuL,YAAY,IAAIrS,UAAU;gBAAE8G;YAAQ;YAE1C3F,UAAU,aAAakR;YAEvB,MAAMC,YAAY9W,KAAKwL,IAAI,CAACsH,KAAK;YACjC,MAAM,EAAEiE,QAAQ,EAAEnH,MAAM,EAAE,GAAGzO,aAAa2R;YAE1C,IAAI,CAACG,cAAc,CAAC8D,UAAU;gBAC5B9D,aAAa;YACf;YAEAvL,iBAAiBqP,QAAQ,GAAGA;YAC5BrP,iBAAiBkI,MAAM,GAAGA;YAE1B,MAAMmD,qBAA6C;gBACjDiE,KAAK,OAAOpH,WAAW;gBACvBG,OAAO,OAAOgH,aAAa;YAC7B;YAEA,mDAAmD;YACnD,wFAAwF;YACxF,MAAME,gBAAgB,MAAMrO,4BAA4B;gBACtDsO,SAAS;gBACT5L;YACF;YACA5D,iBAAiBuP,aAAa,GAAGA;YAEjC,MAAME,WAAWnX,KACdwQ,QAAQ,CAACsC,KAAKiE,YAAYnH,UAAU,IACpCwH,UAAU,CAAC;YACd,MAAMC,eAAe9X,WAAWuX;YAEhCD,UAAUS,MAAM,CACdrT,gBAAgBiK,QAAQ;gBACtBqJ,gBAAgB;gBAChBC,YAAY;gBACZL;gBACAM,YAAY,CAAC,CAAE,MAAM3X,OAAO,YAAY;oBAAE4X,KAAK5E;gBAAI;gBACnD6E,gBAAgB;gBAChBC,WAAW;gBACXb,UAAU,CAAC,CAACA;gBACZnH,QAAQ,CAAC,CAACA;YACZ;YAGFzL,iBAAiBnE,KAAK2R,OAAO,CAACmB,MAAM+E,IAAI,CAAC,CAACC,SACxCjB,UAAUS,MAAM,CAACQ;YAGnBhR,gBAAgB9G,KAAK2R,OAAO,CAACmB,MAAM5E,QAAQ2J,IAAI,CAAC,CAACC,SAC/CjB,UAAUS,MAAM,CAACQ;YAGnB,qDAAqD;YACrD,MAAM,EAAEC,OAAO,EAAEC,oBAAoB,EAAEC,eAAe,EAAE,GACtD,MAAM1P,mBAAmB;gBACvBuK;gBACAoF,KAAK;gBACLrE;YACF;YAEFrL,aAAa;gBACX2P,YAAY;gBACZC,QAAQ;gBACRL;gBACAC;gBACAK,YAAY;gBACZJ;YACF;YAEA,MAAMK,sBAA+D;gBACnExF;gBACAlD;gBACAmH;gBACAF;gBACA1H;gBACAjB;gBACA3C;YACF;YAEA,IAAIqE,UAAU,mBAAmB1B,QAAQ;gBACvC3I,IAAIgT,KAAK,CACP;gBAEF,MAAM1B,UAAU2B,KAAK;gBACrB5D,QAAQU,IAAI,CAAC;YACf;YAEA,MAAMmD,mBAAmB3Q,uBACvBoG,OAAOwK,cAAc,EACrB9I;YAGF,MAAM+I,oBAA8BlM,KAAKC,KAAK,CAC5CkI,QAAQC,GAAG,CAAC+D,uBAAuB,IAAI;YAGzC,IAAIC,aAAaC,QAAQlE,QAAQC,GAAG,CAAC+D,uBAAuB,IACxDD,oBACA,CAAC1F,cAAc8D,WACb,MAAM5H,cACHU,UAAU,CAAC,iBACXC,YAAY,CAAC,IAAM7K,kBAAkB8R,UAAU0B,qBAClD,EAAE;YAER,8CAA8C;YAC9C,gFAAgF;YAChF,IAAIrE,wBAAwBM,WAAW;gBACrC,IAAIN,oBAAoB6B,MAAM,GAAG,GAAG;oBAClC,MAAM8C,gBAAgB,IAAI9L,IAAImH;oBAC9ByE,aAAaA,WAAWxL,MAAM,CAAC,CAAC2L,WAC9BD,cAAcE,GAAG,CAACD;gBAEtB,OAAO;oBACL,mCAAmC;oBACnCH,aAAa,EAAE;gBACjB;YACF;YAEA,MAAMK,4BAA4B,IAAIC,OACpC,CAAC,CAAC,EAAEhZ,oBAAoB,MAAM,EAAE+N,OAAOwK,cAAc,CAAClN,IAAI,CAAC,KAAK,EAAE,CAAC;YAGrE,MAAM4N,uBAAuB,IAAID,OAC/B,CAAC,CAAC,EAAE/Y,eAAe,MAAM,EAAE8N,OAAOwK,cAAc,CAAClN,IAAI,CAAC,KAAK,EAAE,CAAC;YAGhE,MAAM6N,qCAAqC,IAAIF,OAC7C,CAAC,CAAC,EAAE7Y,8BAA8B,MAAM,EAAE4N,OAAOwK,cAAc,CAAClN,IAAI,CAClE,KACA,EAAE,CAAC;YAGP,MAAM8N,UAAUtZ,KAAKwL,IAAI,CAAEuL,YAAYnH,QAAU;YACjD,MAAMS,WAAW;gBACf6I;gBACAE;gBACAC;aACD;YAED,MAAME,YAAYC,MAAMC,IAAI,CAAC,MAAM5S,cAAcyS,UAC9CjM,MAAM,CAAC,CAAC2C,OAASK,SAASqJ,IAAI,CAAC,CAACC,UAAYA,QAAQC,IAAI,CAAC5J,QACzDpC,IAAI,CAAC1I,eAAegJ,OAAOwK,cAAc,GACzCnL,GAAG,CAAC,CAACyC,OAAShQ,KAAKwL,IAAI,CAAC8N,SAAStJ,MAAMtB,OAAO,CAACoE,KAAK;YAEvD,IAAI+G;YACJ,IAAIC;YACJ,IAAIC;YAEJ,KAAK,MAAMC,YAAYT,UAAW;gBAChC,MAAM,EAAEU,MAAMC,YAAY,EAAEpH,KAAKqH,OAAO,EAAE,GAAGna,KAAK0M,KAAK,CAACsN;gBACxD,MAAMI,sBAAsBD,YAAY,OAAOA,YAAY;gBAE3D,IAAIC,uBAAuBF,iBAAiB/Z,qBAAqB;oBAC/D4Z,qBAAqBC;gBACvB;gBACA,IAAII,uBAAuBF,iBAAiB9Z,gBAAgB;oBAC1D0Z,gBAAgBE;gBAClB;gBACA,IACEI,uBACAF,iBAAiB5Z,+BACjB;oBACAuZ,8BAA8BG;gBAChC;YACF;YAEA,IAAID,oBAAoB;gBACtB,IAAID,eAAe;oBACjB,MAAMpC,MAAM9C,QAAQ8C,GAAG;oBACvB,MAAM2C,oBAAoBra,KAAKwL,IAAI,CAAC8N,SAASQ;oBAC7C,MAAMQ,yBAAyBta,KAAKwL,IAAI,CAAC8N,SAASS;oBAElD,MAAM,qBAEL,CAFK,IAAItD,MACR,CAAC,KAAK,EAAEtW,oBAAoB,SAAS,EAAEH,KAAKwQ,QAAQ,CAACkH,KAAK4C,wBAAwB,MAAM,EAAEla,eAAe,SAAS,EAAEJ,KAAKwQ,QAAQ,CAACkH,KAAK2C,mBAAmB,8BAA8B,EAAEra,KAAKwQ,QAAQ,CAACkH,KAAK2C,mBAAmB,wEAAwE,CAAC,GADrS,qBAAA;+BAAA;oCAAA;sCAAA;oBAEN;gBACF;gBACA9U,IAAIgV,QAAQ,CACV,CAAC,KAAK,EAAEpa,oBAAoB,6CAA6C,EAAEC,eAAe,2EAA2E,CAAC;YAE1K;YAEA,MAAMqP,yBAAyBqJ,QAAQe;YACvC,MAAMW,oBAAoB1B,QAAQiB;YAClC,MAAMU,eAAe3B,QAAQgB;YAE7BpS,iBAAiB+H,sBAAsB,GAAGA;YAE1C,MAAMiL,eAAkC,MAAM1Q,oBAAoB;gBAChEkN,SAAS;gBACT5L;YACF;YACA5D,iBAAiBgT,YAAY,GAAGA;YAEhC,MAAM3F,cAAc,MAAM5F,cACvBU,UAAU,CAAC,wBACXC,YAAY,CAAC,IACZrL,mBAAmB;oBACjBkW,OAAO;oBACPjC,gBAAgBxK,OAAOwK,cAAc;oBACrCkC,WAAWxV,WAAWyV,KAAK;oBAC3BC,WAAWjC;oBACX9B;oBACAnH;oBACAqD;gBACF;YAEJvL,iBAAiBqN,WAAW,GAAGA;YAE/B,IAAIgG;YACJ,IAAIC;YACJ,IAAI3L;YAEJ,IAAIO,QAAQ;gBACV,MAAMqL,mBAA6BxO,KAAKC,KAAK,CAC3CkI,QAAQC,GAAG,CAACqG,sBAAsB,IAAI;gBAGxC,IAAIC;gBACJ,IAAIC;gBAEJ,IAAItC,QAAQlE,QAAQC,GAAG,CAACqG,sBAAsB,GAAG;oBAC/C,mBAAmB;oBACnBC,WAAWF;oBACXG,cAAc,EAAE;gBAClB,OAAO;oBACL,gFAAgF;oBAChF,MAAMC,SAAS,MAAMlM,cAClBU,UAAU,CAAC,qBACXC,YAAY,CAAC,IAAMpL,gBAAgBkL,QAAQ6I;oBAE9C0C,WAAWE,OAAOF,QAAQ;oBAC1BC,cAAcC,OAAOD,WAAW;oBAEhC,8CAA8C;oBAC9C,mFAAmF;oBACnF,IAAIjH,uBAAuBO,WAAW;wBACpC,IAAIP,mBAAmB8B,MAAM,GAAG,GAAG;4BACjC,MAAM8C,gBAAgB,IAAI9L,IAAIkH;4BAC9BgH,WAAWA,SAAS9N,MAAM,CAAC,CAACiO,UAC1BvC,cAAcE,GAAG,CAACqC;wBAEtB,OAAO;4BACL,uCAAuC;4BACvCH,WAAW,EAAE;wBACf;oBACF;gBACA,0GAA0G;gBAC5G;gBAEAJ,iBAAiB,MAAM5L,cACpBU,UAAU,CAAC,sBACXC,YAAY,CAAC,IACZrL,mBAAmB;wBACjBqW,WAAWK;wBACXR,OAAO;wBACPC,WAAWxV,WAAWmW,GAAG;wBACzB7C,gBAAgBxK,OAAOwK,cAAc;wBACrC3B;wBACAnH;wBACAqD;oBACF;gBAGJ+H,mBAAmB,MAAM7L,cACtBU,UAAU,CAAC,sBACXC,YAAY,CAAC,IACZrL,mBAAmB;wBACjBqW,WAAWM;wBACXT,OAAO;wBACPC,WAAWxV,WAAWmW,GAAG;wBACzB7C,gBAAgBxK,OAAOwK,cAAc;wBACrC3B;wBACAnH;wBACAqD;oBACF;gBAGJvL,iBAAiBqT,cAAc,GAAGA;YACpC;YAEA,MAAMS,kBAAkB,MAAM/W,mBAAmB;gBAC/CkW,OAAO;gBACPjC,gBAAgBxK,OAAOwK,cAAc;gBACrCoC,WAAWvB;gBACXqB,WAAWxV,WAAWqW,IAAI;gBAC1B1E,UAAUA;gBACVnH;gBACAqD;YACF;YACAvL,iBAAiB8T,eAAe,GAAGA;YAEnC,MAAME,gBAAgBxO,OAAOQ,IAAI,CAACqH;YAElC,MAAM4G,0BAAiE,EAAE;YACzE,MAAMC,cAAc,IAAI3O;YACxB,IAAI8N,gBAAgB;gBAClB1L,uBAAuBnC,OAAOQ,IAAI,CAACqN;gBACnC,KAAK,MAAMc,UAAUxM,qBAAsB;oBACzC,MAAMyM,uBAAuB/U,iBAAiB8U;oBAC9C,MAAM7C,WAAWjE,WAAW,CAAC+G,qBAAqB;oBAClD,IAAI9C,UAAU;wBACZ,MAAMsC,UAAUP,cAAc,CAACc,OAAO;wBACtCF,wBAAwBrL,IAAI,CAAC;4BAC3B0I,SAAStK,OAAO,CAAC,uBAAuB;4BACxC4M,QAAQ5M,OAAO,CAAC,yBAAyB;yBAC1C;oBACH;oBACAkN,YAAYG,GAAG,CAACD;gBAClB;YACF;YAEA,MAAMX,WAAW3B,MAAMC,IAAI,CAACmC;YAC5B,2DAA2D;YAC3DlG,SAASG,WAAW,CAACvF,IAAI,IACpBtI,mCAAmCmT,UAAUjN,OAAO8N,QAAQ;YAGjEtU,iBAAiBgO,QAAQ,GAAGA;YAE5B,MAAMuG,qBAAqBd,SAASlF,MAAM;YAE1C,MAAM7G,WAAW;gBACfW,OAAO2L;gBACP1E,KAAKmE,SAASlF,MAAM,GAAG,IAAIkF,WAAWzG;YACxC;YAEA,MAAMvF,cACHU,UAAU,CAAC,wBACXC,YAAY,CAAC;gBACZ,MAAMoM,qBAAqBlc,KAAKwL,IAAI,CAACF,SAAS,SAAS;gBACvD,MAAM6Q,oBAAoBnc,KAAKwL,IAAI,CAACF,SAAS,SAAS;gBACtD,MAAMjB,MAAMrK,KAAKyQ,OAAO,CAACyL,qBAAqB;oBAAExL,WAAW;gBAAK;gBAEhE,IAAI0L,YAAyB,EAAE;gBAC/B,IAAIC,mBAAgC,EAAE;gBACtC,IAAIC,eAA4B,EAAE;gBAClC,IAAIC,QAAoB,EAAE;gBAE1B,MAAM,EAAEC,UAAU,EAAEC,aAAa,EAAE,GAAG9X,kBACpCoQ,aACAjC,KACAqE;gBAGF,mBAAmB;gBACnB,IAAIvH,UAAUmL,gBAAgB;oBAC5B,kDAAkD;oBAClD,MAAM2B,iBAAiB5X,0BAA0BiW;oBACjD,IAAI4B,oBAAgC,EAAE;oBAEtC,oDAAoD;oBACpD,MAAM,EAAEC,YAAY,EAAE,GAAG,MAAMzN,cAC5BU,UAAU,CAAC,yBACXC,YAAY,CAAC,IAAMpL,gBAAgBkL,QAAQ6I;oBAE9C,IAAImE,aAAa3G,MAAM,GAAG,GAAG;wBAC3B,MAAM4G,qBAAqB,MAAM1N,cAC9BU,UAAU,CAAC,0BACXC,YAAY,CAAC,IACZrL,mBAAmB;gCACjBqW,WAAW8B;gCACXjC,OAAO;gCACPC,WAAWxV,WAAWmW,GAAG;gCACzB7C,gBAAgBxK,OAAOwK,cAAc;gCACrC3B;gCACAnH;gCACAqD;4BACF;wBAEJ0J,oBACE5X,6BAA6B8X;oBACjC;oBAEA,0CAA0C;oBAC1CN,QAAQvX,aAAa0X,gBAAgBC;oBAErC,MAAMtB,SAASzW,iBACbmW,gBACAtC,kBACA3F,KACAqE;oBAEFiF,YAAYf,OAAOe,SAAS;oBAC5BC,mBAAmBhB,OAAOgB,gBAAgB;gBAC5C;gBAEA,oBAAoB;gBACpB,IAAIzM,UAAUoL,kBAAkB;oBAC9BsB,eAAezX,oBAAoBmW,kBAAkBlI,KAAKqE;gBAC5D;gBAEA,MAAM2F,qBAAqB,MAAMxS,yBAAyB;oBACxDwI;oBACA0J;oBACAJ;oBACAC;oBACAI;oBACAH;oBACAC;oBACA5G,WAAWzH,OAAOyH,SAAS;oBAC3BD,UAAUxH,OAAOwH,QAAQ;oBACzByG;gBACF;gBAEA,MAAM5R,wBACJuS,oBACAZ,oBACAhO;gBAEF,MAAM1D,mBAAmBsS,oBAAoBX;YAC/C;YAEF,6DAA6D;YAC7D,IAAIpI,YAAYxQ,QAAQyQ,SAAS,EAAE;gBACjC,MAAM+I,yBAAyBpB,wBAAwB1F,MAAM;gBAC7D,IAAI8E,kBAAkBgC,yBAAyB,GAAG;oBAChDxX,IAAIgT,KAAK,CACP,CAAC,6BAA6B,EAC5BwE,2BAA2B,IAAI,SAAS,SACzC,wDAAwD,CAAC;oBAE5D,KAAK,MAAM,CAAC/D,UAAUsC,QAAQ,IAAIK,wBAAyB;wBACzDpW,IAAIgT,KAAK,CAAC,CAAC,GAAG,EAAES,SAAS,KAAK,EAAEsC,QAAQ,CAAC,CAAC;oBAC5C;oBACA,MAAMzE,UAAU2B,KAAK;oBACrB5D,QAAQU,IAAI,CAAC;gBACf;YACF;YAEA,MAAM0H,yBAAmC,EAAE;YAC3C,MAAMC,eAAclI,mBAAAA,WAAW,CAAC,OAAO,qBAAnBA,iBAAqBqC,UAAU,CAAC/W;YACpD,MAAM6c,YAAY,CAAC,EAACnC,kCAAAA,cAAgB,CAAC3X,iCAAiC;YACtE,MAAM+Z,oBACJ,CAAC,EAACpC,kCAAAA,cAAgB,CAAC1X,oCAAoC;YACzD,MAAM+Z,sBACJrI,sBAAAA,WAAW,CAAC,UAAU,qBAAtBA,oBAAwBqC,UAAU,CAAC/W;YAErC,6EAA6E;YAC7E,MAAMgd,qBAAqBnQ,OAAOQ,IAAI,CAACqH,aAAa2E,IAAI,CACtD,CAAClM,QAAU,CAACxH,eAAewH;YAG7B,IAAI6J,cAAc;gBAChB,MAAMiG,6BAA6B/d,WACjCS,KAAKwL,IAAI,CAACsL,WAAW;gBAEvB,IAAIwG,4BAA4B;oBAC9B,MAAM,qBAAyC,CAAzC,IAAI7G,MAAMvW,iCAAV,qBAAA;+BAAA;oCAAA;sCAAA;oBAAwC;gBAChD;YACF;YAEA,MAAMiP,cACHU,UAAU,CAAC,6BACXC,YAAY,CAAC;gBACZ,iDAAiD;gBACjD,sDAAsD;gBACtD,IAAK,MAAMlF,QAAQmK,YAAa;oBAC9B,MAAMwI,oBAAoB,MAAMrc,WAC9BlB,KAAKwL,IAAI,CAACsL,WAAWlM,SAAS,MAAM,WAAWA,OAC/C3J,SAASuc,IAAI;oBAEf,IAAID,mBAAmB;wBACrBP,uBAAuB1M,IAAI,CAAC1F;oBAC9B;gBACF;gBAEA,MAAM6S,iBAAiBT,uBAAuB/G,MAAM;gBAEpD,IAAIwH,gBAAgB;oBAClB,MAAM,qBAML,CANK,IAAIhH,MACR,CAAC,gCAAgC,EAC/BgH,mBAAmB,IAAI,SAAS,SACjC,uEAAuE,EAAET,uBAAuBxR,IAAI,CACnG,OACC,GALC,qBAAA;+BAAA;oCAAA;sCAAA;oBAMN;gBACF;YACF;YAEF,MAAMkS,sBAAsBtO,SAASW,KAAK,CAAC1C,MAAM,CAAC,CAACzC;gBACjD,OACEA,KAAK+S,KAAK,CAAC,iCAAiC3d,KAAKyQ,OAAO,CAAC7F,UAAU;YAEvE;YAEA,IAAI8S,oBAAoBzH,MAAM,EAAE;gBAC9B1Q,IAAIwG,IAAI,CACN,CAAC,4FAA4F,CAAC,GAC5F2R,oBAAoBlS,IAAI,CAAC,QACzB,CAAC,6EAA6E,CAAC;YAErF;YAEA,MAAMoS,0BAA0B;gBAAC;aAAS,CAACrQ,GAAG,CAAC,CAACiB,IAC9CN,OAAO8N,QAAQ,GAAG,GAAG9N,OAAO8N,QAAQ,GAAGxN,GAAG,GAAGA;YAG/C,MAAMqP,8BAA8B/E,QAAQ5K,OAAO+J,eAAe;YAClE,MAAM6F,0BAA0BhF,QAC9B5K,OAAO+C,YAAY,CAAC8M,cAAc;YAEpC,MAAMC,kBAAkBlV,qBAAqBoF,OAAO+C,YAAY,CAACgN,GAAG;YAEpE,MAAMC,qBAAqBle,KAAKwL,IAAI,CAACF,SAASnJ;YAC9C,MAAMwL,gBAA6C,EAAE;YAErD;;;OAGC,GACD,MAAMwQ,cAAc,IAAIC;YACxB,MAAMC,iBAAiClP,cACpCU,UAAU,CAAC,4BACXmF,OAAO,CAAC;gBACP,MAAMsJ,eAAenU,UAAU;uBAC1BiF,SAASW,KAAK;uBACbX,SAAS4H,GAAG,IAAI,EAAE;iBACvB;gBACD,MAAMuH,eAAqC,EAAE;gBAE7C,KAAK,MAAM/Q,SAAS8Q,aAAc;oBAChC,IAAIhb,eAAekK,QAAQ;wBACzBG,cAAc2C,IAAI,CAChB3F,YACE6C,OACA,sDAAsD;wBACtDkH;oBAGN,OAAO,IACL,CAAC1O,eAAewH,UAChB,oCAAoC;oBACpCA,MAAMmQ,KAAK,CAAC,mBACZ;wBACAY,aAAajO,IAAI,CAAC3F,YAAY6C;oBAChC;gBACF;gBAEA,OAAO;oBACLwB,SAAS;oBACTwP,UAAU;oBACVC,eAAe,CAAC,CAACvQ,OAAO+C,YAAY,CAACyN,mBAAmB;oBACxD1C,UAAU9N,OAAO8N,QAAQ;oBACzBrG,WAAWA,UAAUpI,GAAG,CAAC,CAACoR,IACxBjW,iBAAiB,YAAYiW,GAAGf;oBAElCnI,SAASA,QAAQlI,GAAG,CAAC,CAACoR,IAAMjW,iBAAiB,UAAUiW;oBACvDjJ,UAAU;wBACRG,aAAaH,SAASG,WAAW,CAACtI,GAAG,CAAC,CAACoR,IACrCjW,iBAAiB,WAAWiW;wBAE9B7I,YAAYJ,SAASI,UAAU,CAACvI,GAAG,CAAC,CAACoR,IACnCjW,iBAAiB,WAAWiW;wBAE9B5I,UAAUL,SAASK,QAAQ,CAACxI,GAAG,CAAC,CAACoR,IAC/BjW,iBAAiB,WAAWiW;oBAEhC;oBACAhR;oBACA4Q;oBACAK,YAAY,EAAE;oBACdC,MAAM3Q,OAAO2Q,IAAI,IAAInK;oBACrBoK,KAAK;wBACHC,QAAQ7X;wBACR,yFAAyF;wBACzF,4DAA4D;wBAC5D8X,YAAY,GAAG9X,WAAW,EAAE,EAAEE,8BAA8B,EAAE,EAAEH,4BAA4B,EAAE,EAAEK,qCAAqC;wBACrI2X,gBAAgBhY;wBAChBiY,mBAAmB7X;wBACnB8X,mBAAmBhY;wBACnBiY,QAAQ5e;wBACR6e,gBAAgB9e;wBAChB+e,uBAAuBhY;wBACvBiY,uBAAuBve;wBACvBwe,0BAA0Bze;wBAC1B0e,oBAAoBvR,OAAO+J,eAAe,IAAI;wBAC9CyH,2BACExR,OAAO+C,YAAY,CAACyO,yBAAyB;wBAC/CC,qBACE3B,mBAAmB9P,OAAO+J,eAAe,KAAK;oBAClD;oBACA2H,gBAAgB;wBACdC,YAAYtY;wBACZuY,aAAatY;oBACf;oBACAuY,uBAAuB7R,OAAO6R,qBAAqB;oBACnD9B,KAAKD,kBACD;wBACEgC,OAAO;4BACLvK,SAAS;gCACP,CAAChV,mBAAmB,EAAE;4BACxB;wBACF;oBACF,IACAiU;gBACN;YACF;YAEF,qFAAqF;YACrF,IAAI,CAAC9E,UAAU,CAACyE,eAAe;gBAC7B,MAAMtM,kBAAkBuQ;YAC1B;YAEA,IAAI2H;YAIJ,IAAI/R,OAAO+C,YAAY,CAACiP,kBAAkB,EAAE;gBAC1C,MAAMC,uBAAuB,AAACjS,CAAAA,OAAOmI,kBAAkB,IAAI,EAAE,AAAD,EAAGhJ,MAAM,CACnE,CAACsR,IAAW,CAACA,EAAEyB,QAAQ;gBAEzBH,sBAAsBpY,yBACpB;uBAAIsT;iBAAS,EACbjN,OAAO+C,YAAY,CAACoP,2BAA2B,GAC3CF,uBACA,EAAE,EACNjS,OAAO+C,YAAY,CAACqP,6BAA6B;gBAEnD5Y,iBAAiBuY,mBAAmB,GAAGA;YACzC;YAEA,8EAA8E;YAC9E,uDAAuD;YACvD,MAAMjU,cACJhM,KAAKwL,IAAI,CAACF,SAAS,iBACnB;YAGF,yFAAyF;YACzF,MAAMlD,uBAAuBwM,QAAQC,GAAG,CAACC,cAAc;YACvD,MAAMzM,uBAAuB;gBAC3BkY,YAAY;YACd;YAEA,MAAMjR,wBAAwBpB,OAAOoB,qBAAqB,IAAIwD;YAE9D,MAAM0N,oBAAoBxgB,KAAKwL,IAAI,CACjCF,SACAlJ,kBACAL;YAGF,IAAI0e;YACJ,IAAIC,qBAA+ChM;YAEnD,uEAAuE;YACvE,4CAA4C;YAC5C,MAAMiM,iBACJzS,OAAO+C,YAAY,CAAC2P,kBAAkB,IACrC1S,OAAO+C,YAAY,CAAC2P,kBAAkB,KAAKlM,aAC1C,CAACxG,OAAO2S,OAAO;YACnB,MAAMC,6BACJ5S,OAAO+C,YAAY,CAAC8P,sBAAsB;YAC5C,MAAMC,qCACJ9S,OAAO+C,YAAY,CAACgQ,yBAAyB,IAC5C/S,OAAO+C,YAAY,CAACgQ,yBAAyB,KAAKvM,aACjDL;YAEJlF,cAAc+F,YAAY,CACxB,6BACAgM,OAAO,CAAC,CAAChT,OAAO2S,OAAO;YAEzB1R,cAAc+F,YAAY,CAAC,oBAAoBgM,OAAOP;YAEtD,IACE,CAACA,kBACAG,CAAAA,8BAA8BE,kCAAiC,GAChE;gBACA,MAAM,qBAEL,CAFK,IAAIvK,MACR,oMADI,qBAAA;2BAAA;gCAAA;kCAAA;gBAEN;YACF;YAEAlR,IAAIgQ,IAAI,CAAC;YACT5M,iBAAiB,kBAAkBwG;YAEnC,MAAM9G,uBAAuB;gBAC3BkY,YAAY;gBACZY,cAAc;oBACZR,gBAAgBO,OAAOP;gBACzB;YACF;YAEA,IAAIS,kBAAkBC,QAAQ1P,OAAO;YACrC,IAAI,CAAC8B,gBAAgB;gBACnB,IAAIM,YAAYxQ,QAAQyQ,SAAS,EAAE;oBACjC,MAAM,EACJsN,UAAUC,gBAAgB,EAC1BH,iBAAiB5S,CAAC,EAClB,GAAGgT,MACJ,GAAG,MAAMjY,eACRqL,QAAQC,GAAG,CAAC4M,yBAAyB,KAAK/M,aACxCE,QAAQC,GAAG,CAAC4M,yBAAyB,KAAK;oBAE9CL,kBAAkB5S;oBAClB7F,iBAAiB,kBAAkBwG;oBAEnCsR,oBAAoBe,KAAKf,iBAAiB;oBAE1C,MAAMiB,iBAAiB/X,iBAAiB4X;oBACxChc,IAAIoc,KAAK,CAAC,CAAC,yBAAyB,EAAED,gBAAgB;oBAEtD7K,UAAUS,MAAM,CACdhT,oBAAoBuU,YAAY;wBAC9B9E,SAAS;wBACT6N,mBAAmBxQ,KAAKyQ,KAAK,CAACN;wBAC9BtF;oBACF;gBAEJ,OAAO;oBACL,IACE6E,8BACAE,oCACA;wBACA,IAAIY,oBAAoB;wBAExB,MAAMvZ,uBAAuB;4BAC3BkY,YAAY;wBACd;wBAEA,MAAMuB,qBAAqBra,aAAakZ,gBAAgB;4BACtD;yBACD,EAAE9I,IAAI,CAAC,CAACkK;4BACPpZ,iBAAiB,+BAA+BwG;4BAChDsR,oBAAoBsB,IAAItB,iBAAiB;4BACzCmB,qBAAqBG,IAAIT,QAAQ;4BAEjC,IAAIN,oCAAoC;gCACtC,MAAMgB,mBAAmB,IAAIriB,OAC3B+R,QAAQC,OAAO,CAAC,2BAChB;oCACEI,oBAAoB,CAAC;oCACrBU,gBAAgB;oCAChBP,YAAY;oCACZU,gBAAgB;wCAAC;qCAAqB;gCACxC;gCAGF8N,qBAAqBvR,cAClBU,UAAU,CAAC,wBACXC,YAAY,CAAC;oCACZ,OAAOkS,iBACJ9Z,kBAAkB,CAAC;wCAClB4K;wCACA5E;wCACA5C;wCACA,+CAA+C;wCAC/C2W,mBAAmB/b,8BACjB,IAAIkY;wCAEN1O,aAAa,EAAE;wCACf+Q;wCACAnR;oCACF,GACC4S,KAAK,CAAC,CAAC3L;wCACN3K,QAAQ2M,KAAK,CAAChC;wCACd3B,QAAQU,IAAI,CAAC;oCACf;gCACJ;4BACJ;wBACF;wBACA,IAAI,CAACwL,4BAA4B;4BAC/B,MAAMgB;4BACN,MAAMzZ,uBAAuB;gCAC3BkY,YAAY;4BACd;wBACF;wBAEA,MAAM4B,mBAAmB1a,aAAakZ,gBAAgB;4BACpD;yBACD,EAAE9I,IAAI,CAAC,CAACkK;4BACPH,qBAAqBG,IAAIT,QAAQ;4BACjC3Y,iBACE,oCACAwG;wBAEJ;wBACA,IAAI2R,4BAA4B;4BAC9B,MAAMgB;4BACN,MAAMzZ,uBAAuB;gCAC3BkY,YAAY;4BACd;wBACF;wBACA,MAAM4B;wBAEN,MAAM9Z,uBAAuB;4BAC3BkY,YAAY;wBACd;wBAEA,MAAM9Y,aAAakZ,gBAAgB;4BAAC;yBAAS,EAAE9I,IAAI,CAAC,CAACkK;4BACnDH,qBAAqBG,IAAIT,QAAQ;4BACjC3Y,iBAAiB,+BAA+BwG;wBAClD;wBAEA,MAAMuS,iBAAiB/X,iBAAiBiY;wBACxCrc,IAAIoc,KAAK,CAAC,CAAC,yBAAyB,EAAED,gBAAgB;wBAEtD7K,UAAUS,MAAM,CACdhT,oBAAoBuU,YAAY;4BAC9B9E,SAASoB,uBAAuBpB;4BAChC6N;4BACA3F;wBACF;oBAEJ,OAAO;wBACL,MAAM,EAAEqF,UAAUC,gBAAgB,EAAE,GAAGC,MAAM,GAAG,MAAM/Z,aACpDkZ,gBACA;wBAEFhY,iBAAiB,kBAAkBwG;wBAEnCsR,oBAAoBe,KAAKf,iBAAiB;wBAE1C5J,UAAUS,MAAM,CACdhT,oBAAoBuU,YAAY;4BAC9B9E,SAASoB,uBAAuBpB;4BAChC6N,mBAAmBL;4BACnBtF;wBACF;oBAEJ;gBACF;gBACA,MAAMlS,0BAA0B;oBAC9BmE;oBACAkU,WAAWjT;oBACX0H;oBACAwL,UAAU;wBACRC,YAAYxP;wBACZxH;oBACF;gBACF;YACF;YAEA,uDAAuD;YACvD,IAAIsE,UAAU,CAACyE,iBAAiB,CAACZ,gBAAgB;gBAC/C,MAAMpL,uBAAuB;oBAC3BkY,YAAY;gBACd;gBACA,MAAMxY,kBAAkBuQ;gBACxB3P,iBAAiB,0BAA0BwG;YAC7C;YAEA,MAAMoT,0BAA0B3N,QAAQ4N,MAAM;YAC9C,MAAMC,qBAAqBjd,cAAc;YAEzC,MAAMkd,oBAAoB1iB,KAAKwL,IAAI,CAACF,SAAS5J;YAE7C,IAAIihB,sBAAsB;YAC1B,IAAIC,sBAAsB;YAC1B,IAAIC,sBAAsB;YAC1B,IAAIC,wBAAwB;YAC5B,MAAM9V,WAAW,IAAIC;YACrB,MAAM8V,yBAAyB,IAAI9V;YACnC,MAAM+V,2BAA2B,IAAI/V;YACrC,MAAMyC,cAAc,IAAIzC;YACxB,MAAMgW,eAAe,IAAIhW;YACzB,MAAMiW,mBAAmB,IAAIjW;YAC7B,MAAMkW,kBAAkB,IAAI/E;YAC5B,MAAMgF,cAAc,IAAIhF;YACxB,MAAMiF,qBAAqB,IAAIjF;YAC/B,MAAMkF,gBAAgB,IAAIlF;YAC1B,MAAMmF,oBAAoB,IAAInF;YAC9B,MAAMoF,YAAuB,IAAIpF;YACjC,IAAIqF,gBAAgB,MAAMjX,aAA4BgU;YACtD,MAAMkD,gBAAgB,MAAMlX,aAA4BkW;YAExD,MAAMiB,gBAAwC,CAAC;YAE/C,IAAI/T,QAAQ;gBACV,MAAMgU,mBAAmB,MAAMpX,aAC7BxM,KAAKwL,IAAI,CAACF,SAASlJ,kBAAkBI;gBAGvC,IAAK,MAAMqhB,OAAOD,iBAAkB;oBAClCD,aAAa,CAACE,IAAI,GAAG9c,iBAAiB8c;gBACxC;gBAEA,MAAMvX,cACJtM,KAAKwL,IAAI,CAACF,SAAS7I,2BACnBkhB;YAEJ;YAEA/O,QAAQC,GAAG,CAACiP,UAAU,GAAG9hB;YAEzB,MAAM+hB,SAASlS,mBAAmB3D,QAAQ;gBAAE6D,oBAAoB,CAAC;YAAE;YAEnE,MAAMiS,gBAAgBpP,QAAQ4N,MAAM;YACpC,MAAMyB,kBAAkB9U,cAAcU,UAAU,CAAC;YAEjD,MAAMqU,0BAAmD;gBACvDlV,SAAS;gBACTmV,WAAW,CAAC;YACd;YAEA,MAAM,EACJC,wBAAwB,EACxBC,YAAY,EACZC,mBAAmB,EACnBC,qBAAqB,EACtB,GAAG,MAAMN,gBAAgBnU,YAAY,CAAC;oBAWV5B;gBAV3B,IAAImG,eAAe;oBACjB,OAAO;wBACL+P,0BAA0B;wBAC1BC,cAAc,EAAE;wBAChBC,qBAAqB;wBACrBC,uBAAuBlH;oBACzB;gBACF;gBAEA,MAAM,EAAEmH,cAAc,EAAE,GAAGtW;gBAC3B,MAAMuW,aAAa3L,SAAQ5K,2BAAAA,OAAO+C,YAAY,CAACyT,GAAG,qBAAvBxW,yBAAyByW,SAAS;gBAE7D,MAAMC,yBAAyBX,gBAAgBpU,UAAU,CACvD;gBAEF,MAAMgV,oCACJD,uBAAuB9U,YAAY,CACjC,UACEsN,sBACC,MAAM2G,OAAOe,wBAAwB,CAAC;wBACrCla,MAAM;wBACNU;wBACAyZ,aAAa;wBACbN;oBACF;gBAGN,MAAMO,wBAAwBJ,uBAAuB9U,YAAY,CAC/D;wBAUa5B,cACMA;2BAVjBkP,sBACA2G,OAAOkB,YAAY,CAAC;wBAClBnS;wBACAlI,MAAM;wBACNU;wBACAkZ;wBACAvM,iBAAiB4F;wBACjBE,gBAAgBD;wBAChBoH,kBAAkBhX,OAAOgX,gBAAgB;wBACzCnY,OAAO,GAAEmB,eAAAA,OAAO2Q,IAAI,qBAAX3Q,aAAanB,OAAO;wBAC7BoY,aAAa,GAAEjX,gBAAAA,OAAO2Q,IAAI,qBAAX3Q,cAAaiX,aAAa;wBACzCC,kBAAkBlX,OAAOmX,MAAM;wBAC/BC,WAAWpX,OAAO+C,YAAY,CAACgN,GAAG;wBAClCsH,mBAAmBrX,OAAOsX,SAAS;wBACnC1Y;wBACA2X;wBACAgB,oBAAoBvX,OAAOuX,kBAAkB;oBAC/C;;gBAGJ,MAAMC,iBAAiB;gBAEvB,MAAMC,kCAAkCtI,qBACpC0G,OAAOe,wBAAwB,CAAC;oBAC9Bla,MAAM8a;oBACNpa;oBACAyZ,aAAa;oBACbN;gBACF,KACApD,QAAQ1P,OAAO,CAAC;gBAEpB,MAAMiU,sBAAsBvI,qBACxB0G,OAAO8B,sBAAsB,CAAC;oBAC5Bjb,MAAM8a;oBACNpa;oBACAmZ;gBACF,KACApD,QAAQ1P,OAAO,CAAC,EAAE;gBAEtB,wDAAwD;gBACxD,IAAI2S;gBAEJ,MAAM/U,qBAAyCmC,QAC7C1R,KAAKwL,IAAI,CAACF,SAASlJ,kBAAkBG;gBAGvC,MAAMujB,iBAAiBlW,SAClB8B,QACC1R,KAAKwL,IAAI,CACPF,SACAlJ,kBACAW,4BAA4B,YAGhC;gBACJ,MAAMgjB,oBAAoBD,iBAAiB,IAAI7Y,QAAQ;gBACvD,IAAI6Y,kBAAkBC,mBAAmB;oBACvC,IAAK,MAAMC,MAAMF,eAAeG,IAAI,CAAE;wBACpC,IAAK,MAAMC,SAASJ,eAAeG,IAAI,CAACD,GAAG,CAACG,OAAO,CAAE;4BACnDJ,kBAAkBhK,GAAG,CAACmK;wBACxB;oBACF;oBACA,IAAK,MAAMF,MAAMF,eAAeM,IAAI,CAAE;wBACpC,IAAK,MAAMF,SAASJ,eAAeM,IAAI,CAACJ,GAAG,CAACG,OAAO,CAAE;4BACnDJ,kBAAkBhK,GAAG,CAACmK;wBACxB;oBACF;gBACF;gBAEA,KAAK,MAAMrC,OAAO3W,OAAOQ,IAAI,CAAC6B,sCAAAA,mBAAoB4U,SAAS,EAAG;oBAC5D,IAAIN,IAAIzM,UAAU,CAAC,SAAS;wBAC1B0L;oBACF;gBACF;gBAEA,MAAMzB,QAAQgF,GAAG,CACfnZ,OAAOC,OAAO,CAACiC,UACZc,MAAM,CACL,CAACC,KAAK,CAAC0T,KAAK5T,MAAM;oBAChB,IAAI,CAACA,OAAO;wBACV,OAAOE;oBACT;oBAEA,MAAMmW,WAAWzC;oBAEjB,KAAK,MAAMjZ,QAAQqF,MAAO;wBACxBE,IAAIG,IAAI,CAAC;4BAAEgW;4BAAU1b;wBAAK;oBAC5B;oBAEA,OAAOuF;gBACT,GACA,EAAE,EAEH5C,GAAG,CAAC,CAAC,EAAE+Y,QAAQ,EAAE1b,IAAI,EAAE;oBACtB,MAAM2b,gBAAgBtC,gBAAgBpU,UAAU,CAAC,cAAc;wBAC7DjF;oBACF;oBACA,OAAO2b,cAAczW,YAAY,CAAC;wBAChC,MAAM0W,aAAa9iB,kBAAkBkH;wBAErC,IAAI6b,oBAAoB;wBACxB,IAAIC,QAAQ;wBACZ,IAAIC,WAAW;wBACf,IAAIC,oBAAoB;wBACxB,IAAIC,gBAAiC;wBACrC,IAAI7N,WAAW;wBAEf,IAAIsN,aAAa,SAAS;4BACxBtN,WACEH,WAAWiO,IAAI,CAAC,CAACtY;gCACfA,IAAI7G,iBAAiB6G;gCACrB,OACEA,EAAE4I,UAAU,CAACoP,aAAa,QAC1BhY,EAAE4I,UAAU,CAACoP,aAAa;4BAE9B,MAAM;wBACV;wBACA,IAAIO;wBAEJ,IAAIT,aAAa,SAASvL,gBAAgB;4BACxC,KAAK,MAAM,CAACiM,cAAcC,eAAe,IAAI/Z,OAAOC,OAAO,CACzDwW,eACC;gCACD,IAAIsD,mBAAmBrc,MAAM;oCAC3BoO,WAAW+B,cAAc,CAACiM,aAAa,CAACtY,OAAO,CAC7C,yBACA;oCAEFqY,kBAAkBC;oCAClB;gCACF;4BACF;wBACF;wBAEA,MAAME,eAAejhB,iBAAiB+S,YAClCA,WACAhZ,KAAKwL,IAAI,CACP,AAAC8a,CAAAA,aAAa,UAAUvP,WAAWnH,MAAK,KAAM,IAC9CoJ;wBAGN,MAAMmO,iBAAiBb,aAAa;wBACpC,MAAMc,aAAapO,WACf,MAAM7T,8BAA8B;4BAClCgiB;4BACAD;4BACAxO,gBAAgBxK,OAAOwK,cAAc;4BACrC9I;4BACA1B;4BACAyM,OAAO;4BACP,yDAAyD;4BACzD,4DAA4D;4BAC5D,gEAAgE;4BAChE/P,MAAMuc,iBAAiBJ,kBAAmBnc;wBAC5C,KACA8J;wBAEJ,IAAI0S,8BAAAA,WAAYC,mBAAmB,EAAE;4BACnCC;wBACF;wBAEA,8DAA8D;wBAC9D,oDAAoD;wBACpD,IACE,QAAOF,8BAAAA,WAAYG,OAAO,MAAK,eAC/B,QAAOH,8BAAAA,WAAYI,WAAW,MAAK,eACnC,QAAOJ,8BAAAA,WAAYK,eAAe,MAAK,aACvC;4BACA,MAAMC,UAAUN,CAAAA,8BAAAA,WAAYK,eAAe,IACvC,OAAOL,WAAWK,eAAe,KAAK,WACpC;gCAACL,WAAWK,eAAe;6BAAC,GAC5BL,WAAWK,eAAe,GAC5B/S;4BAEJwP,wBAAwBC,SAAS,CAACvZ,KAAK,GAAG;gCACxC4c,WAAW,EAAEJ,8BAAAA,WAAYI,WAAW;gCACpC,GAAIE,WAAW;oCAAEA;gCAAQ,CAAC;4BAC5B;wBACF;wBAEA,MAAMC,cAAcpY,mBAAmB4U,SAAS,CAC9C4C,mBAAmBnc,KACpB,GACG,SACAwc,8BAAAA,WAAYG,OAAO;wBAEvB,IAAI,CAAClT,eAAe;4BAClBuS,oBACEN,aAAa,SACbc,CAAAA,8BAAAA,WAAYtI,GAAG,MAAKpc,iBAAiBklB,MAAM;4BAE7C,IAAItB,aAAa,SAAS,CAACtgB,eAAe4E,OAAO;gCAC/C,IAAI;oCACF,IAAIid;oCAEJ,IAAIrhB,cAAcmhB,cAAc;wCAC9B,IAAIrB,aAAa,OAAO;4CACtBzD;wCACF,OAAO;4CACLC;wCACF;wCAEA,MAAMgF,cACJxB,aAAa,UAAU1b,OAAOmc,mBAAmB;wCAEnDc,WAAWtY,mBAAmB4U,SAAS,CAAC2D,YAAY;oCACtD;oCAEA,IAAIC,mBACFxB,cAAc1W,UAAU,CAAC;oCAC3B,IAAImY,eAAe,MAAMD,iBAAiBjY,YAAY,CACpD;4CAQa5B,cACMA;wCARjB,OAAO6V,OAAOkB,YAAY,CAAC;4CACzBnS;4CACAlI;4CACAmc;4CACAzb;4CACAkZ;4CACAU,kBAAkBhX,OAAOgX,gBAAgB;4CACzCnY,OAAO,GAAEmB,eAAAA,OAAO2Q,IAAI,qBAAX3Q,aAAanB,OAAO;4CAC7BoY,aAAa,GAAEjX,gBAAAA,OAAO2Q,IAAI,qBAAX3Q,cAAaiX,aAAa;4CACzC8C,UAAUF,iBAAiBG,KAAK;4CAChCP;4CACAE;4CACAvB;4CACArO,iBAAiB4F;4CACjBE,gBAAgBD;4CAChBqK,cAAcja,OAAOia,YAAY;4CACjCC,eAAela,OAAOka,aAAa;4CACnCC,gBAAgBzkB,cAAc8H,cAAc,GACxC,QACAwC,OAAO+C,YAAY,CAACoX,cAAc;4CACtC5C,oBAAoBvX,OAAOuX,kBAAkB;4CAC7CL,kBAAkBlX,OAAOmX,MAAM;4CAC/BC,WAAWpX,OAAO+C,YAAY,CAACgN,GAAG;4CAClCsH,mBAAmBrX,OAAOsX,SAAS;4CACnC1Y;4CACA2X;wCACF;oCACF;oCAGF,IAAI6B,aAAa,SAASS,iBAAiB;wCACzC1D,mBAAmBiF,GAAG,CAACvB,iBAAiBnc;wCACxC,0CAA0C;wCAC1C,IAAIpE,cAAcmhB,cAAc;4CAC9BhB,WAAW;4CACXD,QAAQ;4CAERnhB,IAAIgV,QAAQ,CACV,CAAC,+EAA+E,CAAC;wCAErF,OAAO;4CACL,MAAMgO,YAAYjlB,eAAesH;4CAEjC,IACE,OAAOod,aAAavB,iBAAiB,KAAK,WAC1C;gDACAA,oBAAoBuB,aAAavB,iBAAiB;4CACpD;4CAEA,oDAAoD;4CACpD,0CAA0C;4CAC1C,yBAAyB;4CACzB,IAAIuB,aAAavB,iBAAiB,EAAE;gDAClCC,QAAQ;gDACRC,WAAW;gDAEXvD,YAAYkF,GAAG,CAACvB,iBAAiB,EAAE;4CACrC;4CAEA,IAAIiB,aAAaQ,iBAAiB,EAAE;gDAClCpF,YAAYkF,GAAG,CACbvB,iBACAiB,aAAaQ,iBAAiB;gDAEhC3B,gBAAgBmB,aAAaQ,iBAAiB,CAACjb,GAAG,CAChD,CAACC,QAAUA,MAAMC,QAAQ;gDAE3BiZ,QAAQ;4CACV;4CAEA,MAAM+B,YAAYT,aAAaS,SAAS,IAAI,CAAC;4CAC7C,IAAIA,UAAUC,UAAU,KAAK,GAAG;gDAC9B,MAAMC,0BACJX,aAAaQ,iBAAiB,IAC9BR,aAAaQ,iBAAiB,CAACvS,MAAM,GAAG;gDAE1C,IACE/H,OAAOmX,MAAM,KAAK,YAClBkD,aACA,CAACI,yBACD;oDACA,MAAM,qBAEL,CAFK,IAAIlS,MACR,CAAC,MAAM,EAAE7L,KAAK,wFAAwF,CAAC,GADnG,qBAAA;+DAAA;oEAAA;sEAAA;oDAEN;gDACF;gDAEA,6BAA6B;gDAC7B,4BAA4B;gDAC5B,iEAAiE;gDACjE,8BAA8B;gDAC9B,IAAI,CAAC2d,WAAW;oDACdnF,YAAYkF,GAAG,CAACvB,iBAAiB;wDAC/B;4DACE6B,QAAQ,CAAC;4DACTnb,UAAU7C;4DACVie,iBAAiBje;4DACjBke,qBAAqB,EAAE;4DACvBC,cACEf,aAAagB,qBAAqB;4DACpCC,oBAAoB,EAAE;4DACtBC,yBAAyB;wDAC3B;qDACD;oDACDvC,WAAW;gDACb,OAAO,IACL,CAACgC,2BACAF,CAAAA,UAAUU,OAAO,KAAK,WACrBV,UAAUU,OAAO,KAAK,cAAa,GACrC;oDACA/F,YAAYkF,GAAG,CAACvB,iBAAiB,EAAE;oDACnCJ,WAAW;oDACXF,oBAAoB;gDACtB;4CACF;4CAEA,IAAIuB,aAAagB,qBAAqB,EAAE;gDACtC1F,cAAcgF,GAAG,CACfvB,iBACAiB,aAAagB,qBAAqB;4CAEtC;4CAEAzF,kBAAkB+E,GAAG,CAACvB,iBAAiB0B;wCACzC;oCACF,OAAO;wCACL,IAAIjiB,cAAcmhB,cAAc;4CAC9B,IAAIK,aAAaoB,cAAc,EAAE;gDAC/Bxd,QAAQG,IAAI,CACV,CAAC,kFAAkF,EAAEnB,MAAM;4CAE/F;4CACAod,aAAarB,QAAQ,GAAG;4CACxBqB,aAAaoB,cAAc,GAAG;wCAChC;wCAEA,IAAIpB,aAAa1D,mBAAmB,EAAE;4CACpCA,sBAAsB;wCACxB;wCAEA,IAAI0D,aAAaoB,cAAc,EAAE;4CAC/Bpc,SAAS+O,GAAG,CAACnR;4CACb8b,QAAQ;4CAER,IACEsB,aAAaQ,iBAAiB,IAC9BR,aAAaQ,iBAAiB,CAACvS,MAAM,GAAG,GACxC;gDACAkN,gBAAgBmF,GAAG,CACjB1d,MACAod,aAAaQ,iBAAiB;gDAEhC3B,gBAAgBmB,aAAaQ,iBAAiB,CAACjb,GAAG,CAChD,CAACC,QAAUA,MAAMC,QAAQ;4CAE7B;4CAEA,IACEua,aAAagB,qBAAqB,KAClChgB,aAAaqgB,sBAAsB,EACnC;gDACArG,yBAAyBjH,GAAG,CAACnR;4CAC/B,OAAO,IACLod,aAAagB,qBAAqB,KAClChgB,aAAasgB,SAAS,EACtB;gDACAvG,uBAAuBhH,GAAG,CAACnR;4CAC7B;wCACF,OAAO,IAAIod,aAAauB,cAAc,EAAE;4CACtCrG,iBAAiBnH,GAAG,CAACnR;wCACvB,OAAO,IACLod,aAAarB,QAAQ,IACrB,CAACC,qBACD,AAAC,MAAMjB,oCAAqC,OAC5C;4CACAjW,YAAYqM,GAAG,CAACnR;4CAChB+b,WAAW;wCACb,OAAO,IAAIC,mBAAmB;4CAC5B,2DAA2D;4CAC3D,gDAAgD;4CAChD5Z,SAAS+O,GAAG,CAACnR;4CACb8b,QAAQ;wCACV;wCAEA,IAAIzJ,eAAerS,SAAS,QAAQ;4CAClC,IACE,CAACod,aAAarB,QAAQ,IACtB,CAACqB,aAAaoB,cAAc,EAC5B;gDACA,MAAM,qBAEL,CAFK,IAAI3S,MACR,CAAC,cAAc,EAAExW,4CAA4C,GADzD,qBAAA;2DAAA;gEAAA;kEAAA;gDAEN;4CACF;4CACA,2DAA2D;4CAC3D,mCAAmC;4CACnC,IACE,AAAC,MAAM0lB,mCACP,CAACqC,aAAaoB,cAAc,EAC5B;gDACA1Z,YAAY8Z,MAAM,CAAC5e;4CACrB;wCACF;wCAEA,IACEtI,oBAAoB+N,QAAQ,CAACzF,SAC7B,CAACod,aAAarB,QAAQ,IACtB,CAACqB,aAAaoB,cAAc,EAC5B;4CACA,MAAM,qBAEL,CAFK,IAAI3S,MACR,CAAC,OAAO,EAAE7L,KAAK,GAAG,EAAE3K,4CAA4C,GAD5D,qBAAA;uDAAA;4DAAA;8DAAA;4CAEN;wCACF;oCACF;gCACF,EAAE,OAAOsW,KAAK;oCACZ,IACE,CAAChQ,QAAQgQ,QACTA,IAAIkT,OAAO,KAAK,0BAEhB,MAAMlT;oCACR0M,aAAalH,GAAG,CAACnR;gCACnB;4BACF;4BAEA,IAAI0b,aAAa,OAAO;gCACtB,IAAII,SAASC,UAAU;oCACrBhE;gCACF,OAAO;oCACLC;gCACF;4BACF;wBACF;wBAEAY,UAAU8E,GAAG,CAAC1d,MAAM;4BAClBmc;4BACAJ;4BACAD;4BACAD;4BACAI;4BACA6C,qBAAqBhV;4BACrB6S,SAASI;4BACTgC,cAAcjV;4BACdkV,kBAAkBlV;4BAClBmV,qBAAqBnV;wBACvB;oBACF;gBACF;gBAGJ,MAAMoV,kBAAkB,MAAM9E;gBAC9B,MAAM+E,qBACJ,AAAC,MAAMlF,qCACNiF,mBAAmBA,gBAAgBP,cAAc;gBAEpD,MAAMS,cAAc;oBAClB5F,0BAA0B,MAAMuB;oBAChCtB,cAAc,MAAMuB;oBACpBtB;oBACAC,uBAAuBwF;gBACzB;gBAEA,OAAOC;YACT;YAEA,IAAIvH,oBAAoB;gBACtB,MAAMwH,wBAAwBrV,QAAQ4N,MAAM,CAACD;gBAC7CE,mBAAmByH,OAAO,CACxB,CAAC,wBAAwB,EAAEtgB,uBAAuBqgB,wBAAwB;gBAE5ExH,mBAAmB0H,cAAc;YACnC;YACAxhB,iBAAiB,iCAAiCwG;YAElD,IAAIiV,0BAA0B;gBAC5BxY,QAAQG,IAAI,CACV3M,KAAKC,OAAO,CAAC,SAAS,CAAC,KACrBA,OACE,CAAC,qJAAqJ,CAAC;gBAG7JuM,QAAQG,IAAI,CACV;YAEJ;YAEA,MAAM,EAAEoc,YAAY,EAAE,GAAGja;YAEzB,MAAMkc,gCAA0C,EAAE;YAClD,IAAI3a,wBAAwB;gBAC1B2a,8BAA8B9Z,IAAI,CAChCtQ,KAAKwL,IAAI,CAACpJ,kBAAkB,GAAG9B,8BAA8B,GAAG,CAAC;gBAEnE,+DAA+D;gBAC/D,8FAA8F;gBAC9F,IACEyT,YAAYxQ,QAAQyQ,SAAS,IAC5B6O,CAAAA,uBAAuBC,qBAAoB,GAC5C;oBACAsH,8BAA8B9Z,IAAI,CAChCtQ,KAAKwL,IAAI,CACPpJ,kBACA,CAAC,KAAK,EAAE9B,8BAA8B,GAAG,CAAC;gBAGhD;YACF;YAEA,MAAM+pB,8BAA8Blb,cACjCU,UAAU,CAAC,kCACXmF,OAAO,CAAC;gBACP,MAAMsV,0BAAkD,CAAC;gBAEzD,KAAK,MAAM,CAACzG,KAAK0G,MAAM,IAAIrd,OAAOC,OAAO,CACvCe,OAAOka,aAAa,IAAI,CAAC,GACxB;oBACD,IAAIvE,OAAO0G,OAAO;wBAChBD,uBAAuB,CAACzG,IAAI,GAAG7jB,KAAKwQ,QAAQ,CAAClF,SAASif;oBACxD;gBACF;gBAEA,MAAMC,sBAAmD;oBACvDxb,SAAS;oBACTd,QAAQ;wBACN,GAAGA,MAAM;wBACTuc,YAAY/V;wBACZ,GAAI9Q,cAAc8H,cAAc,GAC5B;4BACEgf,UAAU;wBACZ,IACA,CAAC,CAAC;wBACNvC,cAAcA,eACVnoB,KAAKwQ,QAAQ,CAAClF,SAAS6c,gBACvBja,OAAOia,YAAY;wBACvBC,eAAekC;wBACfrZ,cAAc;4BACZ,GAAG/C,OAAO+C,YAAY;4BACtB0Z,iBAAiB/mB,cAAc8H,cAAc;4BAC7Ckf,uBAAuBvW;wBACzB;oBACF;oBACAzE,QAAQkD;oBACR+X,gBAAgB7qB,KAAKwQ,QAAQ,CAAClB,uBAAuBwD;oBACrD7C,OAAO;wBACL9N;wBACAnC,KAAKwQ,QAAQ,CAAClF,SAASkV;wBACvB9e;wBACAO;wBACAjC,KAAKwL,IAAI,CAACpJ,kBAAkBY;wBAC5BhD,KAAKwL,IAAI,CAACpJ,kBAAkBG;wBAC5BvC,KAAKwL,IAAI,CAACpJ,kBAAkBS,4BAA4B;2BACpDkR,YAAYxQ,QAAQyQ,SAAS,GAC7B;4BACEhU,KAAKwL,IAAI,CACPpJ,kBACAU,qCAAqC;4BAEvCZ;yBACD,GACD,EAAE;2BACF0N,SACA;+BACM1B,OAAO+C,YAAY,CAACyT,GAAG,GACvB;gCACE1kB,KAAKwL,IAAI,CACPpJ,kBACAQ,iCAAiC;gCAEnC5C,KAAKwL,IAAI,CACPpJ,kBACAQ,iCAAiC;6BAEpC,GACD,EAAE;4BACN5C,KAAKwL,IAAI,CAACpJ,kBAAkBI;4BAC5BxC,KAAKwL,IAAI,CAAC/I;4BACVzC,KAAKwL,IAAI,CACPpJ,kBACAW,4BAA4B;4BAE9B/C,KAAKwL,IAAI,CACPpJ,kBACAW,4BAA4B;yBAE/B,GACD,EAAE;2BACFgU,YAAYhD,YAAYxQ,QAAQyQ,SAAS,GACzC;4BACE/Q,uBAAuB;4BACvBjD,KAAKwL,IAAI,CAACpJ,kBAAkBa,uBAAuB;yBACpD,GACD,EAAE;wBACNxB;wBACAzB,KAAKwL,IAAI,CAACpJ,kBAAkBO,qBAAqB;wBACjD3C,KAAKwL,IAAI,CAACpJ,kBAAkBO,qBAAqB;wBACjDN;2BACG+nB;qBACJ,CACE/c,MAAM,CAAC/L,aACPiM,GAAG,CAAC,CAACyC,OAAShQ,KAAKwL,IAAI,CAAC0C,OAAO5C,OAAO,EAAE0E;oBAC3C8a,QAAQ,EAAE;gBACZ;gBAEA,OAAON;YACT;YAEF,MAAMO,iBAAiBjR,iBAAiBC;YACxC,IAAIvK,oBAAoB;YAExB,IAAIub,gBAAgB;gBAClB,8DAA8D;gBAC9D,4DAA4D;gBAC5D,oCAAoC;gBACpC,MAAMngB,OAAOmgB,eAAeC,KAAK,CAAC,IAAI,CAAC,EAAE;gBAEzC,MAAM5D,aAAa,MAAMjiB,8BAA8B;oBACrDgiB,gBAAgB;oBAChBD,cAAclnB,KAAKwL,IAAI,CAACsH,KAAKiY;oBAC7B7c;oBACA0B;oBACA8I,gBAAgBxK,OAAOwK,cAAc;oBACrCiC,OAAO;oBACP/P;gBACF;gBAEA,IAAIwc,WAAWC,mBAAmB,EAAE;oBAClCC;gBACF;gBAEA,IAAIF,WAAWG,OAAO,KAAK,YAAYnhB,YAAYwE,OAAO;wBAI5Cwc;oBAHZ5X,oBAAoB;oBACpB0U,wBAAwBC,SAAS,CAAC,eAAe,GAAG;wBAClDoD,SAAS;wBACT0D,UAAU7D,EAAAA,yBAAAA,WAAW8D,UAAU,qBAArB9D,uBAAuB6D,QAAQ,KAAI;4BAC3C;gCACEE,QAAQ;gCACRC,gBAAgB;4BAClB;yBACD;oBACH;oBAEA,IAAIrX,YAAYxQ,QAAQyQ,SAAS,EAAE;wBACjC,MAAM1H,cACJtM,KAAKwL,IAAI,CACPF,SACA,UACAwB,SACA5J,uCAEFghB,wBAAwBC,SAAS,CAAC,eAAe,CAAC8G,QAAQ,IAAI,EAAE;oBAEpE;gBACF;YACF;YAEA,MAAMnd,6BAA6BxC,SAAS4Y;YAE5C,IACEnQ,YAAYxQ,QAAQyQ,SAAS,IAC7B,CAACP,kBACD,CAACiN,oBACD;gBACAA,qBAAqBvR,cAClBU,UAAU,CAAC,wBACXC,YAAY,CAAC;oBACZ,OAAO5H,mBAAmB;wBACxB4K;wBACA5E;wBACA5C;wBACA2W,mBAAmB/b,8BAA8Bsd;wBACjD9T,aAAa;+BAAIA;yBAAY;wBAC7BP;wBACAsR;wBACAnR;oBACF,GAAG4S,KAAK,CAAC,CAAC3L;wBACR3K,QAAQ2M,KAAK,CAAChC;wBACd3B,QAAQU,IAAI,CAAC;oBACf;gBACF;YACJ;YAEA,IAAI4N,iBAAiBmI,IAAI,GAAG,KAAKre,SAASqe,IAAI,GAAG,GAAG;gBAClD,yDAAyD;gBACzD,+DAA+D;gBAC/DhN,eAAeO,UAAU,GAAGzU,UAAU;uBACjC+Y;uBACAlW;iBACJ,EAAEO,GAAG,CAAC,CAAC3C;oBACN,OAAO3C,eAAe2C,MAAMkC;gBAC9B;YACF;YAEA,2DAA2D;YAC3D,MAAMqC,cACHU,UAAU,CAAC,yBACXC,YAAY,CAAC,IAAMxD,cAAc4R,oBAAoBG;YAExD,iHAAiH;YACjH,8DAA8D;YAC9D,MAAMiN,oBACJ,CAAClH,4BAA6B,CAAA,CAACG,yBAAyBtH,WAAU;YAEpE,IAAIgG,aAAaoI,IAAI,GAAG,GAAG;gBACzB,MAAM9U,MAAM,qBAQX,CARW,IAAIE,MACd,CAAC,qCAAqC,EACpCwM,aAAaoI,IAAI,KAAK,IAAI,KAAK,IAChC,kDAAkD,EAAE;uBAAIpI;iBAAa,CACnE1V,GAAG,CAAC,CAACge,KAAO,CAAC,KAAK,EAAEA,IAAI,EACxB/f,IAAI,CACH,MACA,sFAAsF,CAAC,GAPjF,qBAAA;2BAAA;gCAAA;kCAAA;gBAQZ;gBACA+K,IAAIC,IAAI,GAAG;gBACX,MAAMD;YACR;YAEA,MAAMlQ,aAAaiF,SAASwB;YAE5B,IAAIoB,OAAO+C,YAAY,CAACua,WAAW,EAAE;gBACnC,MAAMC,WACJ/Z,QAAQ;gBAEV,MAAMga,eAAe,MAAM,IAAIrK,QAAkB,CAAC1P,SAASga;oBACzDF,SACE,YACA;wBAAE/T,KAAK1X,KAAKwL,IAAI,CAACF,SAAS;oBAAU,GACpC,CAACiL,KAAKtG;wBACJ,IAAIsG,KAAK;4BACP,OAAOoV,OAAOpV;wBAChB;wBACA5E,QAAQ1B;oBACV;gBAEJ;gBAEAoa,4BAA4Bpa,KAAK,CAACK,IAAI,IACjCob,aAAane,GAAG,CAAC,CAACtB,WACnBjM,KAAKwL,IAAI,CAAC0C,OAAO5C,OAAO,EAAE,UAAUW;YAG1C;YAEA,sEAAsE;YACtE,yEAAyE;YACzE,oEAAoE;YACpE,gEAAgE;YAChE,cAAc;YACd,IACE2I,QAAQC,GAAG,CAAC+W,gBAAgB,IAC5BhX,QAAQC,GAAG,CAACgX,uCAAuC,EACnD;gBACAxB,4BAA4Bpa,KAAK,CAACK,IAAI,CACpCtQ,KAAKwQ,QAAQ,CACXsC,KACA9S,KAAK8rB,UAAU,CAAClX,QAAQC,GAAG,CAACgX,uCAAuC,IAC/DjX,QAAQC,GAAG,CAACgX,uCAAuC,GACnD7rB,KAAKwL,IAAI,CACPsH,KACA8B,QAAQC,GAAG,CAACgX,uCAAuC;YAI/D;YAEA,MAAME,WAAqC;gBACzC;oBACEC,aAAa;oBACbC,iBAAiB/d,OAAO+J,eAAe,GAAG,IAAI;gBAChD;gBACA;oBACE+T,aAAa;oBACbC,iBAAiB/d,OAAO+C,YAAY,CAACua,WAAW,GAAG,IAAI;gBACzD;gBACA;oBACEQ,aAAa;oBACbC,iBAAiB/d,OAAO+C,YAAY,CAACib,iBAAiB,GAAG,IAAI;gBAC/D;gBACA;oBACEF,aAAa;oBACbC,iBAAiB/d,OAAO+C,YAAY,CAACgN,GAAG,GAAG,IAAI;gBACjD;gBACA;oBACE+N,aAAa;oBACbC,iBAAiB/d,OAAO+C,YAAY,CAACkb,gBAAgB,GAAG,IAAI;gBAC9D;gBACA;oBACEH,aAAa;oBACbC,iBAAiBziB,iCAAiC0E,UAAU,IAAI;gBAClE;aACD;YACD2I,UAAUS,MAAM,CACdyU,SAASxe,GAAG,CAAC,CAAC6e;gBACZ,OAAO;oBACLC,WAAWjoB;oBACXkoB,SAASF;gBACX;YACF;YAGF,MAAMre,iCACJzC,SACA+e;YAGF,iDAAiD;YACjD,sDAAsD;YACtD,IAAI5W,kBAAkBM,YAAYxQ,QAAQyQ,SAAS,EAAE;gBACnDzO,IAAIgQ,IAAI,CAAC;gBAET,MAAMpG,cACHU,UAAU,CAAC,qBACXC,YAAY,CAAC;oBACZ,MAAMrG,gBAAgB;wBACpB6B;wBACA4C;oBACF;gBACF;YACJ;YAEA,MAAMqB,qBAAyC,MAAM/C,aACnDxM,KAAKwL,IAAI,CAACF,SAASlJ,kBAAkBG;YAGvC,MAAMsK,oBAAuC;gBAC3CmC,SAAS;gBACT5B,QAAQ,CAAC;gBACTO,eAAe,CAAC;gBAChB4e,gBAAgB,EAAE;gBAClBC,SAAS9R;YACX;YAEA,MAAM+R,qBAA+B,EAAE;YAEvC,MAAM,EAAE5N,IAAI,EAAE,GAAG3Q;YAEjB,MAAMwe,wBAAwBpqB,oBAAoB+K,MAAM,CACtD,CAACzC,OACCmK,WAAW,CAACnK,KAAK,IACjBmK,WAAW,CAACnK,KAAK,CAACwM,UAAU,CAAC;YAEjCsV,sBAAsBC,OAAO,CAAC,CAAC/hB;gBAC7B,IAAI,CAACoC,SAASiM,GAAG,CAACrO,SAAS,CAACwZ,0BAA0B;oBACpD1U,YAAYqM,GAAG,CAACnR;gBAClB;YACF;YAEA,MAAMgiB,cAAc,CAAC3Z,cAAcyZ,sBAAsBrc,QAAQ,CAAC;YAClE,MAAMwc,sBACJ,CAACD,eAAe,CAACrI,yBAAyB,CAACH;YAE7C,MAAM0I,gBAAgB;mBAAIpd;mBAAgB1C;aAAS;YACnD,MAAM+f,iBAAiB3J,YAAYnK,GAAG,CAAC7V;YACvC,MAAM4pB,kBAAkB9P,aAAa6P;YACrC,MAAME,yBAAyB7J,YAAYnK,GAAG,CAC5C5V;YAEF,MAAM6pB,0BACJ/P,qBAAqB8P;YAEvB,MAAM5kB,uBAAuB;gBAC3BkY,YAAY;YACd;YAEA,MAAM4M,0BAA0B,IAAIlgB;YAEpC,sDAAsD;YACtD,mBAAmB;YACnB,yBAAyB;YACzB,gCAAgC;YAChC,IACE,CAACoH,iBACAyY,CAAAA,cAAc7W,MAAM,GAAG,KACtBqV,qBACAuB,uBACAjd,MAAK,GACP;gBACA,MAAMwd,uBACJje,cAAcU,UAAU,CAAC;gBAC3B,MAAMud,qBAAqBtd,YAAY,CAAC;oBACtClK,uBACE;2BACKknB;2BACA1d,SAASW,KAAK,CAAC1C,MAAM,CAAC,CAACzC,OAAS,CAACkiB,cAAczc,QAAQ,CAACzF;qBAC5D,EACDoC,UACA,IAAIoR,IACF5E,MAAMC,IAAI,CAAC0J,gBAAgBhW,OAAO,IAAII,GAAG,CACvC,CAAC,CAAC3C,MAAMwC,OAAO;wBACb,OAAO;4BAACxC;4BAAMwC,OAAOG,GAAG,CAAC,CAACC,QAAUA,MAAMC,QAAQ;yBAAE;oBACtD;oBAKN,MAAM4f,oBAAoB7T,MAAMC,IAAI,CAAC2J,YAAYjW,OAAO,IAAIS,IAAI,CAC9D,CAAC,CAAC0f,EAAE,EAAE,CAACC,EAAE,GAAKD,EAAEE,aAAa,CAACD;oBAGhC,MAAMra,YAAY,AAACxB,QAAQ,aACxByB,OAAO;oBAEV,MAAMsa,eAAmC;wBACvC,GAAGvf,MAAM;wBACT,sEAAsE;wBACtE,+BAA+B;wBAC/B,wEAAwE;wBACxE,6DAA6D;wBAC7Dwf,eAAe,CAACC;4BACd,+DAA+D;4BAC/D,iEAAiE;4BACjE,uEAAuE;4BACvE,UAAU;4BACV,EAAE;4BACF,6DAA6D;4BAC7D3gB,SAAS2f,OAAO,CAAC,CAAC/hB;gCAChB,IAAItH,eAAesH,OAAO;oCACxB6hB,mBAAmBnc,IAAI,CAAC1F;oCAExB,IAAImY,uBAAuB9J,GAAG,CAACrO,OAAO;wCACpC,iEAAiE;wCACjE,mBAAmB;wCACnB,IAAIiU,MAAM;4CACR8O,UAAU,CAAC,CAAC,CAAC,EAAE9O,KAAKsG,aAAa,GAAGva,MAAM,CAAC,GAAG;gDAC5CA;gDACAgjB,gBAAgB;4CAClB;wCACF,OAAO;4CACLD,UAAU,CAAC/iB,KAAK,GAAG;gDACjBA;gDACAgjB,gBAAgB;4CAClB;wCACF;oCACF,OAAO;wCACL,iEAAiE;wCACjE,iCAAiC;wCACjC,OAAOD,UAAU,CAAC/iB,KAAK;oCACzB;gCACF;4BACF;4BAEA,oEAAoE;4BACpE,cAAc;4BACduY,gBAAgBwJ,OAAO,CAAC,CAACvf,QAAQxC;gCAC/BwC,OAAOuf,OAAO,CAAC,CAACnf;oCACdmgB,UAAU,CAACngB,MAAMC,QAAQ,CAAC,GAAG;wCAC3B7C;wCACAijB,UAAUrgB,MAAMqb,eAAe;oCACjC;gCACF;4BACF;4BAEA,IAAIyC,qBAAqB,CAACrY,YAAY;gCACpC0a,UAAU,CAAC,OAAO,GAAG;oCACnB/iB,MAAMqS,cAAc,SAAS;gCAC/B;4BACF;4BAEA,IAAI4P,uBAAuB,CAAC5Z,YAAY;gCACtC0a,UAAU,CAAC,OAAO,GAAG;oCACnB/iB,MAAM;gCACR;4BACF;4BAEA,wDAAwD;4BACxD,gDAAgD;4BAChDyiB,kBAAkBV,OAAO,CAAC,CAAC,CAAC5F,iBAAiB3Z,OAAO;gCAClD,MAAMqb,YAAYlF,kBAAkBuK,GAAG,CAAC/G;gCACxC,MAAMgH,iBAAiBtF,CAAAA,6BAAAA,UAAWU,OAAO,MAAK;gCAE9C,MAAM1C,oBAA6BgC,YAC/B1f,uBAAuBmF,OAAO+C,YAAY,CAACgN,GAAG,IAC9C;gCAEJ7Q,OAAOuf,OAAO,CAAC,CAACnf;oCACd,8DAA8D;oCAC9D,wDAAwD;oCACxD,0DAA0D;oCAC1D,8DAA8D;oCAC9D,0CAA0C;oCAC1C,IACEA,MAAMyb,kBAAkB,IACxBzb,MAAMyb,kBAAkB,CAAChT,MAAM,GAAG,KAClC,mDAAmD;oCACnD,yDAAyD;oCACzD,0DAA0D;oCAC1D,qBAAqB;oCACrB,CACE/H,CAAAA,OAAO+C,YAAY,CAAC+c,kBAAkB,IACtC9f,OAAO+J,eAAe,AAAD,GAEvB;wCACA;oCACF;oCAEA0V,UAAU,CAACngB,MAAMC,QAAQ,CAAC,GAAG;wCAC3B7C,MAAMmc;wCACN8G,UAAUrgB,MAAMqb,eAAe;wCAC/BoF,sBAAsBzgB,MAAMsb,mBAAmB;wCAC/CoF,iBAAiBH;wCACjBI,WAAW;wCACXC,oBAAoB3H;wCACpB4H,wBAAwB,CAAC7gB,MAAM0b,uBAAuB;oCACxD;gCACF;4BACF;4BAEA,IAAIrK,MAAM;gCACR,KAAK,MAAMjU,QAAQ;uCACd8E;uCACA1C;uCACCse,oBAAoB;wCAAC;qCAAO,GAAG,EAAE;uCACjCuB,sBAAsB;wCAAC;qCAAO,GAAG,EAAE;iCACxC,CAAE;oCACD,MAAMyB,QAAQthB,SAASiM,GAAG,CAACrO;oCAC3B,MAAM2d,YAAYjlB,eAAesH;oCACjC,MAAM2jB,aAAaD,SAASvL,uBAAuB9J,GAAG,CAACrO;oCAEvD,KAAK,MAAM4jB,UAAU3P,KAAK9R,OAAO,CAAE;4CAMzB4gB;wCALR,+DAA+D;wCAC/D,IAAIW,SAAS/F,aAAa,CAACgG,YAAY;wCACvC,MAAMhe,aAAa,CAAC,CAAC,EAAEie,SAAS5jB,SAAS,MAAM,KAAKA,MAAM;wCAE1D+iB,UAAU,CAACpd,WAAW,GAAG;4CACvB3F,MAAM+iB,EAAAA,mBAAAA,UAAU,CAAC/iB,KAAK,qBAAhB+iB,iBAAkB/iB,IAAI,KAAIA;4CAChC6jB,SAASD;4CACTZ,gBAAgBW;wCAClB;oCACF;oCAEA,IAAID,OAAO;wCACT,qDAAqD;wCACrD,OAAOX,UAAU,CAAC/iB,KAAK;oCACzB;gCACF;4BACF;4BAEA,OAAO+iB;wBACT;oBACF;oBAEA,MAAMpa,SAASvT,KAAKwL,IAAI,CAACF,SAAS;oBAClC,MAAMojB,eAAe,MAAMxb,UACzBJ,KACA;wBACEO,YAAYoa;wBACZ1a;wBACAO,QAAQ;wBACRF,aAAa;wBACbQ;wBACAC;wBACA9D,OAAO+c;wBACPvZ;wBACAob,eAAe;wBACfzc,YAAYlB,mBAAmByc;wBAC/Bxa;oBACF,GACA9D;oBAGF,sDAAsD;oBACtD,IAAI,CAACuf,cAAc;oBAEnB,MAAME,kBAAkB,CAACphB;4BACKkhB;wBAA5B,MAAM7E,uBAAsB6E,2BAAAA,aAAaG,MAAM,CAACf,GAAG,CACjDtgB,MAAMC,QAAQ,sBADYihB,yBAEzB7E,mBAAmB;wBAEtB,kEAAkE;wBAClE,+DAA+D;wBAC/D,sBAAsB;wBACtB,IACEA,uBACA,CAACrc,MAAM0b,uBAAuB,IAC9B1b,MAAMub,YAAY,KAAK/f,aAAasgB,SAAS,EAC7C;4BACA,OAAOtgB,aAAaqgB,sBAAsB;wBAC5C;wBAEA,4DAA4D;wBAC5D,6BAA6B;wBAC7B,IAAI,CAAC7b,MAAMub,YAAY,EAAE;4BACvB,OAAO/f,aAAa8lB,SAAS;wBAC/B;wBAEA,OAAOthB,MAAMub,YAAY;oBAC3B;oBAEA,MAAMgG,kBAAkB,CACtBC,YACAC,oBAAgC,KAAK;4BAGnCP;wBADF,MAAMQ,gBACJR,2BAAAA,aAAaG,MAAM,CAACf,GAAG,CAACkB,gCAAxBN,yBAAqCQ,YAAY;wBAEnD,IAAI,CAACA,cAAc;4BACjB,OAAO;gCAAExG,YAAYuG;gCAAmBE,QAAQza;4BAAU;wBAC5D;wBAEA,IACEwa,aAAaxG,UAAU,KAAK,SAC5BwG,aAAaxG,UAAU,GAAG,KAC1BwG,aAAaC,MAAM,KAAKza,WACxB;4BACA,OAAO;gCACLgU,YAAYwG,aAAaxG,UAAU;gCACnCyG,QAAQjhB,OAAOkhB,UAAU;4BAC3B;wBACF;wBAEA,OAAOF;oBACT;oBAEA,IAAItb,eAAegB,QAAQC,GAAG,CAACwa,sBAAsB,KAAK,KAAK;wBAC7D/mB,mBAAmBomB;oBACrB;oBAEA3qB,gCAAgC;wBAC9BuH,SAAS4C,OAAO5C,OAAO;wBACvBgkB,QAAQ;4BACNra;+BACGyZ,aAAaa,2BAA2B,CAACC,MAAM;yBACnD;oBACH;oBAEA3iB,kBAAkB0f,cAAc,GAAG/S,MAAMC,IAAI,CAC3CiV,aAAae,gBAAgB;oBAG/B,2CAA2C;oBAC3C,KAAK,MAAM7kB,QAAQ8E,YAAa;wBAC9B,MAAMggB,eAAe/rB,YAAYiH,MAAMU,SAASoJ,WAAW;wBAC3D,MAAMjV,GAAGkwB,MAAM,CAACD;oBAClB;oBAEArC,kBAAkBV,OAAO,CAAC,CAAC,CAAC5F,iBAAiByB,kBAAkB;4BAO5BhF,gBAMRA;wBAZzB,MAAM5Y,OAAOyY,mBAAmByK,GAAG,CAAC/G;wBACpC,IAAI,CAACnc,MAAM,MAAM,qBAAoC,CAApC,IAAIzB,eAAe,mBAAnB,qBAAA;mCAAA;wCAAA;0CAAA;wBAAmC;wBAEpD,MAAMsf,YAAYlF,kBAAkBuK,GAAG,CAAC/G;wBACxC,IAAI,CAAC0B,WAAW,MAAM,qBAA0C,CAA1C,IAAItf,eAAe,yBAAnB,qBAAA;mCAAA;wCAAA;0CAAA;wBAAyC;wBAE/D,MAAMymB,mBAAmB,IAAI3iB,KAAIuW,iBAAAA,UAAUsK,GAAG,CAACljB,0BAAd4Y,eAAqBqD,aAAa;wBAEnE,IAAIgJ,oBACFpH,UAAUC,UAAU,KAAK,KACzBqG,gBAAgBnkB,MAAM8d,UAAU,KAAK;wBAEvC,IAAImH,uBAAqBrM,kBAAAA,UAAUsK,GAAG,CAACljB,0BAAd4Y,gBAAqBmD,QAAQ,GAAE;4BACtD,uEAAuE;4BACvE,qFAAqF;4BACrFnD,UAAU8E,GAAG,CAAC1d,MAAM;gCAClB,GAAI4Y,UAAUsK,GAAG,CAACljB,KAAK;gCACvB+b,UAAU;gCACVD,OAAO;4BACT;wBACF;wBAEA,MAAMoJ,oBAAoBloB,gBAAgBmf;wBAE1C,kEAAkE;wBAClE,yBAAyB;wBACzB,MAAMN,oBACJ,CAACqJ,qBACD/mB,uBAAuBmF,OAAO+C,YAAY,CAACgN,GAAG,IAC1C,OACAvJ;wBAEN,MAAMqb,sBACJ,uEAAuE;wBACvE7hB,OAAO8hB,eAAe,IAAI5mB;wBAE5B,0FAA0F;wBAC1F,4CAA4C;wBAC5C,MAAM6mB,YAAwB;4BAC5B;gCAAEC,MAAM;gCAAUrM,KAAK7c;4BAAc;4BACrC;gCACEkpB,MAAM;gCACNrM,KAAK;gCACL0G,OAAO;4BACT;4BACA,iGAAiG;4BACjG,iGAAiG;+BAC7F9D,oBACA;gCACE;oCACEyJ,MAAM;oCACNrM,KAAK;oCACL0G,OAAOwF;gCACT;6BACD,GACD,EAAE;yBACP;wBAED,mEAAmE;wBACnE,6DAA6D;wBAC7D,mEAAmE;wBACnE,8DAA8D;wBAC9D,2BAA2B;wBAC3B,MAAMI,0BAA8C,EAAE;wBACtD,MAAMC,2BAA+C,EAAE;wBAEvD,mEAAmE;wBACnE,iEAAiE;wBACjE,+DAA+D;wBAC/D,iEAAiE;wBACjE,mDAAmD;wBACnD,MAAMC,iCAAqD,EAAE;wBAC7D,MAAMC,+BAAmD,EAAE;wBAC3D,KAAK,MAAMC,oBAAoB/H,kBAAmB;4BAChD,IACE+H,iBAAiBzH,mBAAmB,IACpCyH,iBAAiBzH,mBAAmB,CAAC7S,MAAM,GAAG,GAC9C;gCACAoa,+BAA+B/f,IAAI,CAACigB;4BACtC,OAAO;gCACLD,6BAA6BhgB,IAAI,CAACigB;4BACpC;wBACF;wBAEA,MAAMC,+BAA+BtmB,gBACnCmmB,gCACA,CAACE,mBAAqBA,iBAAiB9iB,QAAQ;wBAEjD,MAAMgjB,6BAA6BvmB,gBACjComB,8BACA,CAACC,mBAAqBA,iBAAiB9iB,QAAQ;wBAGjD+a,oBAAoB;+BACfiI;+BACAD;yBACJ;wBAED,KAAK,MAAMD,oBAAoB/H,kBAAmB;4BAChD,IACE/B,qBACA8J,iBAAiBzH,mBAAmB,IACpCyH,iBAAiBzH,mBAAmB,CAAC7S,MAAM,GAAG,GAC9C;gCACA,6DAA6D;gCAC7D,8BAA8B;gCAC9Bma,yBAAyB9f,IAAI,CAACigB;4BAChC,OAAO;gCACL,4DAA4D;gCAC5D,uCAAuC;gCACvCJ,wBAAwB7f,IAAI,CAACigB;4BAC/B;wBACF;wBAEA,gCAAgC;wBAChC,KAAK,MAAM/iB,SAAS2iB,wBAAyB;4BAC3C,IAAI7sB,eAAesH,SAAS4C,MAAMC,QAAQ,KAAK7C,MAAM;4BAErD,MAAM,EACJyX,WAAW,CAAC,CAAC,EACbwH,mBAAmB,EACnB6G,YAAY,EACb,GAAGhC,aAAaG,MAAM,CAACf,GAAG,CAACtgB,MAAMC,QAAQ,KAAK,CAAC;4BAEhD,MAAMyhB,eAAeH,gBACnBvhB,MAAMC,QAAQ,EACdgb,UAAUC,UAAU;4BAGtBlF,UAAU8E,GAAG,CAAC9a,MAAMC,QAAQ,EAAE;gCAC5B,GAAI+V,UAAUsK,GAAG,CAACtgB,MAAMC,QAAQ,CAAC;gCACjCijB;gCACA7G;gCACAH,qBAAqBwF;4BACvB;4BAEA,uEAAuE;4BACvE1L,UAAU8E,GAAG,CAAC1d,MAAM;gCAClB,GAAI4Y,UAAUsK,GAAG,CAACljB,KAAK;gCACvB8lB;gCACA7G;gCACAH,qBAAqBwF;4BACvB;4BAEA,IAAIA,aAAaxG,UAAU,KAAK,GAAG;gCACjC,MAAMiI,kBAAkBjtB,kBAAkB8J,MAAMC,QAAQ;gCAExD,IAAImjB;gCACJ,IAAId,mBAAmB;oCACrBc,YAAY;gCACd,OAAO;oCACLA,YAAY5wB,KAAK6wB,KAAK,CAACrlB,IAAI,CAAC,GAAGmlB,kBAAkBnwB,YAAY;gCAC/D;gCAEA,IAAIswB,oBAAmC;gCACvC,6DAA6D;gCAC7D,6DAA6D;gCAC7D,6DAA6D;gCAC7D,uBAAuB;gCACvB,IACE,CAAChB,qBACD9R,mBACA,kDAAkD;gCAClD,6DAA6D;gCAC7D,2DAA2D;gCAC3D,0DAA0D;gCAC1D,cAAc;gCACd,CACE9P,CAAAA,OAAO+C,YAAY,CAAC+c,kBAAkB,IACtC9f,OAAO+J,eAAe,IACtBwO,iBAAgB,GAElB;oCACAqK,oBAAoB9wB,KAAK6wB,KAAK,CAACrlB,IAAI,CACjC,GAAGmlB,kBAAkBpwB,qBAAqB;gCAE9C;gCAEA,MAAMwwB,OAAO5qB,YAAYkc;gCACzB,MAAM2O,SACJxjB,MAAMC,QAAQ,KAAKtK,6BACf,MACA4tB,KAAKC,MAAM;gCAEjBnkB,kBAAkBO,MAAM,CAACI,MAAMC,QAAQ,CAAC,GAAG;oCACzCwjB,eAAeD;oCACfE,gBAAgBH,KAAKtb,OAAO;oCAC5B0b,eAAenT,kBACXyI,oBACEvd,cAAckoB,gBAAgB,GAC9BloB,cAAcmoB,MAAM,GACtB3c;oCACJ4c,iBAAiB7K;oCACjB8K,uBAAuBtB;oCACvBuB,0BAA0BtC,aAAaxG,UAAU;oCACjD+I,sBAAsBvC,aAAaC,MAAM;oCACzC7hB,UAAU1C;oCACVgmB;oCACAE;oCACAY,aAAahnB;gCACf;4BACF,OAAO;gCACLmlB,oBAAoB;gCAEpB,IAAID,iBAAiB3W,GAAG,CAACzL,MAAMC,QAAQ,GAAG;oCACxC,MAAMkkB,WAAWnO,UAAUsK,GAAG,CAACljB;oCAC/B,6DAA6D;oCAC7D,uBAAuB;oCACvBglB,iBAAiBpG,MAAM,CAAChc,MAAMC,QAAQ;oCAEtC,sDAAsD;oCACtD,IAAImiB,iBAAiBvE,IAAI,KAAK,GAAG;wCAC/B8B,wBAAwB3D,MAAM,CAAC5e;oCACjC,OAAO;wCACLuiB,wBAAwBpR,GAAG,CAACnR;oCAC9B;oCAEA4Y,UAAU8E,GAAG,CAAC1d,MAAM;wCAClB,GAAG+mB,QAAQ;wCACX9K,eAAerN,MAAMC,IAAI,CAACmW;wCAC1B,kEAAkE;wCAClElJ,OAAOkJ,iBAAiBvE,IAAI,KAAK,IAAI,QAAQsG,SAASjL,KAAK;oCAC7D;gCACF,OAAO;oCACL,8DAA8D;oCAC9D,oBAAoB;oCACpBlD,UAAU8E,GAAG,CAAC9a,MAAMC,QAAQ,EAAE;wCAC5B,GAAI+V,UAAUsK,GAAG,CAACtgB,MAAMC,QAAQ,CAAC;wCACjCiZ,OAAO;wCACPC,UAAU;oCACZ;gCACF;4BACF;wBACF;wBAEA,IAAI,CAACkJ,qBAAqBvsB,eAAesH,OAAO;4BAC9C,iEAAiE;4BACjE,0DAA0D;4BAC1D,sBAAsB;4BACtB,IAAI,CAAC6b,mBAAmB;gCACtB2J,yBAAyB9f,IAAI,CAAC;oCAC5BsY,QAAQ,CAAC;oCACTnb,UAAU7C;oCACVie,iBAAiBje;oCACjBke,qBAAqB,EAAE;oCACvBC,cACEzF,cAAcwK,GAAG,CAAC/G,oBAClB/d,aAAa8lB,SAAS;oCACxB7F,oBAAoB,EAAE;oCACtBC,yBAAyB;gCAC3B;4BACF;4BAEA,KAAK,MAAM1b,SAAS4iB,yBAA0B;oCAG3B1B;gCAFjB,MAAMiC,kBAAkBjtB,kBAAkB8J,MAAMC,QAAQ;gCAExD,MAAM4U,YAAWqM,2BAAAA,aAAaG,MAAM,CAACf,GAAG,CACtCtgB,MAAMC,QAAQ,sBADCihB,yBAEdrM,QAAQ;gCAEX,MAAM6M,eAAeH,gBAAgBvhB,MAAMC,QAAQ;gCAEnD,IAAImjB,YAA2B;gCAC/B,IAAI,CAACd,mBAAmB;oCACtBc,YAAY5wB,KAAK6wB,KAAK,CAACrlB,IAAI,CAAC,GAAGmlB,kBAAkBnwB,YAAY;gCAC/D;gCAEA,IAAIswB,oBAAmC;gCACvC,IAAIc,eAAevT,eAAe1Q,aAAa,CAACmZ,IAAI,CAClD,CAACnI,IAAMA,EAAE/T,IAAI,KAAK4C,MAAMC,QAAQ;gCAElC,IAAI,CAACqiB,qBAAqB9R,iBAAiB;oCACzC,IACE,kDAAkD;oCAClD,6DAA6D;oCAC7D,2DAA2D;oCAC3D,0DAA0D;oCAC1D,cAAc;oCACd,CAAC9P,OAAO+C,YAAY,CAAC+c,kBAAkB,IACvC,CAAC9f,OAAO+J,eAAe,IACvB,CAACwO,mBACD;wCACAqK,oBAAoB9wB,KAAK6wB,KAAK,CAACrlB,IAAI,CACjC,GAAGmlB,kBAAkBpwB,qBAAqB;oCAE9C;oCAEA,4DAA4D;oCAC5D,2DAA2D;oCAC3D,6DAA6D;oCAC7D,uBAAuB;oCACvB,IAAI,CAACqxB,cAAc;wCACjBA,eAAejnB,YAAY6C,MAAMC,QAAQ,EAAE7C;wCAC3CuT,YAAYmK,GAAG,CAAC9a,MAAMC,QAAQ,EAAE7C;wCAEhC,yDAAyD;wCACzD,wBAAwB;wCACxBgnB,aAAaC,mBAAmB,GAAG;wCAEnC,4DAA4D;wCAC5D,wBAAwB;wCACxBlkB,cAAc2C,IAAI,CAACshB;oCACrB;gCACF;gCAEA,IACE,CAAC9B,qBACAzN,CAAAA,CAAAA,4BAAAA,SAAUyP,YAAY,KACpBtkB,MAAMyb,kBAAkB,IACvBzb,MAAMyb,kBAAkB,CAAChT,MAAM,GAAG,CAAC,GACvC;oCACA,2DAA2D;oCAC3D,6DAA6D;oCAC7D,iBAAiB;oCACjB,IAAI,CAAC2b,cAAc;wCACjBA,eAAejkB,cAAcmZ,IAAI,CAAC,CAACnI,IAAMA,EAAE/T,IAAI,KAAKA;wCAEpD,wDAAwD;wCACxD,IAAI,CAACgnB,cAAc;4CACjB,MAAM,qBAA6C,CAA7C,IAAIzoB,eAAe,4BAAnB,qBAAA;uDAAA;4DAAA;8DAAA;4CAA4C;wCACpD;oCACF;oCAEA,IAAIkZ,4BAAAA,SAAUyP,YAAY,EAAE;wCAC1B,MAAMC,kBAAkB1P,SAASyP,YAAY,CAAChL,IAAI,CAAC,CAACkL,OAClDA,KAAKC,QAAQ,CAAC;wCAEhB,IAAI,CAACF,iBAAiB;4CACpB,MAAM,qBAAoD,CAApD,IAAItb,MAAM,CAAC,uCAAuC,CAAC,GAAnD,qBAAA;uDAAA;4DAAA;8DAAA;4CAAmD;wCAC3D;wCAEA,kDAAkD;wCAClD,iDAAiD;wCACjD,0CAA0C;wCAC1C,MAAMyb,wBAAwB5oB,8BAC5BkE,MAAMC,QAAQ,EACdskB;wCAGFG,sBAAsBhnB,MAAM,GAC1BgnB,sBAAsBhnB,MAAM,CAACwD,OAAO,CAClC,8BACA,CAAC,6DAA6D,CAAC;wCAEnEwjB,sBAAsBC,WAAW,GAC/BD,sBAAsBC,WAAW,CAACzjB,OAAO,CACvC,yBACA;wCAEJkjB,aAAaQ,yBAAyB,KAAK,EAAE;wCAC7CR,aAAaQ,yBAAyB,CAAC9hB,IAAI,CACzC4hB;oCAEJ,OAOK,IACH1kB,MAAMyb,kBAAkB,IACxBzb,MAAMyb,kBAAkB,CAAChT,MAAM,GAAG,GAClC;wCACA2b,aAAaS,qBAAqB,GAAG;wCACrCT,aAAaQ,yBAAyB,GAAG;4CACvC/oB,qCACEuoB,aAAahnB,IAAI,EACjB,2DAA2D;4CAC3D,2DAA2D;4CAC3D,4DAA4D;4CAC5D;yCAEH;oCACH;gCACF;gCAEA4Y,UAAU8E,GAAG,CAAC9a,MAAMC,QAAQ,EAAE;oCAC5B,GAAI+V,UAAUsK,GAAG,CAACtgB,MAAMC,QAAQ,CAAC;oCACjC6kB,mBAAmB;oCACnB,gEAAgE;oCAChE,2CAA2C;oCAC3C5B,cAAcjK;gCAChB;gCAEA,MAAMsC,eAAe6F,gBAAgBphB;gCAErC,+DAA+D;gCAC/D,+DAA+D;gCAC/D,oDAAoD;gCACpD,iDAAiD;gCACjD,MAAM+kB,uBACJ9L,qBAAqBsC,iBAAiB/f,aAAasgB,SAAS,GACxD4F,eACAxa;gCAEN,MAAMqB,WAAqB9M,4BACzB8f,cACAvb,MAAMC,QAAQ;gCAGhB,MAAMsjB,OACJ1O,YACAoE,qBACAsC,iBAAiB/f,aAAasgB,SAAS,GACnCnjB,YAAYkc,YACZ,CAAC;gCAEPxV,kBAAkBc,aAAa,CAACH,MAAMC,QAAQ,CAAC,GAAG;oCAChD6jB,iBAAiB7K;oCACjB0K,eAAenT,kBACXyI,oBACEvd,cAAckoB,gBAAgB,GAC9BloB,cAAcmoB,MAAM,GACtB3c;oCACJ6c,uBAAuBtB;oCACvBnlB,YAAYzJ,oBACVuF,mBAAmB4G,MAAMC,QAAQ,EAAE;wCACjC1C,iBAAiB;oCACnB,GAAGE,EAAE,CAACC,MAAM;oCAEd0lB;oCACA7a;oCACAyc,kBAAkB,EAAED,wCAAAA,qBAAsB7J,UAAU;oCACpD+J,cAAc,EAAEF,wCAAAA,qBAAsBpD,MAAM;oCAC5CuD,gBAAgB3B,KAAKC,MAAM;oCAC3B2B,iBAAiB5B,KAAKtb,OAAO;oCAC7BwT,oBAAoBlT,WAChBvI,MAAMyb,kBAAkB,GACxBvU;oCACJke,qBACEplB,MAAMsb,mBAAmB,IACzBtb,MAAMsb,mBAAmB,CAAC7S,MAAM,GAAG,IAC/BrL,OACA8J;oCACNoU,qBAAqBtb,MAAMsb,mBAAmB;oCAC9C+J,gBAAgB,CAACjC,YACb,OACAvvB,oBACEuF,mBAAmBgqB,WAAW;wCAC5B7lB,iBAAiB;wCACjB+nB,eAAe;wCACfC,8BAA8B;oCAChC,GAAG9nB,EAAE,CAACC,MAAM;oCAElB4lB;oCACAkC,wBAAwB,CAAClC,oBACrBpc,YACArT,oBACEuF,mBAAmBkqB,mBAAmB;wCACpC/lB,iBAAiB;wCACjB+nB,eAAe;wCACfC,8BAA8B;oCAChC,GAAG9nB,EAAE,CAACC,MAAM;oCAElBwmB,aAAahnB;gCACf;4BACF;wBACF;oBACF;oBAEA,MAAMuoB,mBAAmB,OACvBC,YACAtoB,MACAoF,MACAse,OACA6E,KACAC,oBAAoB,KAAK;wBAEzB,OAAOhG,qBACJvd,UAAU,CAAC,sBACXC,YAAY,CAAC;4BACZE,OAAO,GAAGA,KAAK,CAAC,EAAEmjB,KAAK;4BACvB,MAAME,OAAOrzB,KAAKwL,IAAI,CAAC+H,QAAQvD;4BAC/B,MAAMgJ,WAAWrV,YACfuvB,YACA5nB,SACAoJ,WACA;4BAGF,MAAM4e,eAAetzB,KAClBwQ,QAAQ,CACPxQ,KAAKwL,IAAI,CAACF,SAASlJ,mBACnBpC,KAAKwL,IAAI,CACPxL,KAAKwL,IAAI,CACPwN,UACA,yDAAyD;4BACzD,4BAA4B;4BAC5Bka,WACGK,KAAK,CAAC,GACNvI,KAAK,CAAC,KACNzd,GAAG,CAAC,IAAM,MACV/B,IAAI,CAAC,OAEVwE,OAGHtB,OAAO,CAAC,OAAO;4BAElB,IACE,CAAC4f,SACD,CACE,mDAAmD;4BACnD,kDAAkD;4BAEhDhsB,CAAAA,oBAAoB+N,QAAQ,CAACzF,SAC7B,CAAC8hB,sBAAsBrc,QAAQ,CAACzF,KAAI,GAGxC;gCACA6Y,aAAa,CAAC7Y,KAAK,GAAG0oB;4BACxB;4BAEA,MAAME,OAAOxzB,KAAKwL,IAAI,CAACF,SAASlJ,kBAAkBkxB;4BAClD,MAAMG,aACJ5mB,kBAAkB0f,cAAc,CAAClc,QAAQ,CAACzF;4BAE5C,2DAA2D;4BAC3D,0DAA0D;4BAC1D,qBAAqB;4BACrB,IAAI,AAAC,CAAA,CAACiU,QAAQuU,iBAAgB,KAAM,CAACK,YAAY;gCAC/C,MAAMh0B,GAAG4K,KAAK,CAACrK,KAAKyQ,OAAO,CAAC+iB,OAAO;oCAAE9iB,WAAW;gCAAK;gCACrD,MAAMjR,GAAGi0B,MAAM,CAACL,MAAMG;4BACxB,OAAO,IAAI3U,QAAQ,CAACyP,OAAO;gCACzB,wDAAwD;gCACxD,oDAAoD;gCACpD,OAAO7K,aAAa,CAAC7Y,KAAK;4BAC5B;4BAEA,IAAIiU,MAAM;gCACR,IAAIuU,mBAAmB;gCAEvB,MAAMO,YAAY/oB,SAAS,MAAM5K,KAAK4zB,OAAO,CAAC5jB,QAAQ;gCACtD,MAAM6jB,sBAAsBP,aAAaC,KAAK,CAC5C,SAAStd,MAAM;gCAGjB,KAAK,MAAMuY,UAAU3P,KAAK9R,OAAO,CAAE;oCACjC,MAAM+mB,UAAU,CAAC,CAAC,EAAEtF,SAAS5jB,SAAS,MAAM,KAAKA,MAAM;oCAEvD,IACE0jB,SACAzhB,kBAAkB0f,cAAc,CAAClc,QAAQ,CAACyjB,UAC1C;wCACA;oCACF;oCAEA,MAAMC,sBAAsB/zB,KACzBwL,IAAI,CACH,SACAgjB,SAASmF,WACT,8DAA8D;oCAC9D,+BAA+B;oCAC/B/oB,SAAS,MAAM,KAAKipB,qBAErBnlB,OAAO,CAAC,OAAO;oCAElB,MAAMslB,cAAch0B,KAAKwL,IAAI,CAC3B+H,QACAib,SAASmF,WACT/oB,SAAS,MAAM,KAAKoF;oCAEtB,MAAMikB,cAAcj0B,KAAKwL,IAAI,CAC3BF,SACAlJ,kBACA2xB;oCAGF,IAAI,CAACzF,OAAO;wCACV7K,aAAa,CAACqQ,QAAQ,GAAGC;oCAC3B;oCACA,MAAMt0B,GAAG4K,KAAK,CAACrK,KAAKyQ,OAAO,CAACwjB,cAAc;wCACxCvjB,WAAW;oCACb;oCACA,MAAMjR,GAAGi0B,MAAM,CAACM,aAAaC;gCAC/B;4BACF;wBACF;oBACJ;oBAEA,eAAeC;wBACb,OAAO9G,qBACJvd,UAAU,CAAC,gCACXC,YAAY,CAAC;4BACZ,MAAMujB,OAAOrzB,KAAKwL,IAAI,CACpBF,SACA,UACA,OACA;4BAEF,MAAMyoB,sBAAsB/zB,KACzBwL,IAAI,CAAC,SAAS,YACdkD,OAAO,CAAC,OAAO;4BAElB,IAAInP,WAAW8zB,OAAO;gCACpB,8CAA8C;gCAC9C,MAAM5zB,GAAG4K,KAAK,CACZrK,KAAKyQ,OAAO,CACVzQ,KAAKwL,IAAI,CAACF,SAAS,UAAUyoB,uBAE/B;oCAAErjB,WAAW;gCAAK;gCAEpB,MAAMjR,GAAGkR,QAAQ,CACf0iB,MACArzB,KAAKwL,IAAI,CAACF,SAAS,UAAUyoB;gCAG/B,mEAAmE;gCACnE,yEAAyE;gCACzE,IAAIlV,MAAM;oCACR,KAAK,MAAM2P,UAAU3P,KAAK9R,OAAO,CAAE;wCACjC,MAAM+mB,UAAU,CAAC,CAAC,EAAEtF,OAAO,IAAI,CAAC;wCAChC/K,aAAa,CAACqQ,QAAQ,GAAGC;oCAC3B;gCACF;gCAEAtQ,aAAa,CAAC,OAAO,GAAGsQ;4BAC1B;wBACF;oBACJ;oBAEA,eAAeI;wBACb,OAAO/G,qBACJvd,UAAU,CAAC,mCACXC,YAAY,CAAC;4BACZ,2DAA2D;4BAC3D,IACEvQ,WAAWS,KAAKwL,IAAI,CAACF,SAAS,UAAU,SAAS,cACjD;gCACA;4BACF;4BAEA,oDAAoD;4BACpD,MAAM+nB,OAAOrzB,KAAKwL,IAAI,CACpBF,SACA,UACA,OACA;4BAEF,IAAI/L,WAAW8zB,OAAO;gCACpB,MAAMe,eAAep0B,KAAKwL,IAAI,CAC5BF,SACA,UACA,SACA;gCAGF,8CAA8C;gCAC9C,MAAM7L,GAAG4K,KAAK,CAACrK,KAAKyQ,OAAO,CAAC2jB,eAAe;oCACzC1jB,WAAW;gCACb;gCACA,MAAMjR,GAAGkR,QAAQ,CAAC0iB,MAAMe;gCAExB3Q,aAAa,CAAC,OAAO,GAAGzjB,KACrBwL,IAAI,CAAC,SAAS,YACdkD,OAAO,CAAC,OAAO;4BACpB;wBACF;oBACJ;oBAEA,oEAAoE;oBACpE,IAAIse,iBAAiB;wBACnB,MAAMkH;oBACR,OAAO;wBACL,sGAAsG;wBACtG,IACE,CAACjX,eACD,CAACC,aACDoO,qBACA,CAACrY,YACD;4BACA,MAAMggB,iBAAiB,WAAW,QAAQ,QAAQ,OAAO;wBAC3D;oBACF;oBAEA,IAAIpG,uBAAuB,CAAC5Z,YAAY;wBACtC,MAAMggB,iBAAiB,WAAW,QAAQ,QAAQ,OAAO;oBAC3D;oBAEA,8EAA8E;oBAC9E,IACE/F,2BACAnS,kBACA7N,OAAOQ,IAAI,CAACqN,gBAAgB9E,MAAM,GAAG,GACrC;wBACA,MAAMke;oBACR;oBAEA,KAAK,MAAMvpB,QAAQkiB,cAAe;wBAChC,MAAMwB,QAAQthB,SAASiM,GAAG,CAACrO;wBAC3B,MAAMypB,sBAAsBtR,uBAAuB9J,GAAG,CAACrO;wBACvD,MAAM2d,YAAYjlB,eAAesH;wBACjC,MAAMoF,OAAOtM,kBAAkBkH;wBAE/B,MAAM+mB,WAAWnO,UAAUsK,GAAG,CAACljB;wBAC/B,MAAM0pB,eAAe5F,aAAa6F,MAAM,CAACzG,GAAG,CAACljB;wBAC7C,IAAI+mB,YAAY2C,cAAc;4BAC5B,qBAAqB;4BACrB,IAAI3C,SAAS9K,aAAa,EAAE;gCAC1B8K,SAAS/H,gBAAgB,GAAG+H,SAAS9K,aAAa,CAACtZ,GAAG,CACpD,CAACyL;oCACC,MAAMsI,WAAWgT,aAAaE,eAAe,CAAC1G,GAAG,CAAC9U;oCAClD,IAAI,OAAOsI,aAAa,aAAa;wCACnC,MAAM,qBAAyC,CAAzC,IAAI7K,MAAM,iCAAV,qBAAA;mDAAA;wDAAA;0DAAA;wCAAwC;oCAChD;oCAEA,OAAO6K;gCACT;4BAEJ;4BACAqQ,SAAShI,YAAY,GAAG2K,aAAaE,eAAe,CAAC1G,GAAG,CAACljB;wBAC3D;wBAEA,+DAA+D;wBAC/D,gEAAgE;wBAChE,YAAY;wBACZ,MAAM6pB,gBAAgB,CAAEnG,CAAAA,SAAS/F,aAAa,CAAC8L,mBAAkB;wBAEjE,IAAII,eAAe;4BACjB,MAAMxB,iBAAiBroB,MAAMA,MAAMoF,MAAMse,OAAO;wBAClD;wBAEA,IAAIA,OAAO;4BACT,yDAAyD;4BACzD,oDAAoD;4BACpD,IAAI,CAAC/F,WAAW;gCACd,MAAM0K,iBAAiBroB,MAAMA,MAAMoF,MAAMse,OAAO;gCAEhD,IAAIzP,MAAM;oCACR,+DAA+D;oCAC/D,KAAK,MAAM2P,UAAU3P,KAAK9R,OAAO,CAAE;wCACjC,MAAM2nB,aAAa,CAAC,CAAC,EAAElG,SAAS5jB,SAAS,MAAM,KAAKA,MAAM;wCAE1D,MAAMskB,eAAeH,gBAAgB2F;wCAErC7nB,kBAAkBO,MAAM,CAACsnB,WAAW,GAAG;4CACrClD,0BAA0BtC,aAAaxG,UAAU;4CACjD+I,sBAAsBvC,aAAaC,MAAM;4CACzCmC,iBAAiB5c;4CACjByc,eAAezc;4CACfpH,UAAU;4CACVsjB,WAAW5wB,KAAK6wB,KAAK,CAACrlB,IAAI,CACxB,eACAsB,SACA,GAAG4nB,WAAW,KAAK,CAAC;4CAEtB5D,mBAAmBpc;4CACnBgd,aAAahnB;wCACf;oCACF;gCACF,OAAO;oCACL,MAAMwkB,eAAeH,gBAAgBnkB;oCAErCiC,kBAAkBO,MAAM,CAACxC,KAAK,GAAG;wCAC/B4mB,0BAA0BtC,aAAaxG,UAAU;wCACjD+I,sBAAsBvC,aAAaC,MAAM;wCACzCmC,iBAAiB5c;wCACjByc,eAAezc;wCACfpH,UAAU;wCACVsjB,WAAW5wB,KAAK6wB,KAAK,CAACrlB,IAAI,CACxB,eACAsB,SACA,GAAGkD,KAAK,KAAK,CAAC;wCAEhB,6CAA6C;wCAC7C8gB,mBAAmBpc;wCACnBgd,aAAahnB;oCACf;gCACF;gCACA,IAAIinB,UAAU;oCACZA,SAASjI,mBAAmB,GAAGqF,gBAAgBnkB;gCACjD;4BACF,OAAO;gCACL,oEAAoE;gCACpE,4CAA4C;gCAC5C,iEAAiE;gCACjE,yCAAyC;gCACzC,KAAK,MAAM4C,SAAS2V,gBAAgB2K,GAAG,CAACljB,SAAS,EAAE,CAAE;oCACnD,MAAM+pB,WAAWjxB,kBAAkB8J,MAAMC,QAAQ;oCACjD,MAAMwlB,iBACJroB,MACA4C,MAAMC,QAAQ,EACdknB,UACArG,OACA,QACA;oCAEF,MAAM2E,iBACJroB,MACA4C,MAAMC,QAAQ,EACdknB,UACArG,OACA,QACA;oCAGF,MAAMY,eAAeH,gBAAgBvhB,MAAMC,QAAQ;oCAEnDZ,kBAAkBO,MAAM,CAACI,MAAMC,QAAQ,CAAC,GAAG;wCACzC+jB,0BAA0BtC,aAAaxG,UAAU;wCACjD+I,sBAAsBvC,aAAaC,MAAM;wCACzCmC,iBAAiB5c;wCACjByc,eAAezc;wCACfpH,UAAU1C;wCACVgmB,WAAW5wB,KAAK6wB,KAAK,CAACrlB,IAAI,CACxB,eACAsB,SACA,GAAGpJ,kBAAkB8J,MAAMC,QAAQ,EAAE,KAAK,CAAC;wCAE7C,6CAA6C;wCAC7CqjB,mBAAmBpc;wCACnBgd,aAAahnB;oCACf;oCAEA,IAAIinB,UAAU;wCACZA,SAASjI,mBAAmB,GAAGwF;oCACjC;gCACF;4BACF;wBACF;oBACF;oBAEA,iCAAiC;oBACjC,MAAMzvB,GAAGm1B,EAAE,CAACrhB,QAAQ;wBAAE7C,WAAW;wBAAMmkB,OAAO;oBAAK;oBACnD,MAAMvoB,cAAckU,mBAAmBiD;gBACzC;gBAEA,iEAAiE;gBACjE,0BAA0B;gBAC1BpF,eAAe1Q,aAAa,GAAGvD,yBAC7BuD,eACA,CAACH,QAAW,CAAA;wBACV,kEAAkE;wBAClE,mEAAmE;wBACnE3C,YAAYsT,YAAY2P,GAAG,CAACtgB,MAAM5C,IAAI,KAAK4C,MAAM5C,IAAI;wBACrDA,MAAM4C,MAAM5C,IAAI;oBAClB,CAAA;gBAGF,qCAAqC;gBACrC,MAAMuE,cACHU,UAAU,CAAC,yBACXC,YAAY,CAAC,IAAMxD,cAAc4R,oBAAoBG;YAC1D;YAEA,MAAMyW,kCAAkClgB,QAAQ4N,MAAM;YACtD,MAAMuS,mBAAmBvvB,cAAc;YACvC,IAAIwvB;YACJ,IAAIC;YACJ,IAAIvU,oBAAoB;gBACtBuU,mBAAmBrgB,QAAQ4N,MAAM;gBACjCwS,qBAAqBxvB,cAAc;YACrC;YAEA,wCAAwC;YACxCue,OAAOmR,GAAG;YAEV,MAAMC,cAAcvgB,QAAQ4N,MAAM,CAACwB;YACnCnN,UAAUS,MAAM,CACdtT,mBAAmB6U,YAAY;gBAC7B+I,mBAAmBuT,WAAW,CAAC,EAAE;gBACjCC,iBAAiB1lB,YAAY2b,IAAI;gBACjCgK,sBAAsBroB,SAASqe,IAAI;gBACnCiK,sBAAsBpS,iBAAiBmI,IAAI;gBAC3CkK,cACE1c,WAAW5C,MAAM,GAChBvG,CAAAA,YAAY2b,IAAI,GAAGre,SAASqe,IAAI,GAAGnI,iBAAiBmI,IAAI,AAAD;gBAC1DmK,cAAclK;gBACdmK,oBACEpR,CAAAA,gCAAAA,aAAchU,QAAQ,CAAC,uBAAsB;gBAC/CqlB,eAAe9f,iBAAiBK,MAAM;gBACtC0f,cAAclgB,QAAQQ,MAAM;gBAC5B2f,gBAAgBjgB,UAAUM,MAAM,GAAG;gBACnC4f,qBAAqBpgB,QAAQpI,MAAM,CAAC,CAACsR,IAAW,CAAC,CAACA,EAAE1F,GAAG,EAAEhD,MAAM;gBAC/D6f,sBAAsBlgB,iBAAiBvI,MAAM,CAAC,CAACsR,IAAW,CAAC,CAACA,EAAE1F,GAAG,EAC9DhD,MAAM;gBACT8f,uBAAuBpgB,UAAUtI,MAAM,CAAC,CAACsR,IAAW,CAAC,CAACA,EAAE1F,GAAG,EAAEhD,MAAM;gBACnE+f,iBAAiBxb,qBAAqBC,eAAe,IAAI;gBACzDwB;gBACA0G;gBACAC;gBACAC;gBACAC;YACF;YAGF,IAAIpb,iBAAiBuuB,cAAc,EAAE;gBACnC,MAAMne,SAAS5T,uBACbwD,iBAAiBuuB,cAAc,CAACC,MAAM;gBAExCrf,UAAUS,MAAM,CAACQ;gBACjBjB,UAAUS,MAAM,CACdjT,qCACEqD,iBAAiBuuB,cAAc,CAACE,6BAA6B;gBAGjE,MAAMC,kBAAkB1uB,iBAAiBuuB,cAAc,CAACG,eAAe;gBAEvE,KAAK,MAAM,CAACvS,KAAK0G,MAAM,IAAIrd,OAAOC,OAAO,CAACipB,iBAAkB;oBAC1Dvf,UAAUS,MAAM,CACdpT,uBAAuB;wBACrB;4BACE8nB,aAAanI;4BACboI,iBAAiB1B;wBACnB;qBACD;gBAEL;YACF;YAEA,IAAIvd,SAASqe,IAAI,GAAG,KAAKzb,QAAQ;oBAoDpB1B;gBAnDXue,mBAAmBE,OAAO,CAAC,CAAC0J;oBAC1B,MAAM1F,kBAAkBjtB,kBAAkB2yB;oBAC1C,MAAMzF,YAAY5wB,KAAK6wB,KAAK,CAACrlB,IAAI,CAC/B,eACAsB,SACA,GAAG6jB,gBAAgB,KAAK,CAAC;oBAG3B9jB,kBAAkBc,aAAa,CAAC0oB,SAAS,GAAG;wBAC1CvrB,YAAYzJ,oBACVuF,mBAAmByvB,UAAU;4BAC3BtrB,iBAAiB;wBACnB,GAAGE,EAAE,CAACC,MAAM;wBAEdomB,iBAAiB5c;wBACjByc,eAAezc;wBACfkc;wBACA7a,UAAUiN,yBAAyB/J,GAAG,CAACod,YACnC,OACAtT,uBAAuB9J,GAAG,CAACod,YACzB,GAAG1F,gBAAgB,KAAK,CAAC,GACzB;wBACN6B,oBAAoB9d;wBACpB+d,gBAAgB/d;wBAChBke,qBAAqBle;wBACrBuU,oBAAoBvU;wBACpBoU,qBAAqBpU;wBACrBme,gBAAgBxxB,oBACduF,mBAAmBgqB,WAAW;4BAC5B7lB,iBAAiB;4BACjB+nB,eAAe;4BACfC,8BAA8B;wBAChC,GAAG9nB,EAAE,CAACC,MAAM;wBAEd,6CAA6C;wBAC7C4lB,mBAAmBpc;wBACnBse,wBAAwBte;wBACxBgd,aAAahnB;oBACf;gBACF;gBAEAhD,iBAAiB4uB,aAAa,GAAG5b,aAAa4b,aAAa;gBAC3D5uB,iBAAiB6uB,mBAAmB,GAClCroB,OAAO+C,YAAY,CAACslB,mBAAmB;gBACzC7uB,iBAAiB8uB,2BAA2B,GAC1CtoB,OAAO+C,YAAY,CAACulB,2BAA2B;gBAEjD,MAAM7pB,uBAAuBrB,SAASuB;gBACtC,MAAMD,uBAAuBC,mBAAmB;oBAC9CvB;oBACAwB;oBACAC,OAAO,GAAEmB,eAAAA,OAAO2Q,IAAI,qBAAX3Q,aAAanB,OAAO;gBAC/B;YACF,OAAO;gBACL,MAAMJ,uBAAuBrB,SAAS;oBACpC0D,SAAS;oBACT5B,QAAQ,CAAC;oBACTO,eAAe,CAAC;oBAChB6e,SAAS9R;oBACT6R,gBAAgB,EAAE;gBACpB;YACF;YAEA,MAAMte,oBAAoB3C,SAAS4C;YACnC,MAAM5B,cAActM,KAAKwL,IAAI,CAACF,SAASzJ,gBAAgB;gBACrDmN,SAAS;gBACTynB,kBAAkB,OAAOvoB,OAAOwf,aAAa,KAAK;gBAClDgJ,qBAAqBxoB,OAAOyoB,aAAa,KAAK;gBAC9CrS,qBAAqBA,wBAAwB;YAC/C;YACA,MAAM7kB,GAAGkwB,MAAM,CAAC3vB,KAAKwL,IAAI,CAACF,SAAS1J,gBAAgBsgB,KAAK,CAAC,CAAC3L;gBACxD,IAAIA,IAAIC,IAAI,KAAK,UAAU;oBACzB,OAAO6K,QAAQ1P,OAAO;gBACxB;gBACA,OAAO0P,QAAQsK,MAAM,CAACpV;YACxB;YAEA,IAAIuC,QAAQ5K,OAAO+C,YAAY,CAACib,iBAAiB,GAAG;gBAClD,MAAM/c,cACHU,UAAU,CAAC,0BACXC,YAAY,CAAC;oBACZ,MAAMtO,qBACJsR,KACA9S,KAAKwL,IAAI,CAACF,SAAS3J;gBAEvB;YACJ;YAEA,MAAM+e;YAEN,IAAIsU,oBAAoB;gBACtB,IAAIC,kBAAkB;oBACpB,MAAM2B,iBAAiBhiB,QAAQ4N,MAAM,CAACyS;oBACtCD,mBAAmB9K,OAAO,CACxB,CAAC,2BAA2B,EAAEtgB,uBAAuBgtB,iBAAiB;gBAE1E;gBACA5B,mBAAmB7K,cAAc;gBACjC6K,qBAAqBtgB;YACvB;YAEA,IAAIoF,iBAAiB/F,YAAYxQ,QAAQyQ,SAAS,EAAE;gBAClD,MAAMvU,GAAGi0B,MAAM,CACb1zB,KAAKwL,IAAI,CAACF,SAASlJ,kBAAkB,aACrCpC,KAAKwL,IAAI,CAACF,SAASlJ,kBAAkB;gBAEvC,MAAM3C,GAAGi0B,MAAM,CACb1zB,KAAKwL,IAAI,CAACF,SAASlJ,kBAAkB,sBACrCpC,KAAKwL,IAAI,CAACF,SAASlJ,kBAAkB;YAEzC;YAEA,IAAIiS,eAAe;gBACjB9O,IAAIgQ,IAAI,CACN,CAAC,yGAAyG,CAAC;YAE/G;YAEA,IAAIrH,OAAOmX,MAAM,KAAK,UAAU;gBAC9B,MAAMlW,cACHU,UAAU,CAAC,oCACXC,YAAY,CAAC;oBACZ,MAAM+C,uBACJ3E,QACA4E,KACAC,oBACAC,cACA7D,eACA8D;gBAEJ;YACJ;YAEA,4DAA4D;YAC5D,6DAA6D;YAC7D,kEAAkE;YAClE,MAAM4jB,cAAc3oB,OAAO+C,YAAY,CAAC4lB,WAAW;YACnD,IAAIA,aAAa;gBACf,MAAM1nB,cACHU,UAAU,CAAC,iCACXC,YAAY,CAAC;oBACZ,MAAM7F,oBAAoB;wBACxB6I;wBACAxH;wBACA4C;wBACApB;wBACAkG,cAAchT,KAAKwL,IAAI,CAACsH,KAAKE;wBAC7BtD;wBACAwT;wBACA4T,aAAaliB,QAAQC,GAAG,CAACC,cAAc;wBACvCiiB,aAAaznB;wBACbE;wBACAC;wBACAonB;wBACAznB,UAAUA,SAASW,KAAK;wBACxB6L,aAAavM;wBACbgP;wBACAxR;wBACA0C;wBACA2U;wBACAsR,cAAclK;wBACd0L,cAAcnK;wBACd7e,qBAAqBqc,4BAA4Bpa,KAAK;oBACxD;gBACF;YACJ;YAEA,IAAI/B,OAAOmX,MAAM,KAAK,cAAc;gBAClC,MAAMlW,cACHU,UAAU,CAAC,qBACXC,YAAY,CAAC;oBACZ,MAAMZ,yBACJC,eACA7D,SACA8D,UACAC,sBACAC,uBACA+a,6BACA9a,oBACAC,mBACAC,wBACAC,aACAC,gBACAC;gBAEJ;YACJ;YAEA,IAAImlB,kBAAkB;gBACpB,MAAMkC,gCAAgCriB,QAAQ4N,MAAM,CAClDsS;gBAEFC,iBAAiB7K,OAAO,CACtB,CAAC,gCAAgC,EAAEtgB,uBAAuBqtB,gCAAgC;gBAE5FlC,iBAAiB5K,cAAc;YACjC;YACAve,QAAQC,GAAG;YAEX,IAAI+H,aAAa;gBACfzE,cACGU,UAAU,CAAC,uBACXmF,OAAO,CAAC,IAAMnP,kBAAkB;wBAAE8P;wBAAWD;wBAAUD;oBAAQ;YACpE;YAEA,MAAMtG,cAAcU,UAAU,CAAC,mBAAmBC,YAAY,CAAC,IAC7DhK,cAAcsJ,UAAUoU,WAAW;oBACjCzM;oBACAuU;oBACA5S,gBAAgBxK,OAAOwK,cAAc;oBACrCgL;oBACAnU;oBACA4d;gBACF;YAGF,MAAMhe,cACHU,UAAU,CAAC,mBACXC,YAAY,CAAC,IAAM+G,UAAU2B,KAAK;YAErC,MAAM4I;QACR;IACF,EAAE,OAAO8V,GAAG;QACV,MAAMrgB,YAAmChN,aAAaikB,GAAG,CAAC;QAC1D,IAAIjX,WAAW;YACbA,UAAUS,MAAM,CACd/S,iBAAiB;gBACfwP,SAASoB,uBAAuBpB;gBAChCojB,WAAWC,yBAAyBF;gBACpCtV,mBAAmBxQ,KAAKG,KAAK,CAAC,AAACgD,CAAAA,KAAKC,GAAG,KAAKF,cAAa,IAAK;YAChE;QAEJ;QACA,MAAM4iB;IACR,SAAU;QACR,kDAAkD;QAClD,MAAMxwB,qBAAqB2wB,GAAG;QAE9B,6DAA6D;QAC7D,MAAM3xB;QACNiB;QAEA,IAAIuN,kBAAkBO,cAAc;YAClC5L,YAAY;gBACVqL;gBACAojB,MAAM;gBACNhV,YAAYxP;gBACZxH,SAASmJ,aAAanJ,OAAO;gBAC7BisB,gBAAgBxjB,YAAYxQ,QAAQyQ,SAAS;gBAC7CwjB,MAAM;YACR;QACF;IACF;AACF;AAEA,SAASlQ;IACP/hB,IAAIgT,KAAK,CACP,CAAC,0MAA0M,CAAC;IAE9M3D,QAAQU,IAAI,CAAC;AACf;AAEA,SAASH,uBAAuBpB,OAAgB;IAC9C,OAAQA;QACN,KAAKxQ,QAAQyQ,SAAS;YACpB,OAAO;QACT,KAAKzQ,QAAQk0B,MAAM;YACjB,OAAO;QACT,KAAKl0B,QAAQm0B,OAAO;YAClB,OAAO;QACT;YACE,MAAM,qBAAwC,CAAxC,IAAIjhB,MAAM,CAAC,iBAAiB,EAAE1C,SAAS,GAAvC,qBAAA;uBAAA;4BAAA;8BAAA;YAAuC;IACjD;AACF;AAEA,SAASqjB,yBAAyB7gB,GAAY;IAC5C,MAAMC,OAAO1M,qBAAqByM;IAClC,IAAIC,QAAQ,MAAM;QAChB,OAAOA;IACT;IAEA,IAAID,eAAeE,SAAS,UAAUF,OAAO,OAAOA,IAAIC,IAAI,KAAK,UAAU;QACzE,OAAOD,IAAIC,IAAI;IACjB;IAEA,IAAID,eAAeE,OAAO;QACxB,OAAOF,IAAI0D,IAAI;IACjB;IAEA,OAAO;AACT","ignoreList":[0]}
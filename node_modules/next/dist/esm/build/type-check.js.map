{"version":3,"sources":["../../src/build/type-check.ts"],"sourcesContent":["import type { NextConfigComplete } from '../server/config-shared'\nimport type { Telemetry } from '../telemetry/storage'\nimport type { Span } from '../trace'\n\nimport * as Log from './output/log'\nimport { Worker } from '../lib/worker'\nimport createSpinner from './spinner'\nimport { eventTypeCheckCompleted } from '../telemetry/events'\nimport isError from '../lib/is-error'\nimport { hrtimeDurationToString } from './duration-to-string'\n\n/**\n * typescript will be loaded in \"next/lib/verify-typescript-setup\" and\n * then passed to \"next/lib/typescript/runTypeCheck\" as a parameter.\n *\n * Since it is impossible to pass a function from main thread to a worker,\n * instead of running \"next/lib/typescript/runTypeCheck\" in a worker,\n * we will run entire \"next/lib/verify-typescript-setup\" in a worker instead.\n */\nfunction verifyTypeScriptSetup(\n  dir: string,\n  distDir: string,\n  intentDirs: string[],\n  typeCheckPreflight: boolean,\n  tsconfigPath: string | undefined,\n  disableStaticImages: boolean,\n  cacheDir: string | undefined,\n  enableWorkerThreads: boolean | undefined,\n  hasAppDir: boolean,\n  hasPagesDir: boolean,\n  isolatedDevBuild: boolean | undefined\n) {\n  const typeCheckWorker = new Worker(\n    require.resolve('../lib/verify-typescript-setup'),\n    {\n      exposedMethods: ['verifyTypeScriptSetup'],\n      debuggerPortOffset: -1,\n      isolatedMemory: false,\n      numWorkers: 1,\n      enableWorkerThreads,\n      maxRetries: 0,\n    }\n  ) as Worker & {\n    verifyTypeScriptSetup: typeof import('../lib/verify-typescript-setup').verifyTypeScriptSetup\n  }\n\n  return typeCheckWorker\n    .verifyTypeScriptSetup({\n      dir,\n      distDir,\n      intentDirs,\n      typeCheckPreflight,\n      tsconfigPath,\n      disableStaticImages,\n      cacheDir,\n      hasAppDir,\n      hasPagesDir,\n      isolatedDevBuild,\n    })\n    .then((result) => {\n      typeCheckWorker.end()\n      return result\n    })\n    .catch(() => {\n      // The error is already logged in the worker, we simply exit the main thread to prevent the\n      // `Jest worker encountered 1 child process exceptions, exceeding retry limit` from showing up\n      process.exit(1)\n    })\n}\n\nexport async function startTypeChecking({\n  cacheDir,\n  config,\n  dir,\n  nextBuildSpan,\n  pagesDir,\n  telemetry,\n  appDir,\n}: {\n  cacheDir: string\n  config: NextConfigComplete\n  dir: string\n  nextBuildSpan: Span\n  pagesDir?: string\n  telemetry: Telemetry\n  appDir?: string\n}) {\n  const ignoreTypeScriptErrors = Boolean(config.typescript.ignoreBuildErrors)\n\n  if (ignoreTypeScriptErrors) {\n    Log.info('Skipping validation of types')\n  }\n\n  let typeCheckingSpinnerPrefixText: string | undefined\n  let typeCheckingSpinner: ReturnType<typeof createSpinner> | undefined\n\n  if (!ignoreTypeScriptErrors) {\n    typeCheckingSpinnerPrefixText = 'Running TypeScript'\n  }\n\n  if (typeCheckingSpinnerPrefixText) {\n    typeCheckingSpinner = createSpinner(typeCheckingSpinnerPrefixText)\n  }\n\n  const typeCheckAndLintStart = process.hrtime()\n\n  try {\n    const [verifyResult, typeCheckEnd] = await nextBuildSpan\n      .traceChild('run-typescript')\n      .traceAsyncFn(() =>\n        verifyTypeScriptSetup(\n          dir,\n          config.distDir,\n          [pagesDir, appDir].filter(Boolean) as string[],\n          !ignoreTypeScriptErrors,\n          config.typescript.tsconfigPath,\n          config.images.disableStaticImages,\n          cacheDir,\n          config.experimental.workerThreads,\n          !!appDir,\n          !!pagesDir,\n          config.experimental.isolatedDevBuild\n        ).then((resolved) => {\n          const checkEnd = process.hrtime(typeCheckAndLintStart)\n          return [resolved, checkEnd] as const\n        })\n      )\n\n    if (typeCheckingSpinner) {\n      typeCheckingSpinner.stop()\n\n      createSpinner(\n        `Finished TypeScript${ignoreTypeScriptErrors ? ' config validation' : ''} in ${hrtimeDurationToString(typeCheckEnd)}`\n      )?.stopAndPersist()\n    }\n\n    if (!ignoreTypeScriptErrors && verifyResult) {\n      telemetry.record(\n        eventTypeCheckCompleted({\n          durationInSeconds: typeCheckEnd[0],\n          typescriptVersion: verifyResult.version,\n          inputFilesCount: verifyResult.result?.inputFilesCount,\n          totalFilesCount: verifyResult.result?.totalFilesCount,\n          incremental: verifyResult.result?.incremental,\n        })\n      )\n    }\n  } catch (err) {\n    // prevent showing jest-worker internal error as it\n    // isn't helpful for users and clutters output\n    if (isError(err) && err.message === 'Call retries were exceeded') {\n      await telemetry.flush()\n      process.exit(1)\n    }\n    throw err\n  }\n}\n"],"names":["Log","Worker","createSpinner","eventTypeCheckCompleted","isError","hrtimeDurationToString","verifyTypeScriptSetup","dir","distDir","intentDirs","typeCheckPreflight","tsconfigPath","disableStaticImages","cacheDir","enableWorkerThreads","hasAppDir","hasPagesDir","isolatedDevBuild","typeCheckWorker","require","resolve","exposedMethods","debuggerPortOffset","isolatedMemory","numWorkers","maxRetries","then","result","end","catch","process","exit","startTypeChecking","config","nextBuildSpan","pagesDir","telemetry","appDir","ignoreTypeScriptErrors","Boolean","typescript","ignoreBuildErrors","info","typeCheckingSpinnerPrefixText","typeCheckingSpinner","typeCheckAndLintStart","hrtime","verifyResult","typeCheckEnd","traceChild","traceAsyncFn","filter","images","experimental","workerThreads","resolved","checkEnd","stop","stopAndPersist","record","durationInSeconds","typescriptVersion","version","inputFilesCount","totalFilesCount","incremental","err","message","flush"],"mappings":"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","ignoreList":[0]}
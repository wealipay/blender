{"version":3,"sources":["../../../src/build/static-paths/types.ts"],"sourcesContent":["import type { FallbackMode } from '../../lib/fallback'\nimport type { Params } from '../../server/request/params'\nimport type { DynamicParamTypes } from '../../shared/lib/app-router-types'\n\ntype StaticPrerenderedRoute = {\n  readonly params: Params\n  readonly pathname: string\n  readonly encodedPathname: string\n  readonly fallbackRouteParams: undefined\n  readonly fallbackMode: FallbackMode | undefined\n  readonly fallbackRootParams: undefined\n\n  /**\n   * When enabled, the route will be rendered with diagnostics enabled which\n   * will error the build if the route that is generated is empty.\n   */\n  throwOnEmptyStaticShell: undefined\n}\n\nexport type FallbackRouteParam = {\n  /**\n   * The name of the param.\n   */\n  readonly paramName: string\n\n  /**\n   * The type of the param.\n   */\n  readonly paramType: DynamicParamTypes\n\n  /**\n   * Whether this is a parallel route param or descends from a parallel route\n   * param.\n   */\n  readonly isParallelRouteParam: boolean\n}\n\ntype FallbackPrerenderedRoute = {\n  readonly params: Params\n  readonly pathname: string\n  readonly encodedPathname: string\n\n  /**\n   * The fallback route params for the route. This includes both the parallel\n   * route params and the non-parallel route params.\n   */\n  readonly fallbackRouteParams: readonly FallbackRouteParam[]\n  readonly fallbackMode: FallbackMode | undefined\n  readonly fallbackRootParams: readonly string[]\n\n  /**\n   * When enabled, the route will be rendered with diagnostics enabled which\n   * will error the build if the route that is generated is empty.\n   */\n  throwOnEmptyStaticShell: boolean\n}\n\nexport type PrerenderedRoute = StaticPrerenderedRoute | FallbackPrerenderedRoute\n\nexport type StaticPathsResult = {\n  fallbackMode: FallbackMode | undefined\n  prerenderedRoutes: PrerenderedRoute[] | undefined\n}\n"],"names":[],"mappings":"AA2DA,WAGC","ignoreList":[0]}